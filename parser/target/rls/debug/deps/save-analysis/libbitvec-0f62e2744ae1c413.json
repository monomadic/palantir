{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6","program":"/home/nom/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","bitvec","--edition=2018","/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"std\"","-C","metadata=0f62e2744ae1c413","-C","extra-filename=-0f62e2744ae1c413","--out-dir","/home/nom/Workspaces/palantir.workspace/palantir/parser/target/rls/debug/deps","-L","dependency=/home/nom/Workspaces/palantir.workspace/palantir/parser/target/rls/debug/deps","--extern","funty=/home/nom/Workspaces/palantir.workspace/palantir/parser/target/rls/debug/deps/libfunty-8cb10173381b6d82.rmeta","--extern","radium=/home/nom/Workspaces/palantir.workspace/palantir/parser/target/rls/debug/deps/libradium-9cf159016b036b32.rmeta","--extern","tap=/home/nom/Workspaces/palantir.workspace/palantir/parser/target/rls/debug/deps/libtap-7b9871d2cf696d00.rmeta","--extern","wyz=/home/nom/Workspaces/palantir.workspace/palantir/parser/target/rls/debug/deps/libwyz-6abe48fb7131bef8.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/nom/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/nom/Workspaces/palantir.workspace/palantir/parser/target/rls/debug/deps/libbitvec-0f62e2744ae1c413.rmeta"},"prelude":{"crate_id":{"name":"bitvec","disambiguator":[9408218036783214479,0]},"crate_root":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src","external_crates":[{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[1482942822998146276,0]}},{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/access.rs","num":2,"id":{"name":"core","disambiguator":[2034785968469428135,0]}},{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[12655493918929861395,0]}},{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[13424910470399079611,0]}},{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[8213023121058624814,0]}},{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[1453466684381863476,0]}},{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[6350140743624839590,0]}},{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14051362197407762759,0]}},{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[9149086998956066884,0]}},{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[10052156975085119838,0]}},{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[8205769154475333920,0]}},{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[6301584694146806614,0]}},{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[15443445678815071393,0]}},{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[11686829219546108309,0]}},{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[1288115582928114942,0]}},{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[3368074392128242346,0]}},{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[7654683265571716261,0]}},{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[14210105045647006011,0]}},{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[1449232587040508138,0]}},{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/access.rs","num":20,"id":{"name":"radium","disambiguator":[18196913277094443718,0]}},{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","num":21,"id":{"name":"tap","disambiguator":[15029636964079060447,0]}},{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","num":22,"id":{"name":"wyz","disambiguator":[13999305545264828935,0]}},{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/mem.rs","num":23,"id":{"name":"funty","disambiguator":[4650464121584206133,0]}}],"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/lib.rs","byte_start":0,"byte_end":6531,"line_start":1,"line_end":184,"column_start":1,"column_end":12}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":12},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/macros/internal.rs","byte_start":29251,"byte_end":29266,"line_start":354,"line_end":354,"column_start":15,"column_end":30},"alias_span":null,"name":"u8_from_ne_bits","value":"","parent":{"krate":0,"index":5}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":198026,"byte_end":198027,"line_start":38,"line_end":38,"column_start":11,"column_end":12},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":1088}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":198046,"byte_end":198047,"line_start":39,"line_end":39,"column_start":18,"column_end":19},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":1088}},{"kind":"Use","ref_id":{"krate":0,"index":3647},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":198081,"byte_end":198089,"line_start":43,"line_end":43,"column_start":10,"column_end":18},"alias_span":null,"name":"BitArray","value":"","parent":{"krate":0,"index":1088}},{"kind":"Use","ref_id":{"krate":0,"index":924},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":198105,"byte_end":198114,"line_start":45,"line_end":45,"column_start":4,"column_end":13},"alias_span":null,"name":"LocalBits","value":"","parent":{"krate":0,"index":1088}},{"kind":"Use","ref_id":{"krate":0,"index":4007},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":198119,"byte_end":198123,"line_start":46,"line_end":46,"column_start":4,"column_end":8},"alias_span":null,"name":"Lsb0","value":"","parent":{"krate":0,"index":1088}},{"kind":"Use","ref_id":{"krate":0,"index":4008},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":198119,"byte_end":198123,"line_start":46,"line_end":46,"column_start":4,"column_end":8},"alias_span":null,"name":"Lsb0","value":"","parent":{"krate":0,"index":1088}},{"kind":"Use","ref_id":{"krate":0,"index":3985},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":198128,"byte_end":198132,"line_start":47,"line_end":47,"column_start":4,"column_end":8},"alias_span":null,"name":"Msb0","value":"","parent":{"krate":0,"index":1088}},{"kind":"Use","ref_id":{"krate":0,"index":3986},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":198128,"byte_end":198132,"line_start":47,"line_end":47,"column_start":4,"column_end":8},"alias_span":null,"name":"Msb0","value":"","parent":{"krate":0,"index":1088}},{"kind":"Use","ref_id":{"krate":0,"index":1263},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":198148,"byte_end":198156,"line_start":49,"line_end":49,"column_start":10,"column_end":18},"alias_span":null,"name":"BitSlice","value":"","parent":{"krate":0,"index":1088}},{"kind":"Use","ref_id":{"krate":0,"index":2459},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":198217,"byte_end":198223,"line_start":54,"line_end":54,"column_start":10,"column_end":16},"alias_span":null,"name":"BitBox","value":"","parent":{"krate":0,"index":1088}},{"kind":"Use","ref_id":{"krate":0,"index":2895},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":198232,"byte_end":198238,"line_start":55,"line_end":55,"column_start":8,"column_end":14},"alias_span":null,"name":"BitVec","value":"","parent":{"krate":0,"index":1088}},{"kind":"Use","ref_id":{"krate":0,"index":18},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":198325,"byte_end":198331,"line_start":62,"line_end":62,"column_start":3,"column_end":9},"alias_span":null,"name":"bitarr","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":17},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":198335,"byte_end":198339,"line_start":63,"line_end":63,"column_start":3,"column_end":7},"alias_span":null,"name":"bits","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":20},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":198393,"byte_end":198399,"line_start":68,"line_end":68,"column_start":3,"column_end":9},"alias_span":null,"name":"bitbox","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":19},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":198403,"byte_end":198409,"line_start":69,"line_end":69,"column_start":3,"column_end":9},"alias_span":null,"name":"bitvec","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":557},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":198503,"byte_end":198511,"line_start":76,"line_end":76,"column_start":10,"column_end":18},"alias_span":null,"name":"BitField","value":"","parent":{"krate":0,"index":1131}},{"kind":"Use","ref_id":{"krate":0,"index":861},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":198520,"byte_end":198529,"line_start":77,"line_end":77,"column_start":8,"column_end":17},"alias_span":null,"name":"BitMemory","value":"","parent":{"krate":0,"index":1131}},{"kind":"Use","ref_id":{"krate":0,"index":897},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":198540,"byte_end":198548,"line_start":78,"line_end":78,"column_start":10,"column_end":18},"alias_span":null,"name":"BitOrder","value":"","parent":{"krate":0,"index":1131}},{"kind":"Use","ref_id":{"krate":0,"index":2306},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":198559,"byte_end":198567,"line_start":79,"line_end":79,"column_start":10,"column_end":18},"alias_span":null,"name":"BitStore","value":"","parent":{"krate":0,"index":1131}},{"kind":"Use","ref_id":{"krate":0,"index":2359},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":198577,"byte_end":198584,"line_start":80,"line_end":80,"column_start":9,"column_end":16},"alias_span":null,"name":"BitView","value":"","parent":{"krate":0,"index":1131}},{"kind":"Use","ref_id":{"krate":0,"index":557},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":198711,"byte_end":198719,"line_start":87,"line_end":87,"column_start":10,"column_end":18},"alias_span":null,"name":"_","value":"","parent":{"krate":0,"index":1148}},{"kind":"Use","ref_id":{"krate":0,"index":2359},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":198734,"byte_end":198741,"line_start":88,"line_end":88,"column_start":9,"column_end":16},"alias_span":null,"name":"_","value":"","parent":{"krate":0,"index":1148}},{"kind":"Use","ref_id":{"krate":0,"index":3647},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":198842,"byte_end":198850,"line_start":95,"line_end":95,"column_start":10,"column_end":18},"alias_span":null,"name":"BitArray","value":"","parent":{"krate":0,"index":1156}},{"kind":"Use","ref_id":{"krate":0,"index":3679},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":198867,"byte_end":198876,"line_start":97,"line_end":97,"column_start":4,"column_end":13},"alias_span":null,"name":"BitDomain","value":"","parent":{"krate":0,"index":1156}},{"kind":"Use","ref_id":{"krate":0,"index":3709},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":198881,"byte_end":198893,"line_start":98,"line_end":98,"column_start":4,"column_end":16},"alias_span":null,"name":"BitDomainMut","value":"","parent":{"krate":0,"index":1156}},{"kind":"Use","ref_id":{"krate":0,"index":924},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":198914,"byte_end":198923,"line_start":101,"line_end":101,"column_start":4,"column_end":13},"alias_span":null,"name":"LocalBits","value":"","parent":{"krate":0,"index":1156}},{"kind":"Use","ref_id":{"krate":0,"index":4007},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":198928,"byte_end":198932,"line_start":102,"line_end":102,"column_start":4,"column_end":8},"alias_span":null,"name":"Lsb0","value":"","parent":{"krate":0,"index":1156}},{"kind":"Use","ref_id":{"krate":0,"index":4008},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":198928,"byte_end":198932,"line_start":102,"line_end":102,"column_start":4,"column_end":8},"alias_span":null,"name":"Lsb0","value":"","parent":{"krate":0,"index":1156}},{"kind":"Use","ref_id":{"krate":0,"index":3985},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":198937,"byte_end":198941,"line_start":103,"line_end":103,"column_start":4,"column_end":8},"alias_span":null,"name":"Msb0","value":"","parent":{"krate":0,"index":1156}},{"kind":"Use","ref_id":{"krate":0,"index":3986},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":198937,"byte_end":198941,"line_start":103,"line_end":103,"column_start":4,"column_end":8},"alias_span":null,"name":"Msb0","value":"","parent":{"krate":0,"index":1156}},{"kind":"Use","ref_id":{"krate":0,"index":1263},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":198957,"byte_end":198965,"line_start":105,"line_end":105,"column_start":10,"column_end":18},"alias_span":null,"name":"BitSlice","value":"","parent":{"krate":0,"index":1156}},{"kind":"Use","ref_id":{"krate":0,"index":2459},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":199026,"byte_end":199032,"line_start":110,"line_end":110,"column_start":10,"column_end":16},"alias_span":null,"name":"BitBox","value":"","parent":{"krate":0,"index":1156}},{"kind":"Use","ref_id":{"krate":0,"index":2895},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":199041,"byte_end":199047,"line_start":111,"line_end":111,"column_start":8,"column_end":14},"alias_span":null,"name":"BitVec","value":"","parent":{"krate":0,"index":1156}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":199072,"byte_end":199073,"line_start":115,"line_end":115,"column_start":17,"column_end":18},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":1087}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":199091,"byte_end":199092,"line_start":116,"line_end":116,"column_start":17,"column_end":18},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":1087}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":199109,"byte_end":199110,"line_start":117,"line_end":117,"column_start":16,"column_end":17},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":1087}},{"kind":"Use","ref_id":{"krate":0,"index":1583},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":265272,"byte_end":265280,"line_start":2103,"line_end":2103,"column_start":3,"column_end":11},"alias_span":null,"name":"from_mut","value":"","parent":{"krate":0,"index":1191}},{"kind":"Use","ref_id":{"krate":0,"index":1586},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":265284,"byte_end":265298,"line_start":2104,"line_end":2104,"column_start":3,"column_end":17},"alias_span":null,"name":"from_raw_parts","value":"","parent":{"krate":0,"index":1191}},{"kind":"Use","ref_id":{"krate":0,"index":1591},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":265302,"byte_end":265320,"line_start":2105,"line_end":2105,"column_start":3,"column_end":21},"alias_span":null,"name":"from_raw_parts_mut","value":"","parent":{"krate":0,"index":1191}},{"kind":"Use","ref_id":{"krate":0,"index":1580},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":265324,"byte_end":265332,"line_start":2106,"line_end":2106,"column_start":3,"column_end":11},"alias_span":null,"name":"from_ref","value":"","parent":{"krate":0,"index":1191}},{"kind":"Use","ref_id":{"krate":0,"index":1596},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":265336,"byte_end":265349,"line_start":2107,"line_end":2107,"column_start":3,"column_end":16},"alias_span":null,"name":"BitSliceIndex","value":"","parent":{"krate":0,"index":1191}},{"kind":"Use","ref_id":{"krate":0,"index":4282},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":265366,"byte_end":265372,"line_start":2110,"line_end":2110,"column_start":3,"column_end":9},"alias_span":null,"name":"Chunks","value":"","parent":{"krate":0,"index":1191}},{"kind":"Use","ref_id":{"krate":0,"index":4355},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":265376,"byte_end":265387,"line_start":2111,"line_end":2111,"column_start":3,"column_end":14},"alias_span":null,"name":"ChunksExact","value":"","parent":{"krate":0,"index":1191}},{"kind":"Use","ref_id":{"krate":0,"index":4395},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":265391,"byte_end":265405,"line_start":2112,"line_end":2112,"column_start":3,"column_end":17},"alias_span":null,"name":"ChunksExactMut","value":"","parent":{"krate":0,"index":1191}},{"kind":"Use","ref_id":{"krate":0,"index":4321},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":265409,"byte_end":265418,"line_start":2113,"line_end":2113,"column_start":3,"column_end":12},"alias_span":null,"name":"ChunksMut","value":"","parent":{"krate":0,"index":1191}},{"kind":"Use","ref_id":{"krate":0,"index":4147},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":265422,"byte_end":265426,"line_start":2114,"line_end":2114,"column_start":3,"column_end":7},"alias_span":null,"name":"Iter","value":"","parent":{"krate":0,"index":1191}},{"kind":"Use","ref_id":{"krate":0,"index":4161},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":265430,"byte_end":265437,"line_start":2115,"line_end":2115,"column_start":3,"column_end":10},"alias_span":null,"name":"IterMut","value":"","parent":{"krate":0,"index":1191}},{"kind":"Use","ref_id":{"krate":0,"index":4430},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":265441,"byte_end":265448,"line_start":2116,"line_end":2116,"column_start":3,"column_end":10},"alias_span":null,"name":"RChunks","value":"","parent":{"krate":0,"index":1191}},{"kind":"Use","ref_id":{"krate":0,"index":4503},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":265452,"byte_end":265464,"line_start":2117,"line_end":2117,"column_start":3,"column_end":15},"alias_span":null,"name":"RChunksExact","value":"","parent":{"krate":0,"index":1191}},{"kind":"Use","ref_id":{"krate":0,"index":4543},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":265468,"byte_end":265483,"line_start":2118,"line_end":2118,"column_start":3,"column_end":18},"alias_span":null,"name":"RChunksExactMut","value":"","parent":{"krate":0,"index":1191}},{"kind":"Use","ref_id":{"krate":0,"index":4469},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":265487,"byte_end":265497,"line_start":2119,"line_end":2119,"column_start":3,"column_end":13},"alias_span":null,"name":"RChunksMut","value":"","parent":{"krate":0,"index":1191}},{"kind":"Use","ref_id":{"krate":0,"index":4693},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":265501,"byte_end":265507,"line_start":2120,"line_end":2120,"column_start":3,"column_end":9},"alias_span":null,"name":"RSplit","value":"","parent":{"krate":0,"index":1191}},{"kind":"Use","ref_id":{"krate":0,"index":1783},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":265511,"byte_end":265520,"line_start":2121,"line_end":2121,"column_start":3,"column_end":12},"alias_span":null,"name":"RSplitMut","value":"","parent":{"krate":0,"index":1191}},{"kind":"Use","ref_id":{"krate":0,"index":1807},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":265524,"byte_end":265531,"line_start":2122,"line_end":2122,"column_start":3,"column_end":10},"alias_span":null,"name":"RSplitN","value":"","parent":{"krate":0,"index":1191}},{"kind":"Use","ref_id":{"krate":0,"index":1814},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":265535,"byte_end":265545,"line_start":2123,"line_end":2123,"column_start":3,"column_end":13},"alias_span":null,"name":"RSplitNMut","value":"","parent":{"krate":0,"index":1191}},{"kind":"Use","ref_id":{"krate":0,"index":4603},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":265549,"byte_end":265554,"line_start":2124,"line_end":2124,"column_start":3,"column_end":8},"alias_span":null,"name":"Split","value":"","parent":{"krate":0,"index":1191}},{"kind":"Use","ref_id":{"krate":0,"index":1775},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":265558,"byte_end":265566,"line_start":2125,"line_end":2125,"column_start":3,"column_end":11},"alias_span":null,"name":"SplitMut","value":"","parent":{"krate":0,"index":1191}},{"kind":"Use","ref_id":{"krate":0,"index":1793},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":265570,"byte_end":265576,"line_start":2126,"line_end":2126,"column_start":3,"column_end":9},"alias_span":null,"name":"SplitN","value":"","parent":{"krate":0,"index":1191}},{"kind":"Use","ref_id":{"krate":0,"index":1800},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":265580,"byte_end":265589,"line_start":2127,"line_end":2127,"column_start":3,"column_end":12},"alias_span":null,"name":"SplitNMut","value":"","parent":{"krate":0,"index":1191}},{"kind":"Use","ref_id":{"krate":0,"index":4243},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":265593,"byte_end":265600,"line_start":2128,"line_end":2128,"column_start":3,"column_end":10},"alias_span":null,"name":"Windows","value":"","parent":{"krate":0,"index":1191}},{"kind":"Use","ref_id":{"krate":0,"index":1963},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":265614,"byte_end":265620,"line_start":2130,"line_end":2130,"column_start":9,"column_end":15},"alias_span":null,"name":"BitMut","value":"","parent":{"krate":0,"index":1191}},{"kind":"Use","ref_id":{"krate":0,"index":3161},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":512163,"byte_end":512168,"line_start":693,"line_end":693,"column_start":2,"column_end":7},"alias_span":null,"name":"Drain","value":"","parent":{"krate":0,"index":2845}},{"kind":"Use","ref_id":{"krate":0,"index":5690},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":512171,"byte_end":512179,"line_start":694,"line_end":694,"column_start":2,"column_end":10},"alias_span":null,"name":"IntoIter","value":"","parent":{"krate":0,"index":2845}},{"kind":"Use","ref_id":{"krate":0,"index":5725},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":512182,"byte_end":512188,"line_start":695,"line_end":695,"column_start":2,"column_end":8},"alias_span":null,"name":"Splice","value":"","parent":{"krate":0,"index":2845}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/lib.rs","byte_start":0,"byte_end":6531,"line_start":1,"line_end":184,"column_start":1,"column_end":12},"name":"","qualname":"::","value":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":21},{"krate":0,"index":67},{"krate":0,"index":398},{"krate":0,"index":490},{"krate":0,"index":686},{"krate":0,"index":854},{"krate":0,"index":877},{"krate":0,"index":925},{"krate":0,"index":1087},{"krate":0,"index":1191},{"krate":0,"index":2275},{"krate":0,"index":2335},{"krate":0,"index":2419},{"krate":0,"index":2845},{"krate":0,"index":3592}],"decl_id":null,"docs":" # Addressable Bits","sig":null,"attributes":[{"value":"* # Addressable Bits\n\n`bitvec` is a foundation library for memory compaction techniques that rely on\nviewing memory as bit-addressed rather than byte-addressed.\n\nThe `bitvec` project is designed to provide a comprehensive set of tools for\nusers who need memory compaction, with as low a cost as possible.\n\n# Usage\n\n`bitvec` provides data structures that specialize the major sequence types in\nthe standard library:\n\n- `[bool]` becomes [`BitSlice`]\n- `[bool; N]` becomes [`BitArray`]\n- `Box<[bool]>` becomes [`BitBox`]\n- `Vec<bool>` becomes [`BitVec`]\n\nYou can start using the crate in an existing codebase by replacing types and\nchasing compiler errors from there.\n\nAs an example,\n\n```rust\n# #[cfg(feature = \"alloc\")] {\nlet mut io_buf: Vec<u8> = Vec::new();\nio_buf.extend(&[0x47, 0xA5]);\n\nlet mut stats: Vec<bool> = Vec::new();\nstats.extend(&[true, false, true, true, false, false, true, false]);\n# }\n```\n\nwould become\n\n```rust\n# #[cfg(feature = \"alloc\")] {\nuse bitvec::prelude::*;\n\nlet mut io_buf = bitvec![Msb0, u8; 0; 16];\nio_buf[.. 4].store(4u8);\nio_buf[4 .. 8].store(7u8);\nio_buf[8 .. 16].store(0xA5u8);\n\nlet mut stats: BitVec = BitVec::new();\nstats.extend(&[true, false, true, true, false, false, true, false]);\n# }\n```\n\n# Capabilities\n\n`bitvec` stands out from other bit-vector libraries, both in Rust and in other\nlanguages, in a few significant ways.\n\nUnlike other Rust libraries, `bitvec` stores its information in pointers to\nmemory regions, rather than in the region directly. By using its own pointer\nencoding scheme, it can use references `&BitSlice` and `&mut BitSlice` to manage\nmemory and fit seamlessly into the Rust language rules and API signatures.\n\nUnlike *any* other bit-sequence system, `bitvec` enables users to specify the\nregister element type used to store data, and the ordering of bits within those\nelements. This sidesteps the problems found in C [bitfields], C++\n[`std::bitset`], Python [`bitstring`], Erlang [`bitstream`], and Rust libraries\nsuch as [`bit-vec`].\n\nBy permitting the in-memory layout to be specified by the user, rather than\nwithin the library, users are able to have the behavior characteristics they\nwant without effort or workarounds.\n\nThis works by suppling two type parameters: `O: BitOrder` specifies the ordering\nof bits within a register element, and `T: BitStore` specifies which register\nelement is used to store bits. `T` is restricted to be only the unsigned\nintegers, and `Cell` or `Atomic` variants of them.\n\n`bitvec` correctly handles memory aliasing by leveraging the type system to mark\nregions that have become subject to concurrency and either force the use of\natomic memory accesses or forbid simultaneous multiprocessing. You will never\nneed to insert your own guards to prevent race conditions, and [`BitSlice`]\nprovides APIs to separate any slice into its aliased and unaliased sub-regions.\n\n# Library Structure\n\nYou should generally import the library prelude, with\n\n```rust\nuse bitvec::prelude::*;\n```\n\nThe prelude contains all the symbols you will need to make use of the crate.\nAlmost all begin with the prefix `Bit`; only the orderings `Lsb0` and `Msb0` do\nnot. This will reduce the likelihood of name collisions. See the prelude module\ndocumentation for more detail on which symbols are imported, and how you can\nmore precisely control this.\n\nEach major component in the library is divided into its own module. This\nincludes each data structure and trait, as well as utility objects used for\nimplementation. The data structures that mirror the language distribution have\nsubmodules for each part of their mirroring: `api` ports inherent methods,\n`iter` contains iteration logic, `ops` operator overrides, and `traits` all\nother trait implementations.The data structure’s own module only contains its\nown definition and its inherent methods that are not ports of the standard\nlibraries.\n\n# Usage\n\nAs a replacement for `bool` data structures, you should be able to replace old\ntype definition and value construction sites with their corresponding items from\nthis crate, and the rest of your project should just work with the new types.\n\nTo use `bitvec` for bitfields, use [`BitArray`] or [`BitVec`] to manage your data\nbuffers (compile-time static and run-time dynamic, respectively), and the\n[`BitField`] trait to manage transferring values into and out of them.\n\nThe [`BitSlice`] type contains most of the methods and trait implementations used\nto interact with the *contents* of a memory buffer. [`BitVec`] adds methods for\noperating on allocations, and specializes [`BitSlice`] methods that can take\nadvantage of owned buffers.\n\nThe `domain` module, whose types are accessed by the `.{bit_,}domain{,_mut}`\nmethods on [`BitSlice`], allows users to split their views of memory on aliasing\nboundaries, removing synchronization where provably safe.\n\nThere are many ways to construct a bit-level view of data. The [`BitArray`],\n`BitBox`, and [`BitVec`] types are all owning types that contain a buffer of\nmemory and dereference to [`BitSlice`] in order to view it. In addition, you can\nborrow any piece of ordinary Rust memory as a [`BitSlice`] view using its\nborrowing constructor functions, and the [`BitView`] trait methods.\n\n# Examples\n\nSee the `examples/` directory of the project repository for detailed examples,\nor the type documentation for introductory samples.\n\n[`BitArray`]: array/struct.BitArray.html\n[`BitBox`]: boxed/struct.BitBox.html\n[`BitField`]: field/trait.BitField.html\n[`BitSlice`]: slice/struct.BitSlice.html\n[`BitVec`]: vec/struct.BitVec.html\n[`BitView`]: view/trait.BitView.html\n[`bitstream`]: https://erlang.org/doc/programming_examples/bit_syntax.html\n[`bitstring`]: https://pypi.org/project/bitstring/\n[`bit-vec`]: https://crates.io/crates/bit-vec\n[`std::bitset`]: https://en.cppreference.com/w/cpp/utility/bitset\n[bitfields]: https://en.cppreference.com/w/c/language/bit_field\n!*/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/lib.rs","byte_start":0,"byte_end":5887,"line_start":1,"line_end":145,"column_start":1,"column_end":4}},{"value":"warn(missing_docs)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/lib.rs","byte_start":5962,"byte_end":5980,"line_start":148,"line_end":148,"column_start":31,"column_end":49}},{"value":"deny(unconditional_recursion)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/lib.rs","byte_start":6039,"byte_end":6072,"line_start":150,"line_end":150,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/macros.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"macros","qualname":"::macros","value":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/macros.rs","parent":null,"children":[{"krate":0,"index":5},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20}],"decl_id":null,"docs":" Constructor macros for the crate’s collection types.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/lib.rs","byte_start":6121,"byte_end":6133,"line_start":155,"line_end":155,"column_start":1,"column_end":13}},{"value":"/ Constructor macros for the crate’s collection types.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/macros.rs","byte_start":6533,"byte_end":6591,"line_start":1,"line_end":1,"column_start":1,"column_end":57}}]},{"kind":"Mod","id":{"krate":0,"index":5},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/macros/internal.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"internal","qualname":"::macros::internal","value":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/macros/internal.rs","parent":null,"children":[{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14}],"decl_id":null,"docs":" Internal implementation macros for the public exports.","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/macros.rs","byte_start":6593,"byte_end":6605,"line_start":3,"line_end":3,"column_start":1,"column_end":13}},{"value":"* Internal implementation macros for the public exports.\n\nThe macros in this module are required to be exported from the crate, as the\npublic macros will call them from client contexts (`macro_rules!` expansion\nbodies are not in source crate scope, as they are token expansion rather than\nsymbolic calls). However, they are not part of the public *API* of the crate,\nand are not intended for use anywhere but in the expansion bodies of the\npublic-API constructor macros.\n!*/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/macros/internal.rs","byte_start":19121,"byte_end":19597,"line_start":1,"line_end":9,"column_start":1,"column_end":4}}]},{"kind":"Function","id":{"krate":0,"index":12},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/macros/internal.rs","byte_start":28508,"byte_end":28523,"line_start":309,"line_end":309,"column_start":14,"column_end":29},"name":"u8_from_le_bits","qualname":"::macros::internal::u8_from_le_bits","value":"pub const fn u8_from_le_bits(bool, bool, bool, bool, bool, bool, bool, bool)\n-> u8","parent":null,"children":[],"decl_id":null,"docs":" Construct a `u8` from bits applied in Lsb0-order.\n","sig":null,"attributes":[{"value":"/ Construct a `u8` from bits applied in Lsb0-order.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/macros/internal.rs","byte_start":28363,"byte_end":28416,"line_start":306,"line_end":306,"column_start":1,"column_end":54}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/macros/internal.rs","byte_start":28417,"byte_end":28457,"line_start":307,"line_end":307,"column_start":1,"column_end":41}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/macros/internal.rs","byte_start":28458,"byte_end":28494,"line_start":308,"line_end":308,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":13},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/macros/internal.rs","byte_start":28921,"byte_end":28936,"line_start":332,"line_end":332,"column_start":14,"column_end":29},"name":"u8_from_be_bits","qualname":"::macros::internal::u8_from_be_bits","value":"pub const fn u8_from_be_bits(bool, bool, bool, bool, bool, bool, bool, bool)\n-> u8","parent":null,"children":[],"decl_id":null,"docs":" Construct a `u8` from bits applied in Msb0-order.\n","sig":null,"attributes":[{"value":"/ Construct a `u8` from bits applied in Msb0-order.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/macros/internal.rs","byte_start":28776,"byte_end":28829,"line_start":329,"line_end":329,"column_start":1,"column_end":54}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/macros/internal.rs","byte_start":28830,"byte_end":28870,"line_start":330,"line_end":330,"column_start":1,"column_end":41}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/macros/internal.rs","byte_start":28871,"byte_end":28907,"line_start":331,"line_end":331,"column_start":1,"column_end":37}}]},{"kind":"Mod","id":{"krate":0,"index":67},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"array","qualname":"::array","value":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":76},{"krate":0,"index":79},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":89},{"krate":0,"index":3647},{"krate":0,"index":3652},{"krate":0,"index":3656},{"krate":0,"index":92},{"krate":0,"index":104},{"krate":0,"index":210}],"decl_id":null,"docs":" A fixed-size region viewed as individual bits, corresponding to `[bool]`.","sig":null,"attributes":[{"value":"* A fixed-size region viewed as individual bits, corresponding to `[bool]`.\n\nYou can read the language’s [array fundamental documentation][std] here.\n\nThis module defines the [`BitArray`] immediate type, and its associated support\ncode.\n\n`BitArray` has little behavior or properties in its own right. It serves solely\nas a type capable of being used in immediate value position, and delegates to\n`BitSlice` for all actual work.\n\n[`BitArray`]: struct.BitArray.html\n[std]: https://doc.rust-lang.org/std/primitive.array.html\n!*/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":40807,"byte_end":41336,"line_start":1,"line_end":14,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":3647},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":44816,"byte_end":44824,"line_start":142,"line_end":142,"column_start":12,"column_end":20},"name":"BitArray","qualname":"::array::BitArray","value":"BitArray {  }","parent":null,"children":[{"krate":0,"index":3650},{"krate":0,"index":3651}],"decl_id":null,"docs":" An array of individual bits, able to be held by value on the stack.","sig":null,"attributes":[{"value":"* An array of individual bits, able to be held by value on the stack.\n\nThis type is generic over all `Sized` implementors of the `BitView` trait. Due\nto limitations in the Rust language’s const-generics implementation (it is both\nunstable and incomplete), this must take an array type parameter, rather than a\nbit-count integer parameter, making it inconvenient to use. The [`bitarr!`]\nmacro is capable of constructing both values and specific types of `BitArray`,\nand this macro should be preferred for most use.\n\nThe advantage of using this wrapper is that it implements `Deref`/`Mut` to\n`BitSlice`, as well as implementing all of `BitSlice`’s traits by forwarding to\nthe bit-slice view of its contained data. This allows it to have `BitSlice`\nbehavior by itself, without requiring explicit `.as_bitslice()` calls in user\ncode.\n\n> Note: Not all traits may be implemented for forwarding, as a matter of effort\n> and perceived need. Please file an issue for any additional traits that you\n> need to be forwarded.\n\n# Limitations\n\nThis always produces a bit-slice that fully spans its data; you cannot produce,\nfor example, an array of twelve bits.\n\n# Type Parameters\n\n- `O`: The ordering of bits within memory elements.\n- `V`: Some amount of memory which can be used as the basis for a `BitSlice`\n  view. This will usually be an array `[T: BitStore; N]`.\n\n# Examples\n\nThis type is useful for marking that some value is always to be used as a\nbit-slice.\n\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":42169,"byte_end":43631,"line_start":61,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":43632,"byte_end":43643,"line_start":97,"line_end":97,"column_start":1,"column_end":12}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":43644,"byte_end":43671,"line_start":98,"line_end":98,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":43672,"byte_end":43675,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ struct HasBitfields {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":43676,"byte_end":43701,"line_start":100,"line_end":100,"column_start":1,"column_end":26}},{"value":"/   header: u32,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":43702,"byte_end":43720,"line_start":101,"line_end":101,"column_start":1,"column_end":19}},{"value":"/   //  creates a type declaration","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":43721,"byte_end":43757,"line_start":102,"line_end":102,"column_start":1,"column_end":37}},{"value":"/   fields: bitarr!(for 20, in Msb0, u8),","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":43758,"byte_end":43801,"line_start":103,"line_end":103,"column_start":1,"column_end":44}},{"value":"/ }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":43802,"byte_end":43807,"line_start":104,"line_end":104,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":43808,"byte_end":43811,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ impl HasBitfields {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":43812,"byte_end":43835,"line_start":106,"line_end":106,"column_start":1,"column_end":24}},{"value":"/   pub fn new() -> Self {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":43836,"byte_end":43864,"line_start":107,"line_end":107,"column_start":1,"column_end":29}},{"value":"/     Self {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":43865,"byte_end":43879,"line_start":108,"line_end":108,"column_start":1,"column_end":15}},{"value":"/       header: 0,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":43880,"byte_end":43900,"line_start":109,"line_end":109,"column_start":1,"column_end":21}},{"value":"/       //  creates a value object. the type paramaters must be repeated.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":43901,"byte_end":43976,"line_start":110,"line_end":110,"column_start":1,"column_end":76}},{"value":"/       fields: bitarr![Msb0, u8; 0; 20],","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":43977,"byte_end":44020,"line_start":111,"line_end":111,"column_start":1,"column_end":44}},{"value":"/     }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":44021,"byte_end":44030,"line_start":112,"line_end":112,"column_start":1,"column_end":10}},{"value":"/   }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":44031,"byte_end":44038,"line_start":113,"line_end":113,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":44039,"byte_end":44042,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/   /// Access a bit region directly","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":44043,"byte_end":44081,"line_start":115,"line_end":115,"column_start":1,"column_end":39}},{"value":"/   pub fn get_subfield(&self) -> &BitSlice<Msb0, u8> {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":44082,"byte_end":44139,"line_start":116,"line_end":116,"column_start":1,"column_end":58}},{"value":"/     &self.fields[.. 4]","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":44140,"byte_end":44166,"line_start":117,"line_end":117,"column_start":1,"column_end":27}},{"value":"/   }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":44167,"byte_end":44174,"line_start":118,"line_end":118,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":44175,"byte_end":44178,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/   /// Read a 12-bit value out of a region","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":44179,"byte_end":44224,"line_start":120,"line_end":120,"column_start":1,"column_end":46}},{"value":"/   pub fn read_value(&self) -> u16 {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":44225,"byte_end":44264,"line_start":121,"line_end":121,"column_start":1,"column_end":40}},{"value":"/     self.fields[4 .. 16].load()","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":44265,"byte_end":44300,"line_start":122,"line_end":122,"column_start":1,"column_end":36}},{"value":"/   }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":44301,"byte_end":44308,"line_start":123,"line_end":123,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":44309,"byte_end":44312,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/   /// Write a 12-bit value into a region","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":44313,"byte_end":44357,"line_start":125,"line_end":125,"column_start":1,"column_end":45}},{"value":"/   pub fn set_value(&mut self, value: u16) {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":44358,"byte_end":44405,"line_start":126,"line_end":126,"column_start":1,"column_end":48}},{"value":"/     self.fields[4 .. 16].store(value);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":44406,"byte_end":44448,"line_start":127,"line_end":127,"column_start":1,"column_end":43}},{"value":"/   }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":44449,"byte_end":44456,"line_start":128,"line_end":128,"column_start":1,"column_end":8}},{"value":"/ }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":44457,"byte_end":44462,"line_start":129,"line_end":129,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":44463,"byte_end":44470,"line_start":130,"line_end":130,"column_start":1,"column_end":8}},{"value":"*\n# Eventual Obsolescence\n\nWhen const-generics stabilize, this will be modified to have a signature more\nlike `BitArray<O, T: BitStore, const N: usize>([T; elts::<T>(N)]);`, to mirror\nthe behavior of ordinary arrays `[T; N]` as they stand today.\n\n[`bitarr!`]: ../../macro.bitarr.html\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":44471,"byte_end":44760,"line_start":131,"line_end":139,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":44761,"byte_end":44781,"line_start":140,"line_end":140,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":45180,"byte_end":45186,"line_start":161,"line_end":161,"column_start":9,"column_end":15},"name":"zeroed","qualname":"<BitArray<O, V>>::zeroed","value":"pub fn zeroed() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `BitArray` with zeroed memory.\n","sig":null,"attributes":[{"value":"/ Constructs a new `BitArray` with zeroed memory.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":45069,"byte_end":45120,"line_start":158,"line_end":158,"column_start":2,"column_end":53}},{"value":"inline(always)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":45122,"byte_end":45139,"line_start":159,"line_end":159,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":45141,"byte_end":45171,"line_start":160,"line_end":160,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":45483,"byte_end":45486,"line_start":177,"line_end":177,"column_start":9,"column_end":12},"name":"new","qualname":"<BitArray<O, V>>::new","value":"pub fn new(V) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `BitArray` from a data store.","sig":null,"attributes":[{"value":"/ Constructs a new `BitArray` from a data store.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":45296,"byte_end":45346,"line_start":168,"line_end":168,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":45348,"byte_end":45351,"line_start":169,"line_end":169,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":45353,"byte_end":45367,"line_start":170,"line_end":170,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":45369,"byte_end":45372,"line_start":171,"line_end":171,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":45374,"byte_end":45385,"line_start":172,"line_end":172,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":45387,"byte_end":45414,"line_start":173,"line_end":173,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":45416,"byte_end":45423,"line_start":174,"line_end":174,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":45425,"byte_end":45442,"line_start":175,"line_end":175,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":45444,"byte_end":45474,"line_start":176,"line_end":176,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":45875,"byte_end":45881,"line_start":196,"line_end":196,"column_start":9,"column_end":15},"name":"unwrap","qualname":"<BitArray<O, V>>::unwrap","value":"pub fn unwrap(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Removes the bit-array wrapper, returning the contained data.","sig":null,"attributes":[{"value":"/ Removes the bit-array wrapper, returning the contained data.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":45555,"byte_end":45619,"line_start":184,"line_end":184,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":45621,"byte_end":45624,"line_start":185,"line_end":185,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":45626,"byte_end":45640,"line_start":186,"line_end":186,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":45642,"byte_end":45645,"line_start":187,"line_end":187,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":45647,"byte_end":45658,"line_start":188,"line_end":188,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":45660,"byte_end":45687,"line_start":189,"line_end":189,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":45689,"byte_end":45692,"line_start":190,"line_end":190,"column_start":2,"column_end":5}},{"value":"/ let bitarr: BitArray<LocalBits, [usize; 1]> = bitarr![0; 30];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":45694,"byte_end":45759,"line_start":191,"line_end":191,"column_start":2,"column_end":67}},{"value":"/ let native: [usize; 1] = bitarr.unwrap();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":45761,"byte_end":45806,"line_start":192,"line_end":192,"column_start":2,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":45808,"byte_end":45815,"line_start":193,"line_end":193,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":45817,"byte_end":45834,"line_start":194,"line_end":194,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":45836,"byte_end":45866,"line_start":195,"line_end":195,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":46007,"byte_end":46018,"line_start":203,"line_end":203,"column_start":9,"column_end":20},"name":"as_bitslice","qualname":"<BitArray<O, V>>::as_bitslice","value":"pub fn as_bitslice(&Self) -> &BitSlice<O, V::Store>","parent":null,"children":[],"decl_id":null,"docs":" Views the array as a bit-slice.\n","sig":null,"attributes":[{"value":"/ Views the array as a bit-slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":45912,"byte_end":45947,"line_start":200,"line_end":200,"column_start":2,"column_end":37}},{"value":"inline(always)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":45949,"byte_end":45966,"line_start":201,"line_end":201,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":45968,"byte_end":45998,"line_start":202,"line_end":202,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":46191,"byte_end":46206,"line_start":210,"line_end":210,"column_start":9,"column_end":24},"name":"as_mut_bitslice","qualname":"<BitArray<O, V>>::as_mut_bitslice","value":"pub fn as_mut_bitslice(&mut Self) -> &mut BitSlice<O, V::Store>","parent":null,"children":[],"decl_id":null,"docs":" Views the array as a mutable bit-slice.\n","sig":null,"attributes":[{"value":"/ Views the array as a mutable bit-slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":46088,"byte_end":46131,"line_start":207,"line_end":207,"column_start":2,"column_end":45}},{"value":"inline(always)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":46133,"byte_end":46150,"line_start":208,"line_end":208,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":46152,"byte_end":46182,"line_start":209,"line_end":209,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":46406,"byte_end":46414,"line_start":217,"line_end":217,"column_start":9,"column_end":17},"name":"as_slice","qualname":"<BitArray<O, V>>::as_slice","value":"pub fn as_slice(&Self) -> &[V::Store]","parent":null,"children":[],"decl_id":null,"docs":" Views the array as a slice of its underlying elements.\n","sig":null,"attributes":[{"value":"/ Views the array as a slice of its underlying elements.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":46288,"byte_end":46346,"line_start":214,"line_end":214,"column_start":2,"column_end":60}},{"value":"inline(always)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":46348,"byte_end":46365,"line_start":215,"line_end":215,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":46367,"byte_end":46397,"line_start":216,"line_end":216,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":46684,"byte_end":46696,"line_start":229,"line_end":229,"column_start":9,"column_end":21},"name":"as_mut_slice","qualname":"<BitArray<O, V>>::as_mut_slice","value":"pub fn as_mut_slice(&mut Self) -> &mut [V::Store]","parent":null,"children":[],"decl_id":null,"docs":" Views the array as a mutable slice of its underlying elements.\n","sig":null,"attributes":[{"value":"/ Views the array as a mutable slice of its underlying elements.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":46558,"byte_end":46624,"line_start":226,"line_end":226,"column_start":2,"column_end":68}},{"value":"inline(always)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":46626,"byte_end":46643,"line_start":227,"line_end":227,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":46645,"byte_end":46675,"line_start":228,"line_end":228,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":46977,"byte_end":46989,"line_start":241,"line_end":241,"column_start":9,"column_end":21},"name":"as_raw_slice","qualname":"<BitArray<O, V>>::as_raw_slice","value":"pub fn as_raw_slice(&Self) -> &[V::Mem]","parent":null,"children":[],"decl_id":null,"docs":" Views the array as a slice of its raw underlying memory type.\n","sig":null,"attributes":[{"value":"/ Views the array as a slice of its raw underlying memory type.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":46852,"byte_end":46917,"line_start":238,"line_end":238,"column_start":2,"column_end":67}},{"value":"inline(always)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":46919,"byte_end":46936,"line_start":239,"line_end":239,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":46938,"byte_end":46968,"line_start":240,"line_end":240,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":47262,"byte_end":47278,"line_start":253,"line_end":253,"column_start":9,"column_end":25},"name":"as_raw_mut_slice","qualname":"<BitArray<O, V>>::as_raw_mut_slice","value":"pub fn as_raw_mut_slice(&mut Self) -> &mut [V::Mem]","parent":null,"children":[],"decl_id":null,"docs":" Views the array as a mutable slice of its raw underlying memory type.\n","sig":null,"attributes":[{"value":"/ Views the array as a mutable slice of its raw underlying memory type.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":47129,"byte_end":47202,"line_start":250,"line_end":250,"column_start":2,"column_end":75}},{"value":"inline(always)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":47204,"byte_end":47221,"line_start":251,"line_end":251,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":47223,"byte_end":47253,"line_start":252,"line_end":252,"column_start":2,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":3659},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":58514,"byte_end":58534,"line_start":371,"line_end":371,"column_start":12,"column_end":32},"name":"TryFromBitSliceError","qualname":"::array::traits::TryFromBitSliceError","value":"","parent":null,"children":[],"decl_id":null,"docs":" The error type returned when a conversion from a bitslice to a bitarray\n fails.\n","sig":null,"attributes":[{"value":"/ The error type returned when a conversion from a bitslice to a bitarray","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":58386,"byte_end":58461,"line_start":368,"line_end":368,"column_start":1,"column_end":76}},{"value":"/ fails.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":58462,"byte_end":58472,"line_start":369,"line_end":369,"column_start":1,"column_end":11}}]},{"kind":"Mod","id":{"krate":0,"index":398},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"domain","qualname":"::domain","value":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","parent":null,"children":[{"krate":0,"index":399},{"krate":0,"index":400},{"krate":0,"index":401},{"krate":0,"index":404},{"krate":0,"index":407},{"krate":0,"index":410},{"krate":0,"index":413},{"krate":0,"index":416},{"krate":0,"index":419},{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":424},{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":430},{"krate":0,"index":433},{"krate":0,"index":436},{"krate":0,"index":439},{"krate":0,"index":442},{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":449},{"krate":0,"index":452},{"krate":0,"index":455},{"krate":0,"index":3679},{"krate":0,"index":3691},{"krate":0,"index":3666},{"krate":0,"index":3709},{"krate":0,"index":3721},{"krate":0,"index":3696},{"krate":0,"index":456},{"krate":0,"index":460},{"krate":0,"index":463},{"krate":0,"index":3739},{"krate":0,"index":3750},{"krate":0,"index":3726},{"krate":0,"index":3767},{"krate":0,"index":3778},{"krate":0,"index":3754},{"krate":0,"index":464},{"krate":0,"index":467},{"krate":0,"index":475},{"krate":0,"index":482},{"krate":0,"index":485},{"krate":0,"index":487},{"krate":0,"index":489},{"krate":0,"index":3782},{"krate":0,"index":3785},{"krate":0,"index":3788},{"krate":0,"index":3791}],"decl_id":null,"docs":" Representation of the `BitSlice` region memory model","sig":null,"attributes":[{"value":"* Representation of the `BitSlice` region memory model\n\nThis module allows any `BitSlice` region to be decomposed into domains with\nmore detailed aliasing information.\n\nSpecifically, any particular `BitSlice` region is one of:\n\n- touches only interior indices of one element\n- touches at least one edge index of any number of elements (including zero)\n\nIn the latter case, any elements *completely* spanned by the slice handle are\nknown to not have any other write-capable views to them, and in the case of an\n`&mut BitSlice` handle specifically, no other views at all. As such, the domain\nview of this memory is able to remove the aliasing marker type and permit direct\nmemory access for the duration of its existence.\n!*/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":60086,"byte_end":60811,"line_start":1,"line_end":16,"column_start":1,"column_end":4}}]},{"kind":"Enum","id":{"krate":0,"index":3679},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":69434,"byte_end":69443,"line_start":338,"line_end":338,"column_start":13,"column_end":22},"name":"BitDomain","qualname":"::domain::BitDomain","value":"pub enum BitDomain<'a, O, T> where O: BitOrder, T: 'a + BitStore {\n    Enclave {\n        head: BitIdx<T::Mem>,\n        body: &'a BitSlice<O, T>,\n        tail: BitTail<T::Mem>,\n    },\n    Region {\n        head: &'a BitSlice<O, T>,\n        body: &'a BitSlice<O, T::Mem>,\n        tail: &'a BitSlice<O, T>,\n    },\n}","parent":null,"children":[{"krate":0,"index":3683},{"krate":0,"index":3687}],"decl_id":null,"docs":" Granular representation of the memory region containing a\n `BitSlice`.","sig":null,"attributes":[{"value":"/ Granular representation of the memory region containing a","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":61187,"byte_end":61248,"line_start":51,"line_end":51,"column_start":3,"column_end":64}},{"value":"/ `BitSlice`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":61251,"byte_end":61266,"line_start":52,"line_end":52,"column_start":3,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":61269,"byte_end":61272,"line_start":53,"line_end":53,"column_start":3,"column_end":6}},{"value":"/ `BitSlice` regions can be described in terms of edge and center","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":61275,"byte_end":61342,"line_start":54,"line_end":54,"column_start":3,"column_end":70}},{"value":"/ elements, where the edge elements retain the aliasing status of the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":61345,"byte_end":61416,"line_start":55,"line_end":55,"column_start":3,"column_end":74}},{"value":"/ source `BitSlice` handle, and the center elements are known to be","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":61419,"byte_end":61488,"line_start":56,"line_end":56,"column_start":3,"column_end":72}},{"value":"/ completely unaliased by any other view. This property allows any","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":61491,"byte_end":61559,"line_start":57,"line_end":57,"column_start":3,"column_end":71}},{"value":"/ `BitSlice` handle to be decomposed into smaller regions, and safely","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":61562,"byte_end":61633,"line_start":58,"line_end":58,"column_start":3,"column_end":74}},{"value":"/ remove any aliasing markers from the subregion of memory that no","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":61636,"byte_end":61704,"line_start":59,"line_end":59,"column_start":3,"column_end":71}},{"value":"/ longer requires them for correct access.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":61707,"byte_end":61751,"line_start":60,"line_end":60,"column_start":3,"column_end":47}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":61754,"byte_end":61757,"line_start":61,"line_end":61,"column_start":3,"column_end":6}},{"value":"/ This enum acts like the `.split*` methods in that it only subdivides","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":61760,"byte_end":61832,"line_start":62,"line_end":62,"column_start":3,"column_end":75}},{"value":"/ the source `BitSlice` into smaller `BitSlices`, and makes","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":61835,"byte_end":61896,"line_start":63,"line_end":63,"column_start":3,"column_end":64}},{"value":"/ appropriate modifications to the aliasing markers. It does not","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":61899,"byte_end":61965,"line_start":64,"line_end":64,"column_start":3,"column_end":69}},{"value":"/ provide references to the underlying memory elements. If you need","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":61968,"byte_end":62037,"line_start":65,"line_end":65,"column_start":3,"column_end":72}},{"value":"/ such access directly, use the [`Domain`] or [`DomainMut`] enums.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":62040,"byte_end":62108,"line_start":66,"line_end":66,"column_start":3,"column_end":71}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":62111,"byte_end":62114,"line_start":67,"line_end":67,"column_start":3,"column_end":6}},{"value":"/ # Lifetimes","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":62117,"byte_end":62132,"line_start":68,"line_end":68,"column_start":3,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":62135,"byte_end":62138,"line_start":69,"line_end":69,"column_start":3,"column_end":6}},{"value":"/ - `'a`: The lifetime of the referent storage region.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":62141,"byte_end":62197,"line_start":70,"line_end":70,"column_start":3,"column_end":59}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":62200,"byte_end":62203,"line_start":71,"line_end":71,"column_start":3,"column_end":6}},{"value":"/ # Type Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":62206,"byte_end":62227,"line_start":72,"line_end":72,"column_start":3,"column_end":24}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":62230,"byte_end":62233,"line_start":73,"line_end":73,"column_start":3,"column_end":6}},{"value":"/ - `O`: The ordering type of the source `BitSlice` handle.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":62236,"byte_end":62297,"line_start":74,"line_end":74,"column_start":3,"column_end":64}},{"value":"/ - `T`: The element type of the source `BitSlice` handle, including","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":62300,"byte_end":62370,"line_start":75,"line_end":75,"column_start":3,"column_end":73}},{"value":"/   aliasing markers.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":62373,"byte_end":62396,"line_start":76,"line_end":76,"column_start":3,"column_end":26}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":62399,"byte_end":62402,"line_start":77,"line_end":77,"column_start":3,"column_end":6}},{"value":"/ # Aliasing Awareness","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":62405,"byte_end":62429,"line_start":78,"line_end":78,"column_start":3,"column_end":27}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":62432,"byte_end":62435,"line_start":79,"line_end":79,"column_start":3,"column_end":6}},{"value":"/ This enum does not grant access to memory outside the scope of the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":62438,"byte_end":62508,"line_start":80,"line_end":80,"column_start":3,"column_end":73}},{"value":"/ original `&BitSlice` handle, and so does not need to modfiy any","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":62511,"byte_end":62578,"line_start":81,"line_end":81,"column_start":3,"column_end":70}},{"value":"/ aliasing conditions.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":62581,"byte_end":62605,"line_start":82,"line_end":82,"column_start":3,"column_end":27}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":62608,"byte_end":62611,"line_start":83,"line_end":83,"column_start":3,"column_end":6}},{"value":"/ [`Domain`]: enum.Domain.html","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":62614,"byte_end":62646,"line_start":84,"line_end":84,"column_start":3,"column_end":35}},{"value":"/ [`DomainMut`]: enum.DomainMut.html","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":62649,"byte_end":62687,"line_start":85,"line_end":85,"column_start":3,"column_end":41}}]},{"kind":"Enum","id":{"krate":0,"index":3709},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":69458,"byte_end":69470,"line_start":339,"line_end":339,"column_start":13,"column_end":25},"name":"BitDomainMut","qualname":"::domain::BitDomainMut","value":"pub enum BitDomainMut<'a, O, T> where O: BitOrder, T: 'a + BitStore {\n    Enclave {\n        head: BitIdx<T::Mem>,\n        body: &'a mut BitSlice<O, T>,\n        tail: BitTail<T::Mem>,\n    },\n    Region {\n        head: &'a mut BitSlice<O, T>,\n        body: &'a mut BitSlice<O, T::Mem>,\n        tail: &'a mut BitSlice<O, T>,\n    },\n}","parent":null,"children":[{"krate":0,"index":3713},{"krate":0,"index":3717}],"decl_id":null,"docs":" Granular representation of the memory region containing a\n `BitSlice`.","sig":null,"attributes":[{"value":"/ Granular representation of the memory region containing a","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":61187,"byte_end":61248,"line_start":51,"line_end":51,"column_start":3,"column_end":64}},{"value":"/ `BitSlice`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":61251,"byte_end":61266,"line_start":52,"line_end":52,"column_start":3,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":61269,"byte_end":61272,"line_start":53,"line_end":53,"column_start":3,"column_end":6}},{"value":"/ `BitSlice` regions can be described in terms of edge and center","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":61275,"byte_end":61342,"line_start":54,"line_end":54,"column_start":3,"column_end":70}},{"value":"/ elements, where the edge elements retain the aliasing status of the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":61345,"byte_end":61416,"line_start":55,"line_end":55,"column_start":3,"column_end":74}},{"value":"/ source `BitSlice` handle, and the center elements are known to be","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":61419,"byte_end":61488,"line_start":56,"line_end":56,"column_start":3,"column_end":72}},{"value":"/ completely unaliased by any other view. This property allows any","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":61491,"byte_end":61559,"line_start":57,"line_end":57,"column_start":3,"column_end":71}},{"value":"/ `BitSlice` handle to be decomposed into smaller regions, and safely","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":61562,"byte_end":61633,"line_start":58,"line_end":58,"column_start":3,"column_end":74}},{"value":"/ remove any aliasing markers from the subregion of memory that no","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":61636,"byte_end":61704,"line_start":59,"line_end":59,"column_start":3,"column_end":71}},{"value":"/ longer requires them for correct access.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":61707,"byte_end":61751,"line_start":60,"line_end":60,"column_start":3,"column_end":47}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":61754,"byte_end":61757,"line_start":61,"line_end":61,"column_start":3,"column_end":6}},{"value":"/ This enum acts like the `.split*` methods in that it only subdivides","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":61760,"byte_end":61832,"line_start":62,"line_end":62,"column_start":3,"column_end":75}},{"value":"/ the source `BitSlice` into smaller `BitSlices`, and makes","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":61835,"byte_end":61896,"line_start":63,"line_end":63,"column_start":3,"column_end":64}},{"value":"/ appropriate modifications to the aliasing markers. It does not","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":61899,"byte_end":61965,"line_start":64,"line_end":64,"column_start":3,"column_end":69}},{"value":"/ provide references to the underlying memory elements. If you need","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":61968,"byte_end":62037,"line_start":65,"line_end":65,"column_start":3,"column_end":72}},{"value":"/ such access directly, use the [`Domain`] or [`DomainMut`] enums.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":62040,"byte_end":62108,"line_start":66,"line_end":66,"column_start":3,"column_end":71}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":62111,"byte_end":62114,"line_start":67,"line_end":67,"column_start":3,"column_end":6}},{"value":"/ # Lifetimes","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":62117,"byte_end":62132,"line_start":68,"line_end":68,"column_start":3,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":62135,"byte_end":62138,"line_start":69,"line_end":69,"column_start":3,"column_end":6}},{"value":"/ - `'a`: The lifetime of the referent storage region.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":62141,"byte_end":62197,"line_start":70,"line_end":70,"column_start":3,"column_end":59}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":62200,"byte_end":62203,"line_start":71,"line_end":71,"column_start":3,"column_end":6}},{"value":"/ # Type Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":62206,"byte_end":62227,"line_start":72,"line_end":72,"column_start":3,"column_end":24}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":62230,"byte_end":62233,"line_start":73,"line_end":73,"column_start":3,"column_end":6}},{"value":"/ - `O`: The ordering type of the source `BitSlice` handle.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":62236,"byte_end":62297,"line_start":74,"line_end":74,"column_start":3,"column_end":64}},{"value":"/ - `T`: The element type of the source `BitSlice` handle, including","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":62300,"byte_end":62370,"line_start":75,"line_end":75,"column_start":3,"column_end":73}},{"value":"/   aliasing markers.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":62373,"byte_end":62396,"line_start":76,"line_end":76,"column_start":3,"column_end":26}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":62399,"byte_end":62402,"line_start":77,"line_end":77,"column_start":3,"column_end":6}},{"value":"/ # Aliasing Awareness","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":62405,"byte_end":62429,"line_start":78,"line_end":78,"column_start":3,"column_end":27}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":62432,"byte_end":62435,"line_start":79,"line_end":79,"column_start":3,"column_end":6}},{"value":"/ This enum does not grant access to memory outside the scope of the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":62438,"byte_end":62508,"line_start":80,"line_end":80,"column_start":3,"column_end":73}},{"value":"/ original `&BitSlice` handle, and so does not need to modfiy any","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":62511,"byte_end":62578,"line_start":81,"line_end":81,"column_start":3,"column_end":70}},{"value":"/ aliasing conditions.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":62581,"byte_end":62605,"line_start":82,"line_end":82,"column_start":3,"column_end":27}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":62608,"byte_end":62611,"line_start":83,"line_end":83,"column_start":3,"column_end":6}},{"value":"/ [`Domain`]: enum.Domain.html","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":62614,"byte_end":62646,"line_start":84,"line_end":84,"column_start":3,"column_end":35}},{"value":"/ [`DomainMut`]: enum.DomainMut.html","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":62649,"byte_end":62687,"line_start":85,"line_end":85,"column_start":3,"column_end":41}}]},{"kind":"Enum","id":{"krate":0,"index":3739},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":76995,"byte_end":77001,"line_start":610,"line_end":610,"column_start":9,"column_end":15},"name":"Domain","qualname":"::domain::Domain","value":"pub enum Domain<'a, T> where T: 'a + BitStore {\n    Enclave {\n        head: BitIdx<T::Mem>,\n        elem: &'a T,\n        tail: BitTail<T::Mem>,\n    },\n    Region {\n        head: Option<(BitIdx<T::Mem>, &'a T)>,\n        body: &'a [T::Mem],\n        tail: Option<(&'a T, BitTail<T::Mem>)>,\n    },\n}","parent":null,"children":[{"krate":0,"index":3742},{"krate":0,"index":3746}],"decl_id":null,"docs":" Granular representation of the memory region containing a\n `BitSlice`.","sig":null,"attributes":[{"value":"/ Granular representation of the memory region containing a","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":69804,"byte_end":69865,"line_start":362,"line_end":362,"column_start":3,"column_end":64}},{"value":"/ `BitSlice`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":69868,"byte_end":69883,"line_start":363,"line_end":363,"column_start":3,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":69886,"byte_end":69889,"line_start":364,"line_end":364,"column_start":3,"column_end":6}},{"value":"/ `BitSlice` regions can be described in terms of edge and center","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":69892,"byte_end":69959,"line_start":365,"line_end":365,"column_start":3,"column_end":70}},{"value":"/ elements, where the edge elements retain the aliasing status of the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":69962,"byte_end":70033,"line_start":366,"line_end":366,"column_start":3,"column_end":74}},{"value":"/ source `BitSlice` handle, and the center elements are known to be","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70036,"byte_end":70105,"line_start":367,"line_end":367,"column_start":3,"column_end":72}},{"value":"/ completely unaliased by any other view. This property allows any","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70108,"byte_end":70176,"line_start":368,"line_end":368,"column_start":3,"column_end":71}},{"value":"/ `BitSlice` handle to be decomposed into smaller regions, and safely","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70179,"byte_end":70250,"line_start":369,"line_end":369,"column_start":3,"column_end":74}},{"value":"/ remove any aliasing markers from the subregion of memory that no","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70253,"byte_end":70321,"line_start":370,"line_end":370,"column_start":3,"column_end":71}},{"value":"/ longer requires them for correct access.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70324,"byte_end":70368,"line_start":371,"line_end":371,"column_start":3,"column_end":47}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70371,"byte_end":70374,"line_start":372,"line_end":372,"column_start":3,"column_end":6}},{"value":"/ This enum splits the element region backing a `BitSlice` into","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70377,"byte_end":70442,"line_start":373,"line_end":373,"column_start":3,"column_end":68}},{"value":"/ maybe-aliased and known-unaliased subslices. If you do not need to","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70445,"byte_end":70515,"line_start":374,"line_end":374,"column_start":3,"column_end":73}},{"value":"/ work directly with the memory elements, and only need to firmly","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70518,"byte_end":70585,"line_start":375,"line_end":375,"column_start":3,"column_end":70}},{"value":"/ specify the aliasing status of a `BitSlice`, see the [`BitDomain`]","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70588,"byte_end":70658,"line_start":376,"line_end":376,"column_start":3,"column_end":73}},{"value":"/ and [`BitDomainMut`] enums.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70661,"byte_end":70692,"line_start":377,"line_end":377,"column_start":3,"column_end":34}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70695,"byte_end":70698,"line_start":378,"line_end":378,"column_start":3,"column_end":6}},{"value":"/ # Lifetimes","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70701,"byte_end":70716,"line_start":379,"line_end":379,"column_start":3,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70719,"byte_end":70722,"line_start":380,"line_end":380,"column_start":3,"column_end":6}},{"value":"/ - `'a`: The lifetime of the referent storage region.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70725,"byte_end":70781,"line_start":381,"line_end":381,"column_start":3,"column_end":59}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70784,"byte_end":70787,"line_start":382,"line_end":382,"column_start":3,"column_end":6}},{"value":"/ # Type Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70790,"byte_end":70811,"line_start":383,"line_end":383,"column_start":3,"column_end":24}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70814,"byte_end":70817,"line_start":384,"line_end":384,"column_start":3,"column_end":6}},{"value":"/ - `T`: The element type of the source `BitSlice` handle, including","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70820,"byte_end":70890,"line_start":385,"line_end":385,"column_start":3,"column_end":73}},{"value":"/   aliasing markers.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70893,"byte_end":70916,"line_start":386,"line_end":386,"column_start":3,"column_end":26}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70919,"byte_end":70922,"line_start":387,"line_end":387,"column_start":3,"column_end":6}},{"value":"/ [`BitDomain`]: enum.BitDomain.html","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70925,"byte_end":70963,"line_start":388,"line_end":388,"column_start":3,"column_end":41}},{"value":"/ [`BitDomainMut`]: enum.BitDomainMut.html","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70966,"byte_end":71010,"line_start":389,"line_end":389,"column_start":3,"column_end":47}}]},{"kind":"Enum","id":{"krate":0,"index":3767},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":77012,"byte_end":77021,"line_start":611,"line_end":611,"column_start":9,"column_end":18},"name":"DomainMut","qualname":"::domain::DomainMut","value":"pub enum DomainMut<'a, T> where T: 'a + BitStore {\n    Enclave {\n        head: BitIdx<T::Mem>,\n        elem: &'a T::Alias,\n        tail: BitTail<T::Mem>,\n    },\n    Region {\n        head: Option<(BitIdx<T::Mem>, &'a T::Alias)>,\n        body: &'a mut [T::Mem],\n        tail: Option<(&'a T::Alias, BitTail<T::Mem>)>,\n    },\n}","parent":null,"children":[{"krate":0,"index":3770},{"krate":0,"index":3774}],"decl_id":null,"docs":" Granular representation of the memory region containing a\n `BitSlice`.","sig":null,"attributes":[{"value":"/ Granular representation of the memory region containing a","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":69804,"byte_end":69865,"line_start":362,"line_end":362,"column_start":3,"column_end":64}},{"value":"/ `BitSlice`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":69868,"byte_end":69883,"line_start":363,"line_end":363,"column_start":3,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":69886,"byte_end":69889,"line_start":364,"line_end":364,"column_start":3,"column_end":6}},{"value":"/ `BitSlice` regions can be described in terms of edge and center","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":69892,"byte_end":69959,"line_start":365,"line_end":365,"column_start":3,"column_end":70}},{"value":"/ elements, where the edge elements retain the aliasing status of the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":69962,"byte_end":70033,"line_start":366,"line_end":366,"column_start":3,"column_end":74}},{"value":"/ source `BitSlice` handle, and the center elements are known to be","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70036,"byte_end":70105,"line_start":367,"line_end":367,"column_start":3,"column_end":72}},{"value":"/ completely unaliased by any other view. This property allows any","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70108,"byte_end":70176,"line_start":368,"line_end":368,"column_start":3,"column_end":71}},{"value":"/ `BitSlice` handle to be decomposed into smaller regions, and safely","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70179,"byte_end":70250,"line_start":369,"line_end":369,"column_start":3,"column_end":74}},{"value":"/ remove any aliasing markers from the subregion of memory that no","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70253,"byte_end":70321,"line_start":370,"line_end":370,"column_start":3,"column_end":71}},{"value":"/ longer requires them for correct access.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70324,"byte_end":70368,"line_start":371,"line_end":371,"column_start":3,"column_end":47}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70371,"byte_end":70374,"line_start":372,"line_end":372,"column_start":3,"column_end":6}},{"value":"/ This enum splits the element region backing a `BitSlice` into","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70377,"byte_end":70442,"line_start":373,"line_end":373,"column_start":3,"column_end":68}},{"value":"/ maybe-aliased and known-unaliased subslices. If you do not need to","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70445,"byte_end":70515,"line_start":374,"line_end":374,"column_start":3,"column_end":73}},{"value":"/ work directly with the memory elements, and only need to firmly","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70518,"byte_end":70585,"line_start":375,"line_end":375,"column_start":3,"column_end":70}},{"value":"/ specify the aliasing status of a `BitSlice`, see the [`BitDomain`]","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70588,"byte_end":70658,"line_start":376,"line_end":376,"column_start":3,"column_end":73}},{"value":"/ and [`BitDomainMut`] enums.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70661,"byte_end":70692,"line_start":377,"line_end":377,"column_start":3,"column_end":34}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70695,"byte_end":70698,"line_start":378,"line_end":378,"column_start":3,"column_end":6}},{"value":"/ # Lifetimes","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70701,"byte_end":70716,"line_start":379,"line_end":379,"column_start":3,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70719,"byte_end":70722,"line_start":380,"line_end":380,"column_start":3,"column_end":6}},{"value":"/ - `'a`: The lifetime of the referent storage region.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70725,"byte_end":70781,"line_start":381,"line_end":381,"column_start":3,"column_end":59}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70784,"byte_end":70787,"line_start":382,"line_end":382,"column_start":3,"column_end":6}},{"value":"/ # Type Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70790,"byte_end":70811,"line_start":383,"line_end":383,"column_start":3,"column_end":24}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70814,"byte_end":70817,"line_start":384,"line_end":384,"column_start":3,"column_end":6}},{"value":"/ - `T`: The element type of the source `BitSlice` handle, including","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70820,"byte_end":70890,"line_start":385,"line_end":385,"column_start":3,"column_end":73}},{"value":"/   aliasing markers.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70893,"byte_end":70916,"line_start":386,"line_end":386,"column_start":3,"column_end":26}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70919,"byte_end":70922,"line_start":387,"line_end":387,"column_start":3,"column_end":6}},{"value":"/ [`BitDomain`]: enum.BitDomain.html","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70925,"byte_end":70963,"line_start":388,"line_end":388,"column_start":3,"column_end":41}},{"value":"/ [`BitDomainMut`]: enum.BitDomainMut.html","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":70966,"byte_end":71010,"line_start":389,"line_end":389,"column_start":3,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":490},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"field","qualname":"::field","value":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","parent":null,"children":[{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":495},{"krate":0,"index":498},{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":505},{"krate":0,"index":508},{"krate":0,"index":511},{"krate":0,"index":514},{"krate":0,"index":515},{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":521},{"krate":0,"index":522},{"krate":0,"index":524},{"krate":0,"index":527},{"krate":0,"index":530},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":541},{"krate":0,"index":544},{"krate":0,"index":547},{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":554},{"krate":0,"index":557},{"krate":0,"index":570},{"krate":0,"index":580},{"krate":0,"index":590},{"krate":0,"index":601},{"krate":0,"index":612},{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":629},{"krate":0,"index":634},{"krate":0,"index":637},{"krate":0,"index":640}],"decl_id":null,"docs":" Parallel bitfield access.","sig":null,"attributes":[{"value":"* Parallel bitfield access.\n\nThis module provides parallel, multiple-bit, access to a `BitSlice`. This\nfunctionality permits the use of `BitSlice` as a library-level implementation of\nthe bitfield language feature found in C and C++.\n\nThe `BitField` trait is not sealed against client implementation, as there is no\nuseful way to automatically use a `BitOrder` implementation to provide a\nuniversal behavior. As such, the trait has some requirements that the compiler\ncannot enforce for client implementations.\n\n# Batch Behavior\n\nThe purpose of this trait is to provide access to arbitrary bit regions as if\nthey were an ordinary memory location. As such, it is important for\nimplementations of this trait to provide shift/mask register transfer behavior\nwhere possible, for as wide a span as possible in each action. Implementations\nof this trait should *not* use bit-by-bit iteration.\n\n# Register Bit Order Preservation\n\nAs a default assumption – user orderings *may* violate this, but *should* not –\neach element of slice memory used to store part of a value should not reorder\nthe value bits. Transfer between slice memory and a CPU register should solely\nbe an ordinary value load or store between memory and the register, and a\nshift/mask operation to select the part of the value that is live.\n\n# Endianness\n\nThe `_le` and `_be` methods of `BitField` refer to the order in which\n`T: BitStore` elements of the slice are assigned significance when containing\nfragments of a stored data value. Within any `T` element, the order of its\nconstituent bytes is *not* governed by the `BitField` trait method.\n\nThe provided `BitOrder` implementors `Lsb0` and `Msb0` use the local machine’s\nbyte ordering. Other cursors *may* implement ordering of bytes within `T`\nelements differently, for instance by calling `.to_be_bytes` before store and\n`from_be_bytes` after load.\n!*/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":79542,"byte_end":81420,"line_start":1,"line_end":39,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":557},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":82772,"byte_end":82780,"line_start":98,"line_end":98,"column_start":11,"column_end":19},"name":"BitField","qualname":"::field::BitField","value":"BitField","parent":null,"children":[{"krate":0,"index":558},{"krate":0,"index":560},{"krate":0,"index":562},{"krate":0,"index":564},{"krate":0,"index":566},{"krate":0,"index":568}],"decl_id":null,"docs":" Performs C-style bitfield access through a `BitSlice`.","sig":null,"attributes":[{"value":"* Performs C-style bitfield access through a `BitSlice`.\n\nBit orderings that permit batched access to regions of memory are enabled to\nload data from, and store data to, a `BitStore` with faster behavior than the\ndefault bit-by-bit traversal.\n\nThis trait transfers data between a `BitSlice` and a local element. The trait\nfunctions always place the live bit region of the slice against the least\nsignificant bit edge of the local element (return value of `load`, argument of\n`store`).\n\nImplementations are encouraged to preserve in-memory bit ordering within a\nmemory element, so that call sites can provide a value pattern that the user can\nclearly see matches what they expect for memory ordering. These methods should\nonly move data between locations, without modifying the data itself.\n\nMethods should be called as `bits[start .. end].load_or_store()`, where the\nrange subslice selects no mor than the `M::BITS` element width being\ntransferred.\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":81807,"byte_end":82761,"line_start":78,"line_end":97,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":558},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":83810,"byte_end":83814,"line_start":129,"line_end":129,"column_start":5,"column_end":9},"name":"load","qualname":"::field::BitField::load","value":"pub fn load<M>(&Self) -> M where M: BitMemory","parent":{"krate":0,"index":557},"children":[],"decl_id":null,"docs":" Loads the bits in the `self` region into a local value.","sig":null,"attributes":[{"value":"/ Loads the bits in the `self` region into a local value.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":82784,"byte_end":82843,"line_start":99,"line_end":99,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":82845,"byte_end":82848,"line_start":100,"line_end":100,"column_start":2,"column_end":5}},{"value":"/ This can load into any of the unsigned integers which implement","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":82850,"byte_end":82917,"line_start":101,"line_end":101,"column_start":2,"column_end":69}},{"value":"/ `BitMemory`. Any further transformation must be done by the user.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":82919,"byte_end":82988,"line_start":102,"line_end":102,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":82990,"byte_end":82993,"line_start":103,"line_end":103,"column_start":2,"column_end":5}},{"value":"/ The default implementation of this function calls [`load_le`] on","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":82995,"byte_end":83063,"line_start":104,"line_end":104,"column_start":2,"column_end":70}},{"value":"/ little-endian byte-ordered CPUs, and [`load_be`] on big-endian","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":83065,"byte_end":83131,"line_start":105,"line_end":105,"column_start":2,"column_end":68}},{"value":"/ byte-ordered CPUs.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":83133,"byte_end":83155,"line_start":106,"line_end":106,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":83157,"byte_end":83160,"line_start":107,"line_end":107,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":83162,"byte_end":83178,"line_start":108,"line_end":108,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":83180,"byte_end":83183,"line_start":109,"line_end":109,"column_start":2,"column_end":5}},{"value":"/ - `&self`: A read reference to some bits in memory. This slice must be","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":83185,"byte_end":83259,"line_start":110,"line_end":110,"column_start":2,"column_end":76}},{"value":"/   trimmed to have a width no more than the `M::BITS` width of the type","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":83261,"byte_end":83335,"line_start":111,"line_end":111,"column_start":2,"column_end":76}},{"value":"/   being loaded. This can be accomplished with range indexing on a larger","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":83337,"byte_end":83413,"line_start":112,"line_end":112,"column_start":2,"column_end":78}},{"value":"/   slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":83415,"byte_end":83427,"line_start":113,"line_end":113,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":83429,"byte_end":83432,"line_start":114,"line_end":114,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":83434,"byte_end":83447,"line_start":115,"line_end":115,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":83449,"byte_end":83452,"line_start":116,"line_end":116,"column_start":2,"column_end":5}},{"value":"/ A value `M` whose least `self.len()` significant bits are filled with","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":83454,"byte_end":83527,"line_start":117,"line_end":117,"column_start":2,"column_end":75}},{"value":"/ the bits of `self`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":83529,"byte_end":83552,"line_start":118,"line_end":118,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":83554,"byte_end":83557,"line_start":119,"line_end":119,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":83559,"byte_end":83571,"line_start":120,"line_end":120,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":83573,"byte_end":83576,"line_start":121,"line_end":121,"column_start":2,"column_end":5}},{"value":"/ This method is encouraged to panic if `self` is empty, or wider than a","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":83578,"byte_end":83652,"line_start":122,"line_end":122,"column_start":2,"column_end":76}},{"value":"/ single element `M`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":83654,"byte_end":83677,"line_start":123,"line_end":123,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":83679,"byte_end":83682,"line_start":124,"line_end":124,"column_start":2,"column_end":5}},{"value":"/ [`load_be`]: #tymethod.load_be","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":83684,"byte_end":83718,"line_start":125,"line_end":125,"column_start":2,"column_end":36}},{"value":"/ [`load_le`]: #tymethod.load_le","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":83720,"byte_end":83754,"line_start":126,"line_end":126,"column_start":2,"column_end":36}},{"value":"inline(always)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":83756,"byte_end":83773,"line_start":127,"line_end":127,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":83775,"byte_end":83805,"line_start":128,"line_end":128,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":560},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":85134,"byte_end":85139,"line_start":170,"line_end":170,"column_start":5,"column_end":10},"name":"store","qualname":"::field::BitField::store","value":"pub fn store<M>(&mut Self, M) where M: BitMemory","parent":{"krate":0,"index":557},"children":[],"decl_id":null,"docs":" Stores a sequence of bits from the user into the domain of `self`.","sig":null,"attributes":[{"value":"/ Stores a sequence of bits from the user into the domain of `self`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":83985,"byte_end":84055,"line_start":138,"line_end":138,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":84057,"byte_end":84060,"line_start":139,"line_end":139,"column_start":2,"column_end":5}},{"value":"/ This can store any of the unsigned integers which implement","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":84062,"byte_end":84125,"line_start":140,"line_end":140,"column_start":2,"column_end":65}},{"value":"/ `BitMemory`. Any other types must first be transformed by the user.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":84127,"byte_end":84198,"line_start":141,"line_end":141,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":84200,"byte_end":84203,"line_start":142,"line_end":142,"column_start":2,"column_end":5}},{"value":"/ The default implementation of this function calls [`store_le`] on","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":84205,"byte_end":84274,"line_start":143,"line_end":143,"column_start":2,"column_end":71}},{"value":"/ little-endian byte-ordered CPUs, and [`store_be`] on big-endian","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":84276,"byte_end":84343,"line_start":144,"line_end":144,"column_start":2,"column_end":69}},{"value":"/ byte-ordered CPUs.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":84345,"byte_end":84367,"line_start":145,"line_end":145,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":84369,"byte_end":84372,"line_start":146,"line_end":146,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":84374,"byte_end":84390,"line_start":147,"line_end":147,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":84392,"byte_end":84395,"line_start":148,"line_end":148,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`: A write reference to some bits in memory. This slice must","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":84397,"byte_end":84473,"line_start":149,"line_end":149,"column_start":2,"column_end":78}},{"value":"/   be trimmed to have a width no more than the `M::BITS` width of the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":84475,"byte_end":84547,"line_start":150,"line_end":150,"column_start":2,"column_end":74}},{"value":"/   type being stored. This can be accomplished with range indexing on a","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":84549,"byte_end":84623,"line_start":151,"line_end":151,"column_start":2,"column_end":76}},{"value":"/   larger slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":84625,"byte_end":84644,"line_start":152,"line_end":152,"column_start":2,"column_end":21}},{"value":"/ - `value`: A value, whose `self.len()` least significant bits will be","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":84646,"byte_end":84719,"line_start":153,"line_end":153,"column_start":2,"column_end":75}},{"value":"/   stored into `self`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":84721,"byte_end":84746,"line_start":154,"line_end":154,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":84748,"byte_end":84751,"line_start":155,"line_end":155,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":84753,"byte_end":84767,"line_start":156,"line_end":156,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":84769,"byte_end":84772,"line_start":157,"line_end":157,"column_start":2,"column_end":5}},{"value":"/ The `self.len()` least significant bits of `value` are written into the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":84774,"byte_end":84849,"line_start":158,"line_end":158,"column_start":2,"column_end":77}},{"value":"/ domain of `self`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":84851,"byte_end":84872,"line_start":159,"line_end":159,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":84874,"byte_end":84877,"line_start":160,"line_end":160,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":84879,"byte_end":84891,"line_start":161,"line_end":161,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":84893,"byte_end":84896,"line_start":162,"line_end":162,"column_start":2,"column_end":5}},{"value":"/ This method is encouraged to panic if `self` is empty, or wider than a","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":84898,"byte_end":84972,"line_start":163,"line_end":163,"column_start":2,"column_end":76}},{"value":"/ single element `M`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":84974,"byte_end":84997,"line_start":164,"line_end":164,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":84999,"byte_end":85002,"line_start":165,"line_end":165,"column_start":2,"column_end":5}},{"value":"/ [`store_be`]: #tymethod.store_be","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":85004,"byte_end":85040,"line_start":166,"line_end":166,"column_start":2,"column_end":38}},{"value":"/ [`store_le`]: #tymethod.store_le","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":85042,"byte_end":85078,"line_start":167,"line_end":167,"column_start":2,"column_end":38}},{"value":"inline(always)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":85080,"byte_end":85097,"line_start":168,"line_end":168,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":85099,"byte_end":85129,"line_start":169,"line_end":169,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":562},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":86438,"byte_end":86445,"line_start":205,"line_end":205,"column_start":5,"column_end":12},"name":"load_le","qualname":"::field::BitField::load_le","value":"pub fn load_le<M>(&Self) -> M where M: BitMemory","parent":{"krate":0,"index":557},"children":[],"decl_id":null,"docs":" Loads from `self`, using little-endian element `T` ordering.","sig":null,"attributes":[{"value":"/ Loads from `self`, using little-endian element `T` ordering.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":85307,"byte_end":85371,"line_start":179,"line_end":179,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":85373,"byte_end":85376,"line_start":180,"line_end":180,"column_start":2,"column_end":5}},{"value":"/ This function interprets a multi-element slice as having its least","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":85378,"byte_end":85448,"line_start":181,"line_end":181,"column_start":2,"column_end":72}},{"value":"/ significant chunk in the low memory address, and its most significant","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":85450,"byte_end":85523,"line_start":182,"line_end":182,"column_start":2,"column_end":75}},{"value":"/ chunk in the high memory address. Each element `T` is still interpreted","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":85525,"byte_end":85600,"line_start":183,"line_end":183,"column_start":2,"column_end":77}},{"value":"/ from individual bytes according to the local CPU ordering.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":85602,"byte_end":85664,"line_start":184,"line_end":184,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":85666,"byte_end":85669,"line_start":185,"line_end":185,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":85671,"byte_end":85687,"line_start":186,"line_end":186,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":85689,"byte_end":85692,"line_start":187,"line_end":187,"column_start":2,"column_end":5}},{"value":"/ - `&self`: A read reference to some bits in memory. This slice must be","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":85694,"byte_end":85768,"line_start":188,"line_end":188,"column_start":2,"column_end":76}},{"value":"/   trimmed to have a width no more than the `M::BITS` width of the type","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":85770,"byte_end":85844,"line_start":189,"line_end":189,"column_start":2,"column_end":76}},{"value":"/   being loaded. This can be accomplished with range indexing on a larger","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":85846,"byte_end":85922,"line_start":190,"line_end":190,"column_start":2,"column_end":78}},{"value":"/   slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":85924,"byte_end":85936,"line_start":191,"line_end":191,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":85938,"byte_end":85941,"line_start":192,"line_end":192,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":85943,"byte_end":85956,"line_start":193,"line_end":193,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":85958,"byte_end":85961,"line_start":194,"line_end":194,"column_start":2,"column_end":5}},{"value":"/ A value `M` whose least `self.len()` significant bits are filled with","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":85963,"byte_end":86036,"line_start":195,"line_end":195,"column_start":2,"column_end":75}},{"value":"/ the bits of `self`. If `self` spans multiple elements `T`, then the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":86038,"byte_end":86109,"line_start":196,"line_end":196,"column_start":2,"column_end":73}},{"value":"/ lowest-address `T` is interpreted as containing the least significant","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":86111,"byte_end":86184,"line_start":197,"line_end":197,"column_start":2,"column_end":75}},{"value":"/ bits of the return value `M`, and the highest-address `T` is interpreted","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":86186,"byte_end":86262,"line_start":198,"line_end":198,"column_start":2,"column_end":78}},{"value":"/ as containing its most significant bits.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":86264,"byte_end":86308,"line_start":199,"line_end":199,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":86310,"byte_end":86313,"line_start":200,"line_end":200,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":86315,"byte_end":86327,"line_start":201,"line_end":201,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":86329,"byte_end":86332,"line_start":202,"line_end":202,"column_start":2,"column_end":5}},{"value":"/ This method is encouraged to panic if `self` is empty, or wider than a","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":86334,"byte_end":86408,"line_start":203,"line_end":203,"column_start":2,"column_end":76}},{"value":"/ single element `M`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":86410,"byte_end":86433,"line_start":204,"line_end":204,"column_start":2,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":564},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":87612,"byte_end":87619,"line_start":234,"line_end":234,"column_start":5,"column_end":12},"name":"load_be","qualname":"::field::BitField::load_be","value":"pub fn load_be<M>(&Self) -> M where M: BitMemory","parent":{"krate":0,"index":557},"children":[],"decl_id":null,"docs":" Loads from `self`, using big-endian element `T` ordering.","sig":null,"attributes":[{"value":"/ Loads from `self`, using big-endian element `T` ordering.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":86484,"byte_end":86545,"line_start":208,"line_end":208,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":86547,"byte_end":86550,"line_start":209,"line_end":209,"column_start":2,"column_end":5}},{"value":"/ This function interprets a multi-element slice as having its most","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":86552,"byte_end":86621,"line_start":210,"line_end":210,"column_start":2,"column_end":71}},{"value":"/ significant chunk in the low memory address, and its least significant","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":86623,"byte_end":86697,"line_start":211,"line_end":211,"column_start":2,"column_end":76}},{"value":"/ chunk in the high memory address. Each element `T` is still interpreted","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":86699,"byte_end":86774,"line_start":212,"line_end":212,"column_start":2,"column_end":77}},{"value":"/ from individual bytes according to the local CPU ordering.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":86776,"byte_end":86838,"line_start":213,"line_end":213,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":86840,"byte_end":86843,"line_start":214,"line_end":214,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":86845,"byte_end":86861,"line_start":215,"line_end":215,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":86863,"byte_end":86866,"line_start":216,"line_end":216,"column_start":2,"column_end":5}},{"value":"/ - `&self`: A read reference to some bits in memory. This slice must be","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":86868,"byte_end":86942,"line_start":217,"line_end":217,"column_start":2,"column_end":76}},{"value":"/   trimmed to have a width no more than the `M::BITS` width of the type","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":86944,"byte_end":87018,"line_start":218,"line_end":218,"column_start":2,"column_end":76}},{"value":"/   being loaded. This can be accomplished with range indexing on a larger","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":87020,"byte_end":87096,"line_start":219,"line_end":219,"column_start":2,"column_end":78}},{"value":"/   slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":87098,"byte_end":87110,"line_start":220,"line_end":220,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":87112,"byte_end":87115,"line_start":221,"line_end":221,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":87117,"byte_end":87130,"line_start":222,"line_end":222,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":87132,"byte_end":87135,"line_start":223,"line_end":223,"column_start":2,"column_end":5}},{"value":"/ A value `M` whose least `self.len()` significant bits are filled with","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":87137,"byte_end":87210,"line_start":224,"line_end":224,"column_start":2,"column_end":75}},{"value":"/ the bits of `self`. If `self` spans multiple elements `T`, then the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":87212,"byte_end":87283,"line_start":225,"line_end":225,"column_start":2,"column_end":73}},{"value":"/ lowest-address `T` is interpreted as containing the most significant","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":87285,"byte_end":87357,"line_start":226,"line_end":226,"column_start":2,"column_end":74}},{"value":"/ bits of the return value `M`, and the highest-address `T` is interpreted","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":87359,"byte_end":87435,"line_start":227,"line_end":227,"column_start":2,"column_end":78}},{"value":"/ as containing its least significant bits.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":87437,"byte_end":87482,"line_start":228,"line_end":228,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":87484,"byte_end":87487,"line_start":229,"line_end":229,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":87489,"byte_end":87501,"line_start":230,"line_end":230,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":87503,"byte_end":87506,"line_start":231,"line_end":231,"column_start":2,"column_end":5}},{"value":"/ This method is encouraged to panic if `self` is empty, or wider than a","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":87508,"byte_end":87582,"line_start":232,"line_end":232,"column_start":2,"column_end":76}},{"value":"/ single element `M`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":87584,"byte_end":87607,"line_start":233,"line_end":233,"column_start":2,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":566},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":88894,"byte_end":88902,"line_start":265,"line_end":265,"column_start":5,"column_end":13},"name":"store_le","qualname":"::field::BitField::store_le","value":"pub fn store_le<M>(&mut Self, M) where M: BitMemory","parent":{"krate":0,"index":557},"children":[],"decl_id":null,"docs":" Stores into `self`, using little-endian element ordering.","sig":null,"attributes":[{"value":"/ Stores into `self`, using little-endian element ordering.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":87658,"byte_end":87719,"line_start":237,"line_end":237,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":87721,"byte_end":87724,"line_start":238,"line_end":238,"column_start":2,"column_end":5}},{"value":"/ This function interprets a multi-element slice as having its least","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":87726,"byte_end":87796,"line_start":239,"line_end":239,"column_start":2,"column_end":72}},{"value":"/ significant chunk in the low memory address, and its most significant","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":87798,"byte_end":87871,"line_start":240,"line_end":240,"column_start":2,"column_end":75}},{"value":"/ chunk in the high memory address. Each element `T` is still interpreted","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":87873,"byte_end":87948,"line_start":241,"line_end":241,"column_start":2,"column_end":77}},{"value":"/ from individual bytes according to the local CPU ordering.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":87950,"byte_end":88012,"line_start":242,"line_end":242,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":88014,"byte_end":88017,"line_start":243,"line_end":243,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":88019,"byte_end":88035,"line_start":244,"line_end":244,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":88037,"byte_end":88040,"line_start":245,"line_end":245,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`: A write reference to some bits in memory. This slice must","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":88042,"byte_end":88118,"line_start":246,"line_end":246,"column_start":2,"column_end":78}},{"value":"/   be trimmed to have a width no more than the `M::BITS` width of the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":88120,"byte_end":88192,"line_start":247,"line_end":247,"column_start":2,"column_end":74}},{"value":"/   type being stored. This can be accomplished with range indexing on a","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":88194,"byte_end":88268,"line_start":248,"line_end":248,"column_start":2,"column_end":76}},{"value":"/   larger slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":88270,"byte_end":88289,"line_start":249,"line_end":249,"column_start":2,"column_end":21}},{"value":"/ - `value`: A value, whose `self.len()` least significant bits will be","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":88291,"byte_end":88364,"line_start":250,"line_end":250,"column_start":2,"column_end":75}},{"value":"/   stored into `self`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":88366,"byte_end":88391,"line_start":251,"line_end":251,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":88393,"byte_end":88396,"line_start":252,"line_end":252,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":88398,"byte_end":88412,"line_start":253,"line_end":253,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":88414,"byte_end":88417,"line_start":254,"line_end":254,"column_start":2,"column_end":5}},{"value":"/ The `self.len()` least significant bits of `value` are written into the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":88419,"byte_end":88494,"line_start":255,"line_end":255,"column_start":2,"column_end":77}},{"value":"/ domain of `self`. If `self` spans multiple elements `T`, then the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":88496,"byte_end":88565,"line_start":256,"line_end":256,"column_start":2,"column_end":71}},{"value":"/ lowest-address `T` is interpreted as containing the least significant","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":88567,"byte_end":88640,"line_start":257,"line_end":257,"column_start":2,"column_end":75}},{"value":"/ bits of the `M` return value, and the highest-address `T` is interpreted","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":88642,"byte_end":88718,"line_start":258,"line_end":258,"column_start":2,"column_end":78}},{"value":"/ as containing its most significant bits.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":88720,"byte_end":88764,"line_start":259,"line_end":259,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":88766,"byte_end":88769,"line_start":260,"line_end":260,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":88771,"byte_end":88783,"line_start":261,"line_end":261,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":88785,"byte_end":88788,"line_start":262,"line_end":262,"column_start":2,"column_end":5}},{"value":"/ This method is encouraged to panic if `self` is empty, or wider than a","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":88790,"byte_end":88864,"line_start":263,"line_end":263,"column_start":2,"column_end":76}},{"value":"/ single element `M`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":88866,"byte_end":88889,"line_start":264,"line_end":264,"column_start":2,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":568},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":90183,"byte_end":90191,"line_start":296,"line_end":296,"column_start":5,"column_end":13},"name":"store_be","qualname":"::field::BitField::store_be","value":"pub fn store_be<M>(&mut Self, M) where M: BitMemory","parent":{"krate":0,"index":557},"children":[],"decl_id":null,"docs":" Stores into `self`, using big-endian element ordering.","sig":null,"attributes":[{"value":"/ Stores into `self`, using big-endian element ordering.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":88950,"byte_end":89008,"line_start":268,"line_end":268,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":89010,"byte_end":89013,"line_start":269,"line_end":269,"column_start":2,"column_end":5}},{"value":"/ This function interprets a multi-element slice as having its most","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":89015,"byte_end":89084,"line_start":270,"line_end":270,"column_start":2,"column_end":71}},{"value":"/ significant chunk in the low memory address, and its least significant","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":89086,"byte_end":89160,"line_start":271,"line_end":271,"column_start":2,"column_end":76}},{"value":"/ chunk in the high memory address. Each element `T` is still interpreted","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":89162,"byte_end":89237,"line_start":272,"line_end":272,"column_start":2,"column_end":77}},{"value":"/ from individual bytes according to the local CPU ordering.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":89239,"byte_end":89301,"line_start":273,"line_end":273,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":89303,"byte_end":89306,"line_start":274,"line_end":274,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":89308,"byte_end":89324,"line_start":275,"line_end":275,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":89326,"byte_end":89329,"line_start":276,"line_end":276,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`: A write reference to some bits in memory. This slice must","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":89331,"byte_end":89407,"line_start":277,"line_end":277,"column_start":2,"column_end":78}},{"value":"/   be trimmed to have a width no more than the `M::BITS` width of the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":89409,"byte_end":89481,"line_start":278,"line_end":278,"column_start":2,"column_end":74}},{"value":"/   type being stored. This can be accomplished with range indexing on a","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":89483,"byte_end":89557,"line_start":279,"line_end":279,"column_start":2,"column_end":76}},{"value":"/   larger slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":89559,"byte_end":89578,"line_start":280,"line_end":280,"column_start":2,"column_end":21}},{"value":"/ - `value`: A value, whose `self.len()` least significant bits will be","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":89580,"byte_end":89653,"line_start":281,"line_end":281,"column_start":2,"column_end":75}},{"value":"/   stored into `self`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":89655,"byte_end":89680,"line_start":282,"line_end":282,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":89682,"byte_end":89685,"line_start":283,"line_end":283,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":89687,"byte_end":89701,"line_start":284,"line_end":284,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":89703,"byte_end":89706,"line_start":285,"line_end":285,"column_start":2,"column_end":5}},{"value":"/ The `self.len()` least significant bits of `value` are written into the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":89708,"byte_end":89783,"line_start":286,"line_end":286,"column_start":2,"column_end":77}},{"value":"/ domain of `self`. If `self` spans multiple elements `T`, then the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":89785,"byte_end":89854,"line_start":287,"line_end":287,"column_start":2,"column_end":71}},{"value":"/ lowest-address `T` is interpreted as containing the most significant","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":89856,"byte_end":89928,"line_start":288,"line_end":288,"column_start":2,"column_end":74}},{"value":"/ bits of the `M` return value, and the highest-address `T` is interpreted","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":89930,"byte_end":90006,"line_start":289,"line_end":289,"column_start":2,"column_end":78}},{"value":"/ as containing its least significant bits.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":90008,"byte_end":90053,"line_start":290,"line_end":290,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":90055,"byte_end":90058,"line_start":291,"line_end":291,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":90060,"byte_end":90072,"line_start":292,"line_end":292,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":90074,"byte_end":90077,"line_start":293,"line_end":293,"column_start":2,"column_end":5}},{"value":"/ This method is encouraged to panic if `self` is empty, or wider than a","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":90079,"byte_end":90153,"line_start":294,"line_end":294,"column_start":2,"column_end":76}},{"value":"/ single element `M`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":90155,"byte_end":90178,"line_start":295,"line_end":295,"column_start":2,"column_end":25}}]},{"kind":"Mod","id":{"krate":0,"index":686},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"index","qualname":"::index","value":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","parent":null,"children":[{"krate":0,"index":687},{"krate":0,"index":688},{"krate":0,"index":691},{"krate":0,"index":694},{"krate":0,"index":697},{"krate":0,"index":698},{"krate":0,"index":701},{"krate":0,"index":702},{"krate":0,"index":705},{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":711},{"krate":0,"index":714},{"krate":0,"index":717},{"krate":0,"index":718},{"krate":0,"index":721},{"krate":0,"index":724},{"krate":0,"index":725},{"krate":0,"index":727},{"krate":0,"index":728},{"krate":0,"index":731},{"krate":0,"index":734},{"krate":0,"index":737},{"krate":0,"index":740},{"krate":0,"index":741},{"krate":0,"index":742},{"krate":0,"index":3794},{"krate":0,"index":3795},{"krate":0,"index":3796},{"krate":0,"index":743},{"krate":0,"index":3797},{"krate":0,"index":3798},{"krate":0,"index":3802},{"krate":0,"index":3805},{"krate":0,"index":3807},{"krate":0,"index":3810},{"krate":0,"index":3812},{"krate":0,"index":3815},{"krate":0,"index":3819},{"krate":0,"index":3822},{"krate":0,"index":3824},{"krate":0,"index":3828},{"krate":0,"index":744},{"krate":0,"index":767},{"krate":0,"index":770},{"krate":0,"index":773},{"krate":0,"index":3831},{"krate":0,"index":3835},{"krate":0,"index":3838},{"krate":0,"index":3840},{"krate":0,"index":3843},{"krate":0,"index":3845},{"krate":0,"index":3848},{"krate":0,"index":3852},{"krate":0,"index":3855},{"krate":0,"index":3857},{"krate":0,"index":3861},{"krate":0,"index":776},{"krate":0,"index":783},{"krate":0,"index":786},{"krate":0,"index":3864},{"krate":0,"index":3868},{"krate":0,"index":3871},{"krate":0,"index":3873},{"krate":0,"index":3876},{"krate":0,"index":3878},{"krate":0,"index":3881},{"krate":0,"index":3885},{"krate":0,"index":3888},{"krate":0,"index":3890},{"krate":0,"index":3894},{"krate":0,"index":789},{"krate":0,"index":796},{"krate":0,"index":799},{"krate":0,"index":3897},{"krate":0,"index":3900},{"krate":0,"index":3903},{"krate":0,"index":3905},{"krate":0,"index":3908},{"krate":0,"index":3910},{"krate":0,"index":3913},{"krate":0,"index":3917},{"krate":0,"index":3920},{"krate":0,"index":3922},{"krate":0,"index":3926},{"krate":0,"index":802},{"krate":0,"index":811},{"krate":0,"index":814},{"krate":0,"index":817},{"krate":0,"index":3929},{"krate":0,"index":3932},{"krate":0,"index":3935},{"krate":0,"index":3937},{"krate":0,"index":3940},{"krate":0,"index":3942},{"krate":0,"index":3945},{"krate":0,"index":3949},{"krate":0,"index":3952},{"krate":0,"index":3954},{"krate":0,"index":3958},{"krate":0,"index":820},{"krate":0,"index":829},{"krate":0,"index":832},{"krate":0,"index":835},{"krate":0,"index":838},{"krate":0,"index":842},{"krate":0,"index":846},{"krate":0,"index":850}],"decl_id":null,"docs":" Typed metadata of registers.","sig":null,"attributes":[{"value":"* Typed metadata of registers.\n\nThis module provides types which guarantee certain properties about working with\nindividual bits of registers.\n\nThe main advantage of the types in this module is that they provide\ntype-dependent range constrictions for index values, making it impossible to\nhave an index out of bounds for a register, and creating a sequence of type\ntransformations that give assurance about the continued validity of each value\nin its surrounding context.\n\nBy eliminating public constructors from arbitrary integers, `bitvec` can\nguarantee that only it can produce seed values, and only trusted functions can\ntransform their numeric values or types, until the program reaches the property\nit requires. This chain of assurance means that operations that interact with\nmemory can be confident in the correctness of their actions and effects.\n\n# Type Sequence\n\nThe library produces `BitIdx` values from region computation. These types cannot\nbe publicly constructed, and are only ever the result of pointer analysis. As\nsuch, they rely on correctness of the memory regions provided to library entry\npoints, and those entry points can leverage the Rust type system to ensure\nsafety there.\n\n`BitIdx` is transformed to `BitPos` through the `BitOrder` trait, which has an\nassociated verification function to prove that implementations are correct.\n`BitPos` is the only type that can describe memory operations, and is used to\ncreate selection masks of `BitSel` and `BitMask`.\n!*/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":110432,"byte_end":111922,"line_start":1,"line_end":30,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":741},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":112678,"byte_end":112689,"line_start":92,"line_end":92,"column_start":11,"column_end":22},"name":"BitRegister","qualname":"::index::BitRegister","value":"BitRegister: BitMemory + BitOps + BitStore","parent":null,"children":[],"decl_id":null,"docs":" Marks that an integer can be used in a processor register.\n","sig":null,"attributes":[{"value":"/ Marks that an integer can be used in a processor register.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":112605,"byte_end":112667,"line_start":91,"line_end":91,"column_start":1,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":3798},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":114238,"byte_end":114244,"line_start":142,"line_end":142,"column_start":12,"column_end":18},"name":"BitIdx","qualname":"::index::BitIdx","value":"BitIdx {  }","parent":null,"children":[{"krate":0,"index":3800},{"krate":0,"index":3801}],"decl_id":null,"docs":" A semantic index of a single bit within a register `R`.","sig":null,"attributes":[{"value":"* A semantic index of a single bit within a register `R`.\n\nThis type is a counter in the range `0 .. R::BITS`, and marks the semantic\nposition of a bit according to some [`BitOrder`] implementation. As an abstract\ncounter, it can be used in arithmetic without having to go through `BitOrder`\ntranslation to an electrical position.\n\n# Type Parameters\n\n- `R`: The register type that these values govern.\n\n# Validity\n\nValues of this type are required to be in the range `0 .. R::BITS`. Any value\noutside this range will cause the program state to become invalid, and the\nlibrary’s behavior is unspecified. The library will never produce such an\ninvalid value.\n\n# Construction\n\nThis type cannot be constructed outside the `bitvec` crate. `bitvec` will\nconstruct safe values of this type, and allows users to view them and use them\nto construct other index types from them. All values of this type constructed by\n`bitvec` are known to be correct based on user input to the crate.\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":113102,"byte_end":114084,"line_start":114,"line_end":138,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":114136,"byte_end":114156,"line_start":140,"line_end":140,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":749},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":115538,"byte_end":115551,"line_start":195,"line_end":195,"column_start":16,"column_end":29},"name":"new_unchecked","qualname":"<BitIdx<R>>::new_unchecked","value":"pub unsafe fn new_unchecked(u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps a counter value as an assumed-good index into an `R` register.","sig":null,"attributes":[{"value":"/ Wraps a counter value as an assumed-good index into an `R` register.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":115084,"byte_end":115156,"line_start":178,"line_end":178,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":115158,"byte_end":115161,"line_start":179,"line_end":179,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":115163,"byte_end":115179,"line_start":180,"line_end":180,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":115181,"byte_end":115184,"line_start":181,"line_end":181,"column_start":2,"column_end":5}},{"value":"/ - `idx`: A semantic index of a bit within an `R` register.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":115186,"byte_end":115248,"line_start":182,"line_end":182,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":115250,"byte_end":115253,"line_start":183,"line_end":183,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":115255,"byte_end":115268,"line_start":184,"line_end":184,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":115270,"byte_end":115273,"line_start":185,"line_end":185,"column_start":2,"column_end":5}},{"value":"/ `idx` wrapped in a `BitIdx`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":115275,"byte_end":115307,"line_start":186,"line_end":186,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":115309,"byte_end":115312,"line_start":187,"line_end":187,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":115314,"byte_end":115326,"line_start":188,"line_end":188,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":115328,"byte_end":115331,"line_start":189,"line_end":189,"column_start":2,"column_end":5}},{"value":"/ `idx` **must** be within the valid range `0 .. R::BITS`. In debug","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":115333,"byte_end":115402,"line_start":190,"line_end":190,"column_start":2,"column_end":71}},{"value":"/ builds, invalid `idx` values cause a panic; release builds do not check","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":115404,"byte_end":115479,"line_start":191,"line_end":191,"column_start":2,"column_end":77}},{"value":"/ the input.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":115481,"byte_end":115495,"line_start":192,"line_end":192,"column_start":2,"column_end":16}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":115497,"byte_end":115506,"line_start":193,"line_end":193,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":752},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":116755,"byte_end":116763,"line_start":242,"line_end":242,"column_start":9,"column_end":17},"name":"position","qualname":"<BitIdx<R>>::position","value":"pub fn position<O>(Self) -> BitPos<R> where O: BitOrder","parent":null,"children":[],"decl_id":null,"docs":" Computes the bit position corresponding to `self` under some ordering.","sig":null,"attributes":[{"value":"/ Computes the bit position corresponding to `self` under some ordering.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":116541,"byte_end":116615,"line_start":237,"line_end":237,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":116617,"byte_end":116620,"line_start":238,"line_end":238,"column_start":2,"column_end":5}},{"value":"/ This forwards to `O::at::<R>`, and is the only public, safe, constructor","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":116622,"byte_end":116698,"line_start":239,"line_end":239,"column_start":2,"column_end":78}},{"value":"/ for a position counter.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":116700,"byte_end":116727,"line_start":240,"line_end":240,"column_start":2,"column_end":29}},{"value":"inline(always)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":116729,"byte_end":116746,"line_start":241,"line_end":241,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":754},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":117043,"byte_end":117049,"line_start":252,"line_end":252,"column_start":9,"column_end":15},"name":"select","qualname":"<BitIdx<R>>::select","value":"pub fn select<O>(Self) -> BitSel<R> where O: BitOrder","parent":null,"children":[],"decl_id":null,"docs":" Computes the bit selector corresponding to `self` under an ordering.","sig":null,"attributes":[{"value":"/ Computes the bit selector corresponding to `self` under an ordering.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":116831,"byte_end":116903,"line_start":247,"line_end":247,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":116905,"byte_end":116908,"line_start":248,"line_end":248,"column_start":2,"column_end":5}},{"value":"/ This forwards to `O::select::<R>`, and is the only public, safe,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":116910,"byte_end":116978,"line_start":249,"line_end":249,"column_start":2,"column_end":70}},{"value":"/ constructor for a bit selector.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":116980,"byte_end":117015,"line_start":250,"line_end":250,"column_start":2,"column_end":37}},{"value":"inline(always)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":117017,"byte_end":117034,"line_start":251,"line_end":251,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":756},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":117327,"byte_end":117331,"line_start":262,"line_end":262,"column_start":9,"column_end":13},"name":"mask","qualname":"<BitIdx<R>>::mask","value":"pub fn mask<O>(Self) -> BitMask<R> where O: BitOrder","parent":null,"children":[],"decl_id":null,"docs":" Computes the bit selector for `self` as an accessor mask.","sig":null,"attributes":[{"value":"/ Computes the bit selector for `self` as an accessor mask.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":117121,"byte_end":117182,"line_start":257,"line_end":257,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":117184,"byte_end":117187,"line_start":258,"line_end":258,"column_start":2,"column_end":5}},{"value":"/ This is a type-cast over `Self::select`. It is one of the few public,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":117189,"byte_end":117262,"line_start":259,"line_end":259,"column_start":2,"column_end":75}},{"value":"/ safe, constructors of a multi-bit mask.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":117264,"byte_end":117307,"line_start":260,"line_end":260,"column_start":2,"column_end":45}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":117309,"byte_end":117318,"line_start":261,"line_end":261,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":758},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":117504,"byte_end":117509,"line_start":270,"line_end":270,"column_start":9,"column_end":14},"name":"value","qualname":"<BitIdx<R>>::value","value":"pub fn value(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Views the internal index value.\n","sig":null,"attributes":[{"value":"/ Views the internal index value.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":117409,"byte_end":117444,"line_start":267,"line_end":267,"column_start":2,"column_end":37}},{"value":"inline(always)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":117446,"byte_end":117463,"line_start":268,"line_end":268,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":117465,"byte_end":117495,"line_start":269,"line_end":269,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":762},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":118523,"byte_end":118528,"line_start":304,"line_end":304,"column_start":9,"column_end":14},"name":"range","qualname":"<BitIdx<R>>::range","value":"pub fn range(Self, BitTail<R>) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Constructs a range over all indices between a start and end point.","sig":null,"attributes":[{"value":"/ Constructs a range over all indices between a start and end point.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":117783,"byte_end":117853,"line_start":283,"line_end":283,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":117855,"byte_end":117858,"line_start":284,"line_end":284,"column_start":2,"column_end":5}},{"value":"/ Because implementation details of the `RangeOps` family are not yet","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":117860,"byte_end":117931,"line_start":285,"line_end":285,"column_start":2,"column_end":73}},{"value":"/ stable, and heterogenous ranges are not supported, this must be an","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":117933,"byte_end":118003,"line_start":286,"line_end":286,"column_start":2,"column_end":72}},{"value":"/ opaque iterator rather than a direct `Range<BitIdx<R>>`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":118005,"byte_end":118065,"line_start":287,"line_end":287,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":118067,"byte_end":118070,"line_start":288,"line_end":288,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":118072,"byte_end":118088,"line_start":289,"line_end":289,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":118090,"byte_end":118093,"line_start":290,"line_end":290,"column_start":2,"column_end":5}},{"value":"/ - `from`: The inclusive low bound of the range. This will be the first","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":118095,"byte_end":118169,"line_start":291,"line_end":291,"column_start":2,"column_end":76}},{"value":"/   index produced by the iterator.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":118171,"byte_end":118208,"line_start":292,"line_end":292,"column_start":2,"column_end":39}},{"value":"/ - `upto`: The exclusive high bound of the range. The iterator will halt","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":118210,"byte_end":118285,"line_start":293,"line_end":293,"column_start":2,"column_end":77}},{"value":"/   before yielding an index of this value.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":118287,"byte_end":118332,"line_start":294,"line_end":294,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":118334,"byte_end":118337,"line_start":295,"line_end":295,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":118339,"byte_end":118352,"line_start":296,"line_end":296,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":118354,"byte_end":118357,"line_start":297,"line_end":297,"column_start":2,"column_end":5}},{"value":"/ An opaque iterator that is equivalent to the range `from .. upto`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":118359,"byte_end":118429,"line_start":298,"line_end":298,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":118431,"byte_end":118434,"line_start":299,"line_end":299,"column_start":2,"column_end":5}},{"value":"/ # Requirements","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":118436,"byte_end":118454,"line_start":300,"line_end":300,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":118456,"byte_end":118459,"line_start":301,"line_end":301,"column_start":2,"column_end":5}},{"value":"/ `from` must be no greater than `upto`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":118461,"byte_end":118503,"line_start":302,"line_end":302,"column_start":2,"column_end":44}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":118505,"byte_end":118514,"line_start":303,"line_end":303,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":3831},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":125754,"byte_end":125761,"line_start":537,"line_end":537,"column_start":12,"column_end":19},"name":"BitTail","qualname":"::index::BitTail","value":"BitTail {  }","parent":null,"children":[{"krate":0,"index":3833},{"krate":0,"index":3834}],"decl_id":null,"docs":" Semantic index of a dead bit *after* a live region.","sig":null,"attributes":[{"value":"* Semantic index of a dead bit *after* a live region.\n\nLike `BitIdx<R>`, this type indicates a semantic counter within a register `R`.\nHowever, it marks the position of a *dead* bit *after* a live range. This means\nthat it is permitted to have the value of `R::BITS`, to indicate that a live\nregion touches the semantic back edge of the register `R`.\n\nInstances of this type will only contain the value `0` when the span that\ncreated them is empty. Otherwise, they will have the range `1 ..= R::BITS`.\n\nThis type cannot be used for indexing into a register `R`, and does not\ntranslate to a `BitPos<R>`. It has no behavior other than viewing its internal\ncounter for region arithmetic.\n\n# Type Parameters\n\n- `R`: The register type that these values govern.\n\n# Validity\n\nValues of this type are required to be in the range `0 ..= R::BITS`. Any value\noutside this range will cause the program state to become invalid, and the\nlibrary’s behavior is unspecified. The library will never produce such an\ninvalid value.\n\n# Construction\n\nThis type cannot be directly constructed outside the `bitvec` crate. `bitvec`\nwill construct safe values of this type, and allows users to view them and use\nthem for region computation. All values of this type constructed by `bitvec` are\nknown to be correct based on user input to the crate.\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":124268,"byte_end":125596,"line_start":502,"line_end":533,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":125652,"byte_end":125672,"line_start":535,"line_end":535,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":781},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":126834,"byte_end":126839,"line_start":583,"line_end":583,"column_start":9,"column_end":14},"name":"value","qualname":"<BitTail<R>>::value","value":"pub fn value(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Views the internal tail value.\n","sig":null,"attributes":[{"value":"/ Views the internal tail value.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":126748,"byte_end":126782,"line_start":580,"line_end":580,"column_start":2,"column_end":36}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":126784,"byte_end":126793,"line_start":581,"line_end":581,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":126795,"byte_end":126825,"line_start":582,"line_end":582,"column_start":2,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":3864},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":130337,"byte_end":130343,"line_start":699,"line_end":699,"column_start":12,"column_end":18},"name":"BitPos","qualname":"::index::BitPos","value":"BitPos {  }","parent":null,"children":[{"krate":0,"index":3866},{"krate":0,"index":3867}],"decl_id":null,"docs":" An electrical position of a single bit within a register `R`.","sig":null,"attributes":[{"value":"* An electrical position of a single bit within a register `R`.\n\nThis type is used as the shift distance in the expression `1 << shamt`. It is\nonly produced by the translation of a semantic `BitIdx<R>` according to some\n[`BitOrder`] implementation using `BitOrder::at`. It can only be used for the\nconstruction of bit masks used to manipulate a register value during memory\naccess, and serves no other purpose.\n\n# Type Parameters\n\n- `R`: The register type that these values govern.\n\n# Validity\n\nValues of this type are required to be in the range `0 .. R::BITS`. Any value\noutside this range will cause the program state to become invalid, and the\nlibrary’s behavior is unspecified. The library will never produce such an\ninvalid value, and users are required to do the same.\n\n# Construction\n\nThis type offers public unsafe constructors. `bitvec` does not offer any public\nAPIs that take values of this type directly; it always routes through `BitOrder`\nimplementations. As `BitIdx` will only be constructed from safe, correct,\nvalues, and `BitOrder::at` is the only `BitIdx -> BitPos` transform function,\nall constructed `BitPos` values are known to be memory-correct.\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":129006,"byte_end":130183,"line_start":669,"line_end":695,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":130235,"byte_end":130255,"line_start":697,"line_end":697,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":791},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":131057,"byte_end":131060,"line_start":727,"line_end":727,"column_start":16,"column_end":19},"name":"new","qualname":"<BitPos<R>>::new","value":"pub unsafe fn new(u8) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Wraps a value as a known-good position within an `R` register.","sig":null,"attributes":[{"value":"/ Wraps a value as a known-good position within an `R` register.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":130559,"byte_end":130625,"line_start":711,"line_end":711,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":130627,"byte_end":130630,"line_start":712,"line_end":712,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":130632,"byte_end":130648,"line_start":713,"line_end":713,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":130650,"byte_end":130653,"line_start":714,"line_end":714,"column_start":2,"column_end":5}},{"value":"/ - `pos`: An electrical position of a bit within an `R` register.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":130655,"byte_end":130723,"line_start":715,"line_end":715,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":130725,"byte_end":130728,"line_start":716,"line_end":716,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":130730,"byte_end":130743,"line_start":717,"line_end":717,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":130745,"byte_end":130748,"line_start":718,"line_end":718,"column_start":2,"column_end":5}},{"value":"/ If `pos` is outside the valid range `0 .. R::BITS`, this returns `None`;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":130750,"byte_end":130826,"line_start":719,"line_end":719,"column_start":2,"column_end":78}},{"value":"/ otherwise, it returns a `BitPos` wrapping the `pos` value.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":130828,"byte_end":130890,"line_start":720,"line_end":720,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":130892,"byte_end":130895,"line_start":721,"line_end":721,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":130897,"byte_end":130909,"line_start":722,"line_end":722,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":130911,"byte_end":130914,"line_start":723,"line_end":723,"column_start":2,"column_end":5}},{"value":"/ This function must only be called within a `BitOrder::at` implementation","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":130916,"byte_end":130992,"line_start":724,"line_end":724,"column_start":2,"column_end":78}},{"value":"/ which is verified to be correct.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":130994,"byte_end":131030,"line_start":725,"line_end":725,"column_start":2,"column_end":38}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":131032,"byte_end":131041,"line_start":726,"line_end":726,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":792},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":131758,"byte_end":131771,"line_start":754,"line_end":754,"column_start":16,"column_end":29},"name":"new_unchecked","qualname":"<BitPos<R>>::new_unchecked","value":"pub unsafe fn new_unchecked(u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps a value as an assumed-good position within an `R` register.","sig":null,"attributes":[{"value":"/ Wraps a value as an assumed-good position within an `R` register.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":131233,"byte_end":131302,"line_start":735,"line_end":735,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":131304,"byte_end":131307,"line_start":736,"line_end":736,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":131309,"byte_end":131325,"line_start":737,"line_end":737,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":131327,"byte_end":131330,"line_start":738,"line_end":738,"column_start":2,"column_end":5}},{"value":"/ - `pos`: An electrical position within an `R` register.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":131332,"byte_end":131391,"line_start":739,"line_end":739,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":131393,"byte_end":131396,"line_start":740,"line_end":740,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":131398,"byte_end":131411,"line_start":741,"line_end":741,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":131413,"byte_end":131416,"line_start":742,"line_end":742,"column_start":2,"column_end":5}},{"value":"/ `pos` wrapped in a `BitPos`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":131418,"byte_end":131450,"line_start":743,"line_end":743,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":131452,"byte_end":131455,"line_start":744,"line_end":744,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":131457,"byte_end":131469,"line_start":745,"line_end":745,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":131471,"byte_end":131474,"line_start":746,"line_end":746,"column_start":2,"column_end":5}},{"value":"/ `pos` **must** be within the valid range `0 .. R::BITS`. In debug","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":131476,"byte_end":131545,"line_start":747,"line_end":747,"column_start":2,"column_end":71}},{"value":"/ builds, invalid `pos` values cause a panic; release builds do not check","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":131547,"byte_end":131622,"line_start":748,"line_end":748,"column_start":2,"column_end":77}},{"value":"/ the input.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":131624,"byte_end":131638,"line_start":749,"line_end":749,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":131640,"byte_end":131643,"line_start":750,"line_end":750,"column_start":2,"column_end":5}},{"value":"/ This function must only be called in a correct `BitOrder::at`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":131645,"byte_end":131710,"line_start":751,"line_end":751,"column_start":2,"column_end":67}},{"value":"/ implementation.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":131712,"byte_end":131731,"line_start":752,"line_end":752,"column_start":2,"column_end":21}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":131733,"byte_end":131742,"line_start":753,"line_end":753,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":793},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":132185,"byte_end":132191,"line_start":776,"line_end":776,"column_start":9,"column_end":15},"name":"select","qualname":"<BitPos<R>>::select","value":"pub fn select(Self) -> BitSel<R>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a one-hot selection mask from the position counter.","sig":null,"attributes":[{"value":"/ Constructs a one-hot selection mask from the position counter.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":131922,"byte_end":131988,"line_start":764,"line_end":764,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":131990,"byte_end":131993,"line_start":765,"line_end":765,"column_start":2,"column_end":5}},{"value":"/ This is a well-typed `1 << pos`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":131995,"byte_end":132031,"line_start":766,"line_end":766,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":132033,"byte_end":132036,"line_start":767,"line_end":767,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":132038,"byte_end":132054,"line_start":768,"line_end":768,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":132056,"byte_end":132059,"line_start":769,"line_end":769,"column_start":2,"column_end":5}},{"value":"/ - `self`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":132061,"byte_end":132073,"line_start":770,"line_end":770,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":132075,"byte_end":132078,"line_start":771,"line_end":771,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":132080,"byte_end":132093,"line_start":772,"line_end":772,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":132095,"byte_end":132098,"line_start":773,"line_end":773,"column_start":2,"column_end":5}},{"value":"/ A one-hot mask for `R` selecting the bit specified by `self`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":132100,"byte_end":132165,"line_start":774,"line_end":774,"column_start":2,"column_end":67}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":132167,"byte_end":132176,"line_start":775,"line_end":775,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":794},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":132533,"byte_end":132537,"line_start":792,"line_end":792,"column_start":9,"column_end":13},"name":"mask","qualname":"<BitPos<R>>::mask","value":"pub fn mask(Self) -> BitMask<R>","parent":null,"children":[],"decl_id":null,"docs":" Constructs an untyped bitmask from the position counter.","sig":null,"attributes":[{"value":"/ Constructs an untyped bitmask from the position counter.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":132250,"byte_end":132310,"line_start":780,"line_end":780,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":132312,"byte_end":132315,"line_start":781,"line_end":781,"column_start":2,"column_end":5}},{"value":"/ This removes the one-hot requirement from the selection mask.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":132317,"byte_end":132382,"line_start":782,"line_end":782,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":132384,"byte_end":132387,"line_start":783,"line_end":783,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":132389,"byte_end":132405,"line_start":784,"line_end":784,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":132407,"byte_end":132410,"line_start":785,"line_end":785,"column_start":2,"column_end":5}},{"value":"/ - `self`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":132412,"byte_end":132424,"line_start":786,"line_end":786,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":132426,"byte_end":132429,"line_start":787,"line_end":787,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":132431,"byte_end":132444,"line_start":788,"line_end":788,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":132446,"byte_end":132449,"line_start":789,"line_end":789,"column_start":2,"column_end":5}},{"value":"/ A mask for `R` selecting only the bit specified by `self`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":132451,"byte_end":132513,"line_start":790,"line_end":790,"column_start":2,"column_end":64}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":132515,"byte_end":132524,"line_start":791,"line_end":791,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":795},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":132655,"byte_end":132660,"line_start":798,"line_end":798,"column_start":9,"column_end":14},"name":"value","qualname":"<BitPos<R>>::value","value":"pub fn value(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Views the internal position value.\n","sig":null,"attributes":[{"value":"/ Views the internal position value.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":132597,"byte_end":132635,"line_start":796,"line_end":796,"column_start":2,"column_end":40}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":132637,"byte_end":132646,"line_start":797,"line_end":797,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":3897},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":134098,"byte_end":134104,"line_start":850,"line_end":850,"column_start":12,"column_end":18},"name":"BitSel","qualname":"::index::BitSel","value":"BitSel {  }","parent":null,"children":[{"krate":0,"index":3899}],"decl_id":null,"docs":" A one-hot selection mask, to be applied to a register `R`.","sig":null,"attributes":[{"value":"* A one-hot selection mask, to be applied to a register `R`.\n\nThis type selects exactly one bit, and is produced by the conversion of a\nsemantic [`BitIdx`] to a [`BitPos`] through a [`BitOrder`] implementation, and\nthen applying `1 << pos`. Values of this type are used to select only the bit\nspecified by a `BitIdx` when performing memory operations.\n\n# Type Parameters\n\n- `R`: The register type that these values govern.\n\n# Validity\n\nValues of this type are required to have exactly one bit set to `1` and all\nother bits set to `0`.\n\n# Construction\n\nThis type is only constructed from `BitPos` values, which are themselves only\nconstructed by a chain of known-good `BitIdx` values passed into known-correct\n`BitOrder` implementations. As such, `bitvec` can use `BitSel` values with full\nconfidence that they are correct in the surrounding context.\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":133140,"byte_end":133995,"line_start":825,"line_end":847,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":133996,"byte_end":134016,"line_start":848,"line_end":848,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":804},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":134714,"byte_end":134717,"line_start":876,"line_end":876,"column_start":16,"column_end":19},"name":"new","qualname":"<BitSel<R>>::new","value":"pub unsafe fn new(R) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Wraps a selector value as a known-good selection of an `R` register.","sig":null,"attributes":[{"value":"/ Wraps a selector value as a known-good selection of an `R` register.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":134217,"byte_end":134289,"line_start":860,"line_end":860,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":134291,"byte_end":134294,"line_start":861,"line_end":861,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":134296,"byte_end":134312,"line_start":862,"line_end":862,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":134314,"byte_end":134317,"line_start":863,"line_end":863,"column_start":2,"column_end":5}},{"value":"/ - `sel`: A one-hot selection mask of a bit in an `R` register.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":134319,"byte_end":134385,"line_start":864,"line_end":864,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":134387,"byte_end":134390,"line_start":865,"line_end":865,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":134392,"byte_end":134405,"line_start":866,"line_end":866,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":134407,"byte_end":134410,"line_start":867,"line_end":867,"column_start":2,"column_end":5}},{"value":"/ If `sel` does not have exactly one bit set, this returns `None`;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":134412,"byte_end":134480,"line_start":868,"line_end":868,"column_start":2,"column_end":70}},{"value":"/ otherwise, it returns a `BitSel` wrapping the `sel` value.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":134482,"byte_end":134544,"line_start":869,"line_end":869,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":134546,"byte_end":134549,"line_start":870,"line_end":870,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":134551,"byte_end":134563,"line_start":871,"line_end":871,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":134565,"byte_end":134568,"line_start":872,"line_end":872,"column_start":2,"column_end":5}},{"value":"/ This function must only be called within a `BitOrder::select`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":134570,"byte_end":134635,"line_start":873,"line_end":873,"column_start":2,"column_end":67}},{"value":"/ implementation that is verified to be correct.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":134637,"byte_end":134687,"line_start":874,"line_end":874,"column_start":2,"column_end":52}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":134689,"byte_end":134698,"line_start":875,"line_end":875,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":805},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":135371,"byte_end":135384,"line_start":902,"line_end":902,"column_start":16,"column_end":29},"name":"new_unchecked","qualname":"<BitSel<R>>::new_unchecked","value":"pub unsafe fn new_unchecked(R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps a selector value as an assumed-good selection of an `R` register.","sig":null,"attributes":[{"value":"/ Wraps a selector value as an assumed-good selection of an `R` register.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":134821,"byte_end":134896,"line_start":883,"line_end":883,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":134898,"byte_end":134901,"line_start":884,"line_end":884,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":134903,"byte_end":134919,"line_start":885,"line_end":885,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":134921,"byte_end":134924,"line_start":886,"line_end":886,"column_start":2,"column_end":5}},{"value":"/ - `sel`: A one-hot selection mask of a bit in an `R` register.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":134926,"byte_end":134992,"line_start":887,"line_end":887,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":134994,"byte_end":134997,"line_start":888,"line_end":888,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":134999,"byte_end":135012,"line_start":889,"line_end":889,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":135014,"byte_end":135017,"line_start":890,"line_end":890,"column_start":2,"column_end":5}},{"value":"/ `sel` wrapped in a `BitSel`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":135019,"byte_end":135051,"line_start":891,"line_end":891,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":135053,"byte_end":135056,"line_start":892,"line_end":892,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":135058,"byte_end":135070,"line_start":893,"line_end":893,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":135072,"byte_end":135075,"line_start":894,"line_end":894,"column_start":2,"column_end":5}},{"value":"/ `sel` **must** have exactly one bit set high and all others low. In","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":135077,"byte_end":135148,"line_start":895,"line_end":895,"column_start":2,"column_end":73}},{"value":"/ debug builds, invalid `sel` values cause a panic; release builds do not","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":135150,"byte_end":135225,"line_start":896,"line_end":896,"column_start":2,"column_end":77}},{"value":"/ check the input.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":135227,"byte_end":135247,"line_start":897,"line_end":897,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":135249,"byte_end":135252,"line_start":898,"line_end":898,"column_start":2,"column_end":5}},{"value":"/ This function must only be called in a correct `BitOrder::select`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":135254,"byte_end":135323,"line_start":899,"line_end":899,"column_start":2,"column_end":71}},{"value":"/ implementation.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":135325,"byte_end":135344,"line_start":900,"line_end":900,"column_start":2,"column_end":21}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":135346,"byte_end":135355,"line_start":901,"line_end":901,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":806},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":135662,"byte_end":135666,"line_start":916,"line_end":916,"column_start":9,"column_end":13},"name":"mask","qualname":"<BitSel<R>>::mask","value":"pub fn mask(Self) -> BitMask<R> where R: BitRegister","parent":null,"children":[],"decl_id":null,"docs":" Converts the selector into a bit mask.","sig":null,"attributes":[{"value":"/ Converts the selector into a bit mask.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":135569,"byte_end":135611,"line_start":912,"line_end":912,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":135613,"byte_end":135616,"line_start":913,"line_end":913,"column_start":2,"column_end":5}},{"value":"/ This is a type-cast.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":135618,"byte_end":135642,"line_start":914,"line_end":914,"column_start":2,"column_end":26}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":135644,"byte_end":135653,"line_start":915,"line_end":915,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":807},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":135797,"byte_end":135802,"line_start":923,"line_end":923,"column_start":9,"column_end":14},"name":"value","qualname":"<BitSel<R>>::value","value":"pub fn value(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Views the internal selector value.\n","sig":null,"attributes":[{"value":"/ Views the internal selector value.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":135739,"byte_end":135777,"line_start":921,"line_end":921,"column_start":2,"column_end":40}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":135779,"byte_end":135788,"line_start":922,"line_end":922,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":808},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":135886,"byte_end":135895,"line_start":928,"line_end":928,"column_start":9,"column_end":18},"name":"range_all","qualname":"<BitSel<R>>::range_all","value":"pub fn range_all() -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Ranges over all possible selector values.\n","sig":null,"attributes":[{"value":"/ Ranges over all possible selector values.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":135832,"byte_end":135877,"line_start":927,"line_end":927,"column_start":2,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":3929},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":137301,"byte_end":137308,"line_start":982,"line_end":982,"column_start":12,"column_end":19},"name":"BitMask","qualname":"::index::BitMask","value":"BitMask {  }","parent":null,"children":[{"krate":0,"index":3931}],"decl_id":null,"docs":" A multi-bit selection mask.","sig":null,"attributes":[{"value":"* A multi-bit selection mask.\n\nUnlike [`BitSel`], which enforces a strict one-hot mask encoding, this mask type\npermits any number of bits to be set or unset. This is used to accumulate\nselections for a batch operation on a register.\n\n# Construction\n\nIt is only constructed by accumulating `BitSel` values. The chain of custody for\nsafe construction in this module and in `order` ensures that all masks that are\napplied to register values can be trusted to not cause memory unsafety.\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":136709,"byte_end":137198,"line_start":968,"line_end":979,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":137199,"byte_end":137219,"line_start":980,"line_end":980,"column_start":1,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":822},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":137464,"byte_end":137467,"line_start":993,"line_end":993,"column_start":12,"column_end":15},"name":"ALL","qualname":"::index::BitMask::<R>::ALL","value":"Self","parent":{"krate":0,"index":820},"children":[],"decl_id":null,"docs":" A full mask.\n","sig":null,"attributes":[{"value":"/ A full mask.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":137436,"byte_end":137452,"line_start":992,"line_end":992,"column_start":2,"column_end":18}}]},{"kind":"Const","id":{"krate":0,"index":823},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":137527,"byte_end":137531,"line_start":995,"line_end":995,"column_start":12,"column_end":16},"name":"ZERO","qualname":"::index::BitMask::<R>::ZERO","value":"Self","parent":{"krate":0,"index":820},"children":[],"decl_id":null,"docs":" An empty mask.\n","sig":null,"attributes":[{"value":"/ An empty mask.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":137497,"byte_end":137515,"line_start":994,"line_end":994,"column_start":2,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":824},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":138176,"byte_end":138179,"line_start":1018,"line_end":1018,"column_start":16,"column_end":19},"name":"new","qualname":"<BitMask<R>>::new","value":"pub unsafe fn new(R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps any `R` value as a bit-mask.","sig":null,"attributes":[{"value":"/ Wraps any `R` value as a bit-mask.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":137563,"byte_end":137601,"line_start":997,"line_end":997,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":137603,"byte_end":137606,"line_start":998,"line_end":998,"column_start":2,"column_end":5}},{"value":"/ This constructor is provided to explicitly declare that an operation is","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":137608,"byte_end":137683,"line_start":999,"line_end":999,"column_start":2,"column_end":77}},{"value":"/ discarding the numeric value of an integer and reading it only as a","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":137685,"byte_end":137756,"line_start":1000,"line_end":1000,"column_start":2,"column_end":73}},{"value":"/ bit-mask.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":137758,"byte_end":137771,"line_start":1001,"line_end":1001,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":137773,"byte_end":137776,"line_start":1002,"line_end":1002,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":137778,"byte_end":137794,"line_start":1003,"line_end":1003,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":137796,"byte_end":137799,"line_start":1004,"line_end":1004,"column_start":2,"column_end":5}},{"value":"/ - `mask`: Some integer value","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":137801,"byte_end":137833,"line_start":1005,"line_end":1005,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":137835,"byte_end":137838,"line_start":1006,"line_end":1006,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":137840,"byte_end":137853,"line_start":1007,"line_end":1007,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":137855,"byte_end":137858,"line_start":1008,"line_end":1008,"column_start":2,"column_end":5}},{"value":"/ `mask` wrapped as a bit-mask, with its numeric context discarded.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":137860,"byte_end":137929,"line_start":1009,"line_end":1009,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":137931,"byte_end":137934,"line_start":1010,"line_end":1010,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":137936,"byte_end":137948,"line_start":1011,"line_end":1011,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":137950,"byte_end":137953,"line_start":1012,"line_end":1012,"column_start":2,"column_end":5}},{"value":"/ This function must only be called within a `BitOrder::mask`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":137955,"byte_end":138018,"line_start":1013,"line_end":1013,"column_start":2,"column_end":65}},{"value":"/ implementation which is verified to be correct.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":138020,"byte_end":138071,"line_start":1014,"line_end":1014,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":138073,"byte_end":138076,"line_start":1015,"line_end":1015,"column_start":2,"column_end":5}},{"value":"/ Prefer accumulating `BitSel` values using the `Sum` implementation.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":138078,"byte_end":138149,"line_start":1016,"line_end":1016,"column_start":2,"column_end":73}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":138151,"byte_end":138160,"line_start":1017,"line_end":1017,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":825},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":138484,"byte_end":138491,"line_start":1033,"line_end":1033,"column_start":9,"column_end":16},"name":"combine","qualname":"<BitMask<R>>::combine","value":"pub fn combine(Self, BitSel<R>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new mask with a selector bit activated.","sig":null,"attributes":[{"value":"/ Creates a new mask with a selector bit activated.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":138223,"byte_end":138276,"line_start":1022,"line_end":1022,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":138278,"byte_end":138281,"line_start":1023,"line_end":1023,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":138283,"byte_end":138299,"line_start":1024,"line_end":1024,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":138301,"byte_end":138304,"line_start":1025,"line_end":1025,"column_start":2,"column_end":5}},{"value":"/ - `self`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":138306,"byte_end":138318,"line_start":1026,"line_end":1026,"column_start":2,"column_end":14}},{"value":"/ - `sel`: The selector bit to activate in the new mask.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":138320,"byte_end":138378,"line_start":1027,"line_end":1027,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":138380,"byte_end":138383,"line_start":1028,"line_end":1028,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":138385,"byte_end":138398,"line_start":1029,"line_end":1029,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":138400,"byte_end":138403,"line_start":1030,"line_end":1030,"column_start":2,"column_end":5}},{"value":"/ A copy of `self`, with the selector at `sel` activated.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":138405,"byte_end":138464,"line_start":1031,"line_end":1031,"column_start":2,"column_end":61}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":138466,"byte_end":138475,"line_start":1032,"line_end":1032,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":826},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":138812,"byte_end":138818,"line_start":1049,"line_end":1049,"column_start":9,"column_end":15},"name":"insert","qualname":"<BitMask<R>>::insert","value":"pub fn insert(&mut Self, BitSel<R>)","parent":null,"children":[],"decl_id":null,"docs":" Inserts a selector into an existing mask.","sig":null,"attributes":[{"value":"/ Inserts a selector into an existing mask.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":138560,"byte_end":138605,"line_start":1038,"line_end":1038,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":138607,"byte_end":138610,"line_start":1039,"line_end":1039,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":138612,"byte_end":138628,"line_start":1040,"line_end":1040,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":138630,"byte_end":138633,"line_start":1041,"line_end":1041,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":138635,"byte_end":138652,"line_start":1042,"line_end":1042,"column_start":2,"column_end":19}},{"value":"/ - `sel`: The selector bit to insert into the mask.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":138654,"byte_end":138708,"line_start":1043,"line_end":1043,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":138710,"byte_end":138713,"line_start":1044,"line_end":1044,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":138715,"byte_end":138728,"line_start":1045,"line_end":1045,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":138730,"byte_end":138733,"line_start":1046,"line_end":1046,"column_start":2,"column_end":5}},{"value":"/ The selector’s bit in the `self` mask is activated.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":138735,"byte_end":138792,"line_start":1047,"line_end":1047,"column_start":2,"column_end":57}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":138794,"byte_end":138803,"line_start":1048,"line_end":1048,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":827},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":139123,"byte_end":139127,"line_start":1064,"line_end":1064,"column_start":9,"column_end":13},"name":"test","qualname":"<BitMask<R>>::test","value":"pub fn test(Self, BitSel<R>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether a mask contains a given selector bit.","sig":null,"attributes":[{"value":"/ Tests whether a mask contains a given selector bit.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":138877,"byte_end":138932,"line_start":1053,"line_end":1053,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":138934,"byte_end":138937,"line_start":1054,"line_end":1054,"column_start":2,"column_end":5}},{"value":"/ # Paramters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":138939,"byte_end":138954,"line_start":1055,"line_end":1055,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":138956,"byte_end":138959,"line_start":1056,"line_end":1056,"column_start":2,"column_end":5}},{"value":"/ - `self`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":138961,"byte_end":138973,"line_start":1057,"line_end":1057,"column_start":2,"column_end":14}},{"value":"/ - `sel`: The selector bit to test in the `self` mask.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":138975,"byte_end":139032,"line_start":1058,"line_end":1058,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":139034,"byte_end":139037,"line_start":1059,"line_end":1059,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":139039,"byte_end":139052,"line_start":1060,"line_end":1060,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":139054,"byte_end":139057,"line_start":1061,"line_end":1061,"column_start":2,"column_end":5}},{"value":"/ Whether `self` has set the bit at `sel`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":139059,"byte_end":139103,"line_start":1062,"line_end":1062,"column_start":2,"column_end":46}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":139105,"byte_end":139114,"line_start":1063,"line_end":1063,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":828},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":139252,"byte_end":139257,"line_start":1070,"line_end":1070,"column_start":9,"column_end":14},"name":"value","qualname":"<BitMask<R>>::value","value":"pub fn value(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Views the internal mask value.\n","sig":null,"attributes":[{"value":"/ Views the internal mask value.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":139198,"byte_end":139232,"line_start":1068,"line_end":1068,"column_start":2,"column_end":36}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":139234,"byte_end":139243,"line_start":1069,"line_end":1069,"column_start":2,"column_end":11}}]},{"kind":"Mod","id":{"krate":0,"index":854},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/mem.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mem","qualname":"::mem","value":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/mem.rs","parent":null,"children":[{"krate":0,"index":855},{"krate":0,"index":858},{"krate":0,"index":861},{"krate":0,"index":867},{"krate":0,"index":3961},{"krate":0,"index":3964},{"krate":0,"index":3965},{"krate":0,"index":3968},{"krate":0,"index":3969},{"krate":0,"index":3972},{"krate":0,"index":3973},{"krate":0,"index":3976},{"krate":0,"index":3977},{"krate":0,"index":3980},{"krate":0,"index":3981},{"krate":0,"index":3984},{"krate":0,"index":868},{"krate":0,"index":870},{"krate":0,"index":872},{"krate":0,"index":875}],"decl_id":null,"docs":" Descriptions of integer types","sig":null,"attributes":[{"value":"* Descriptions of integer types\n\nThis module describes the integer types used to hold bare data. This module\ngoverns the way the processor manipulates integer regions of memory, without\nconcern for interaction with specifics of register or bus behavior.\n!*/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/mem.rs","byte_start":142674,"byte_end":142933,"line_start":1,"line_end":6,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":861},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/mem.rs","byte_start":143340,"byte_end":143349,"line_start":21,"line_end":21,"column_start":11,"column_end":20},"name":"BitMemory","qualname":"::mem::BitMemory","value":"BitMemory: IsUnsigned + seal::Sealed","parent":null,"children":[{"krate":0,"index":862},{"krate":0,"index":863},{"krate":0,"index":864},{"krate":0,"index":865},{"krate":0,"index":866}],"decl_id":null,"docs":" Description of an integer type.","sig":null,"attributes":[{"value":"* Description of an integer type.\n\nThis trait provides information used to describe integer-typed regions of memory\nand enables other parts of the crate to adequately describe the memory bus. This\ntrait has **no** bearing on the processor instructions or registers used to\ninteract with memory.\n\nThis trait cannot be implemented outside this crate.\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/mem.rs","byte_start":142975,"byte_end":143329,"line_start":12,"line_end":20,"column_start":1,"column_end":4}}]},{"kind":"Const","id":{"krate":0,"index":862},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/mem.rs","byte_start":143636,"byte_end":143640,"line_start":29,"line_end":29,"column_start":8,"column_end":12},"name":"BITS","qualname":"::mem::BitMemory::BITS","value":"u8","parent":{"krate":0,"index":861},"children":[],"decl_id":null,"docs":" The bit width of the integer.","sig":null,"attributes":[{"value":"/ The bit width of the integer.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/mem.rs","byte_start":143380,"byte_end":143413,"line_start":22,"line_end":22,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/mem.rs","byte_start":143415,"byte_end":143418,"line_start":23,"line_end":23,"column_start":2,"column_end":5}},{"value":"/ `mem::size_of` returns the size in bytes, and bytes are always eight","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/mem.rs","byte_start":143420,"byte_end":143492,"line_start":24,"line_end":24,"column_start":2,"column_end":74}},{"value":"/ bits on architectures Rust targets.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/mem.rs","byte_start":143494,"byte_end":143533,"line_start":25,"line_end":25,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/mem.rs","byte_start":143535,"byte_end":143538,"line_start":26,"line_end":26,"column_start":2,"column_end":5}},{"value":"/ Issue #76904 will place this constant on the fundamentals directly, as a","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/mem.rs","byte_start":143540,"byte_end":143616,"line_start":27,"line_end":27,"column_start":2,"column_end":78}},{"value":"/ `u32`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/mem.rs","byte_start":143618,"byte_end":143628,"line_start":28,"line_end":28,"column_start":2,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":863},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/mem.rs","byte_start":143765,"byte_end":143769,"line_start":31,"line_end":31,"column_start":8,"column_end":12},"name":"INDX","qualname":"::mem::BitMemory::INDX","value":"u8","parent":{"krate":0,"index":861},"children":[],"decl_id":null,"docs":" The number of bits required to store an index in the range `0 .. BITS`.\n","sig":null,"attributes":[{"value":"/ The number of bits required to store an index in the range `0 .. BITS`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/mem.rs","byte_start":143682,"byte_end":143757,"line_start":30,"line_end":30,"column_start":2,"column_end":77}}]},{"kind":"Const","id":{"krate":0,"index":864},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/mem.rs","byte_start":143893,"byte_end":143897,"line_start":33,"line_end":33,"column_start":8,"column_end":12},"name":"MASK","qualname":"::mem::BitMemory::MASK","value":"u8","parent":{"krate":0,"index":861},"children":[],"decl_id":null,"docs":" A mask over all bits that can be used as an index within the element.\n","sig":null,"attributes":[{"value":"/ A mask over all bits that can be used as an index within the element.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/mem.rs","byte_start":143812,"byte_end":143885,"line_start":32,"line_end":32,"column_start":2,"column_end":75}}]},{"kind":"Const","id":{"krate":0,"index":865},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/mem.rs","byte_start":143991,"byte_end":143994,"line_start":36,"line_end":36,"column_start":8,"column_end":11},"name":"ONE","qualname":"::mem::BitMemory::ONE","value":"Self","parent":{"krate":0,"index":861},"children":[],"decl_id":null,"docs":" The value with only its least significant bit set to `1`.\n","sig":null,"attributes":[{"value":"/ The value with only its least significant bit set to `1`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/mem.rs","byte_start":143922,"byte_end":143983,"line_start":35,"line_end":35,"column_start":2,"column_end":63}}]},{"kind":"Const","id":{"krate":0,"index":866},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/mem.rs","byte_start":144057,"byte_end":144060,"line_start":38,"line_end":38,"column_start":8,"column_end":11},"name":"ALL","qualname":"::mem::BitMemory::ALL","value":"Self","parent":{"krate":0,"index":861},"children":[],"decl_id":null,"docs":" The value with all of its bits set to `1`.\n","sig":null,"attributes":[{"value":"/ The value with all of its bits set to `1`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/mem.rs","byte_start":144003,"byte_end":144049,"line_start":37,"line_end":37,"column_start":2,"column_end":48}}]},{"kind":"Function","id":{"krate":0,"index":868},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/mem.rs","byte_start":144666,"byte_end":144670,"line_start":67,"line_end":67,"column_start":14,"column_end":18},"name":"elts","qualname":"::mem::elts","value":"pub const fn elts<T>(usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes the number of elements required to store some number of bits.","sig":null,"attributes":[{"value":"* Computes the number of elements required to store some number of bits.\n\n# Parameters\n\n- `bits`: The number of bits to store in a `[T]` array.\n\n# Returns\n\nThe number of elements `T` required to store `bits`.\n\nAs this is a const function, when `bits` is a constant expression, this can be\nused to compute the size of an array type `[T; elts(bits)]`.\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/mem.rs","byte_start":144282,"byte_end":144637,"line_start":53,"line_end":65,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":876},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/mem.rs","byte_start":145923,"byte_end":145929,"line_start":117,"line_end":117,"column_start":12,"column_end":18},"name":"Sealed","qualname":"::mem::seal::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":877},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"order","qualname":"::order","value":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","parent":null,"children":[{"krate":0,"index":878},{"krate":0,"index":879},{"krate":0,"index":882},{"krate":0,"index":885},{"krate":0,"index":888},{"krate":0,"index":891},{"krate":0,"index":894},{"krate":0,"index":897},{"krate":0,"index":3985},{"krate":0,"index":3987},{"krate":0,"index":3989},{"krate":0,"index":3990},{"krate":0,"index":3992},{"krate":0,"index":3994},{"krate":0,"index":3995},{"krate":0,"index":3997},{"krate":0,"index":4000},{"krate":0,"index":4002},{"krate":0,"index":4003},{"krate":0,"index":4005},{"krate":0,"index":906},{"krate":0,"index":4007},{"krate":0,"index":4009},{"krate":0,"index":4011},{"krate":0,"index":4012},{"krate":0,"index":4014},{"krate":0,"index":4016},{"krate":0,"index":4017},{"krate":0,"index":4019},{"krate":0,"index":4022},{"krate":0,"index":4024},{"krate":0,"index":4025},{"krate":0,"index":4027},{"krate":0,"index":915},{"krate":0,"index":924}],"decl_id":null,"docs":" Ordering of bits within register elements.","sig":null,"attributes":[{"value":"* Ordering of bits within register elements.\n\n`bitvec` structures are parametric over any ordering of bits within a register.\nThe `BitOrder` trait maps a cursor position (indicated by the `BitIdx` type) to an\nelectrical position (indicated by the `BitPos` type) within that element, and\nalso defines the order of traversal over a register.\n\nThe only requirement on implementors of `BitOrder` is that the transform function\nfrom cursor (`BitIdx`) to position (`BitPos`) is *total* (every integer in the\ndomain `0 .. T::BITS` is used) and *unique* (each cursor maps to one and only\none position, and each position is mapped by one and only one cursor).\nContiguity is not required.\n\n`BitOrder` is a stateless trait, and implementors should be zero-sized types.\n!*/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":145936,"byte_end":146699,"line_start":1,"line_end":15,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":897},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":149122,"byte_end":149130,"line_start":91,"line_end":91,"column_start":18,"column_end":26},"name":"BitOrder","qualname":"::order::BitOrder","value":"BitOrder","parent":null,"children":[{"krate":0,"index":898},{"krate":0,"index":900},{"krate":0,"index":902}],"decl_id":null,"docs":" An ordering over a register.","sig":null,"attributes":[{"value":"* An ordering over a register.\n\n# Usage\n\n`bitvec` structures store and operate on semantic counts, not bit positions. The\n`BitOrder::at` function takes a semantic ordering, `BitIdx`, and produces an\nelectrical position, `BitPos`.\n\n# Safety\n\nIf your implementation violates any of the requirements on these functions, then\nthe program will become incorrect and have unspecified behavior. The best-case\nscenario is that operations relying on your implementation will crash the\nprogram; the worst-case is that memory access will silently become corrupt.\n\nYou are responsible for adhering to the requirements of these functions. In the\nfuture, a verification function may be provided for your test suite; however, it\nis not yet possible to verify your implementation at compile-time.\n\nThis is an `unsafe trait` to implement, because you are responsible for\nupholding the state requirements. The types you manipulate have `unsafe fn`\nconstructors, because they require you to maintain correct and consistent\nprocesses in order for the rest of the library to use them.\n\nThe implementations of `BitOrder` are trusted to drive safe code, and once data\nleaves a `BitOrder` implementation, it is considered safe to use as the basis\nfor interaction with memory.\n\n# Verification\n\nRust currently lacks Zig’s compile-time computation capability. This means that\n`bitvec` cannot fail a compile if it detects that a `BitOrder` implementation is\ninvalid and breaks the stated requirements. `bitvec` does offer a function,\n[`verify`], which ensures the correctness of an implementation. When Rust gains\nthe capability to run this function in generic `const` contexts, `bitvec` will\nuse it to prevent at compile-time the construction of data structures that use\nincorrect ordering implementations.\n\nThe verifier function panics when it detects invalid behavior, with an error\nmessage intended to clearly indicate the broken requirement.\n\n```rust\nuse bitvec::{\n  index::{BitIdx, BitPos, BitRegister},\n  order::{self, BitOrder},\n};\n# use bitvec::{index::*, order::Lsb0};\n\npub struct Custom;\nunsafe impl BitOrder for Custom {\n  fn at<R: BitRegister>(idx: BitIdx<R>) -> BitPos<R> {\n  // impl\n  # return Lsb0::at::<R>(idx);\n  }\n}\n\n#[test]\n#[cfg(test)]\nfn prove_custom() {\n  order::verify::<Custom>();\n}\n```\n\n[`verify`]: fn.verify.html\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":146786,"byte_end":149104,"line_start":26,"line_end":90,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":898},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":151344,"byte_end":151346,"line_start":150,"line_end":150,"column_start":5,"column_end":7},"name":"at","qualname":"::order::BitOrder::at","value":"pub fn at<R>(BitIdx<R>) -> BitPos<R> where R: BitRegister","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":" Converts a semantic bit index into an electrical bit position.","sig":null,"attributes":[{"value":"/ Converts a semantic bit index into an electrical bit position.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":149134,"byte_end":149200,"line_start":92,"line_end":92,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":149202,"byte_end":149205,"line_start":93,"line_end":93,"column_start":2,"column_end":5}},{"value":"/ This function is the basis of the trait, and must adhere to a number of","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":149207,"byte_end":149282,"line_start":94,"line_end":94,"column_start":2,"column_end":77}},{"value":"/ requirements in order for an implementation to be considered correct.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":149284,"byte_end":149357,"line_start":95,"line_end":95,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":149359,"byte_end":149362,"line_start":96,"line_end":96,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":149364,"byte_end":149380,"line_start":97,"line_end":97,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":149382,"byte_end":149385,"line_start":98,"line_end":98,"column_start":2,"column_end":5}},{"value":"/ - `index`: The semantic index of a bit within a register `R`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":149387,"byte_end":149452,"line_start":99,"line_end":99,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":149454,"byte_end":149457,"line_start":100,"line_end":100,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":149459,"byte_end":149472,"line_start":101,"line_end":101,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":149474,"byte_end":149477,"line_start":102,"line_end":102,"column_start":2,"column_end":5}},{"value":"/ The electrical position of the indexed bit within a register `R`. See","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":149479,"byte_end":149552,"line_start":103,"line_end":103,"column_start":2,"column_end":75}},{"value":"/ the `BitPos` documentation for what electrical positions are considered","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":149554,"byte_end":149629,"line_start":104,"line_end":104,"column_start":2,"column_end":77}},{"value":"/ to mean.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":149631,"byte_end":149643,"line_start":105,"line_end":105,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":149645,"byte_end":149648,"line_start":106,"line_end":106,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":149650,"byte_end":149671,"line_start":107,"line_end":107,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":149673,"byte_end":149676,"line_start":108,"line_end":108,"column_start":2,"column_end":5}},{"value":"/ - `R`: The register type which the index and position describe.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":149678,"byte_end":149745,"line_start":109,"line_end":109,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":149747,"byte_end":149750,"line_start":110,"line_end":110,"column_start":2,"column_end":5}},{"value":"/ # Requirements","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":149752,"byte_end":149770,"line_start":111,"line_end":111,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":149772,"byte_end":149775,"line_start":112,"line_end":112,"column_start":2,"column_end":5}},{"value":"/ This function must satisfy the following requirements for all possible","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":149777,"byte_end":149851,"line_start":113,"line_end":113,"column_start":2,"column_end":76}},{"value":"/ input and output values for all possible type parameters:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":149853,"byte_end":149914,"line_start":114,"line_end":114,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":149916,"byte_end":149919,"line_start":115,"line_end":115,"column_start":2,"column_end":5}},{"value":"/ ## Totality","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":149921,"byte_end":149936,"line_start":116,"line_end":116,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":149938,"byte_end":149941,"line_start":117,"line_end":117,"column_start":2,"column_end":5}},{"value":"/ This function must be able to accept every input in the `BitIdx<R>`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":149943,"byte_end":150014,"line_start":118,"line_end":118,"column_start":2,"column_end":73}},{"value":"/ value range, and produce a corresponding `BitPos<R>`. It must not abort","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":150016,"byte_end":150091,"line_start":119,"line_end":119,"column_start":2,"column_end":77}},{"value":"/ the program or return an invalid `BitPos<R>` for any input value in the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":150093,"byte_end":150168,"line_start":120,"line_end":120,"column_start":2,"column_end":77}},{"value":"/ `BitIdx<R>` range.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":150170,"byte_end":150192,"line_start":121,"line_end":121,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":150194,"byte_end":150197,"line_start":122,"line_end":122,"column_start":2,"column_end":5}},{"value":"/ ## Bijection","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":150199,"byte_end":150215,"line_start":123,"line_end":123,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":150217,"byte_end":150220,"line_start":124,"line_end":124,"column_start":2,"column_end":5}},{"value":"/ There must be an exactly one-to-one correspondence between input value","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":150222,"byte_end":150296,"line_start":125,"line_end":125,"column_start":2,"column_end":76}},{"value":"/ and output value. No input index may select from a set of more than one","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":150298,"byte_end":150373,"line_start":126,"line_end":126,"column_start":2,"column_end":77}},{"value":"/ output position, and no output position may be produced by more than one","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":150375,"byte_end":150451,"line_start":127,"line_end":127,"column_start":2,"column_end":78}},{"value":"/ input index.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":150453,"byte_end":150469,"line_start":128,"line_end":128,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":150471,"byte_end":150474,"line_start":129,"line_end":129,"column_start":2,"column_end":5}},{"value":"/ ## Purity","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":150476,"byte_end":150489,"line_start":130,"line_end":130,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":150491,"byte_end":150494,"line_start":131,"line_end":131,"column_start":2,"column_end":5}},{"value":"/ The translation from index to position must be consistent for the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":150496,"byte_end":150565,"line_start":132,"line_end":132,"column_start":2,"column_end":71}},{"value":"/ lifetime of the program. This function *may* refer to global state, but","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":150567,"byte_end":150642,"line_start":133,"line_end":133,"column_start":2,"column_end":77}},{"value":"/ that state **must** be immutable for the program lifetime, and must not","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":150644,"byte_end":150719,"line_start":134,"line_end":134,"column_start":2,"column_end":77}},{"value":"/ be used to violate the totality or bijection requirements.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":150721,"byte_end":150783,"line_start":135,"line_end":135,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":150785,"byte_end":150788,"line_start":136,"line_end":136,"column_start":2,"column_end":5}},{"value":"/ ## Output Validity","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":150790,"byte_end":150812,"line_start":137,"line_end":137,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":150814,"byte_end":150817,"line_start":138,"line_end":138,"column_start":2,"column_end":5}},{"value":"/ The produced `BitPos<R>` must be within the valid range of that type.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":150819,"byte_end":150892,"line_start":139,"line_end":139,"column_start":2,"column_end":75}},{"value":"/ Call sites of this function will not take any steps to constrain the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":150894,"byte_end":150966,"line_start":140,"line_end":140,"column_start":2,"column_end":74}},{"value":"/ output value. If you use `unsafe` code to produce an invalid","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":150968,"byte_end":151032,"line_start":141,"line_end":141,"column_start":2,"column_end":66}},{"value":"/ `BitPos<R>`, the program is permanently incorrect, and will likely","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":151034,"byte_end":151104,"line_start":142,"line_end":142,"column_start":2,"column_end":72}},{"value":"/ crash.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":151106,"byte_end":151116,"line_start":143,"line_end":143,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":151118,"byte_end":151121,"line_start":144,"line_end":144,"column_start":2,"column_end":5}},{"value":"/ # Usage","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":151123,"byte_end":151134,"line_start":145,"line_end":145,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":151136,"byte_end":151139,"line_start":146,"line_end":146,"column_start":2,"column_end":5}},{"value":"/ This function will only ever be called with input values in the valid","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":151141,"byte_end":151214,"line_start":147,"line_end":147,"column_start":2,"column_end":75}},{"value":"/ `BitIdx<R>` range. Implementors are not required to consider any values","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":151216,"byte_end":151291,"line_start":148,"line_end":148,"column_start":2,"column_end":77}},{"value":"/ outside this range in their function body.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":151293,"byte_end":151339,"line_start":149,"line_end":149,"column_start":2,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":900},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":152705,"byte_end":152711,"line_start":186,"line_end":186,"column_start":5,"column_end":11},"name":"select","qualname":"::order::BitOrder::select","value":"pub fn select<R>(BitIdx<R>) -> BitSel<R> where R: BitRegister","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":" Converts a semantic bit index into a one-hot selector mask.","sig":null,"attributes":[{"value":"/ Converts a semantic bit index into a one-hot selector mask.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":151406,"byte_end":151469,"line_start":153,"line_end":153,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":151471,"byte_end":151474,"line_start":154,"line_end":154,"column_start":2,"column_end":5}},{"value":"/ This is an optional function; a default implementation is provided for","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":151476,"byte_end":151550,"line_start":155,"line_end":155,"column_start":2,"column_end":76}},{"value":"/ you.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":151552,"byte_end":151560,"line_start":156,"line_end":156,"column_start":2,"column_end":10}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":151562,"byte_end":151565,"line_start":157,"line_end":157,"column_start":2,"column_end":5}},{"value":"/ The default implementation of this function calls `Self::at` to produce","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":151567,"byte_end":151642,"line_start":158,"line_end":158,"column_start":2,"column_end":77}},{"value":"/ an electrical position, then turns that into a selector mask by setting","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":151644,"byte_end":151719,"line_start":159,"line_end":159,"column_start":2,"column_end":77}},{"value":"/ the `n`th bit more significant than the least significant bit of the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":151721,"byte_end":151793,"line_start":160,"line_end":160,"column_start":2,"column_end":74}},{"value":"/ element. `BitOrder` implementations may choose to provide a faster mask","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":151795,"byte_end":151870,"line_start":161,"line_end":161,"column_start":2,"column_end":77}},{"value":"/ production here, but they must satisfy the requirements listed below.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":151872,"byte_end":151945,"line_start":162,"line_end":162,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":151947,"byte_end":151950,"line_start":163,"line_end":163,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":151952,"byte_end":151968,"line_start":164,"line_end":164,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":151970,"byte_end":151973,"line_start":165,"line_end":165,"column_start":2,"column_end":5}},{"value":"/ - `index`: The semantic index of a bit within a register `R`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":151975,"byte_end":152040,"line_start":166,"line_end":166,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":152042,"byte_end":152045,"line_start":167,"line_end":167,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":152047,"byte_end":152060,"line_start":168,"line_end":168,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":152062,"byte_end":152065,"line_start":169,"line_end":169,"column_start":2,"column_end":5}},{"value":"/ A one-hot selector mask for the bit indicated by the index value.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":152067,"byte_end":152136,"line_start":170,"line_end":170,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":152138,"byte_end":152141,"line_start":171,"line_end":171,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":152143,"byte_end":152164,"line_start":172,"line_end":172,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":152166,"byte_end":152169,"line_start":173,"line_end":173,"column_start":2,"column_end":5}},{"value":"/ - `R`: The storage type for which the mask will be calculated. The mask","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":152171,"byte_end":152246,"line_start":174,"line_end":174,"column_start":2,"column_end":77}},{"value":"/   must also be this type, as it will be applied to a register of `R` in","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":152248,"byte_end":152323,"line_start":175,"line_end":175,"column_start":2,"column_end":77}},{"value":"/   order to set, clear, or test a single bit.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":152325,"byte_end":152373,"line_start":176,"line_end":176,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":152375,"byte_end":152378,"line_start":177,"line_end":177,"column_start":2,"column_end":5}},{"value":"/ # Requirements","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":152380,"byte_end":152398,"line_start":178,"line_end":178,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":152400,"byte_end":152403,"line_start":179,"line_end":179,"column_start":2,"column_end":5}},{"value":"/ A one-hot encoding means that there is exactly one bit set in the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":152405,"byte_end":152474,"line_start":180,"line_end":180,"column_start":2,"column_end":71}},{"value":"/ produced value. It must be equivalent to `1 << Self::at::<R>(place)`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":152476,"byte_end":152549,"line_start":181,"line_end":181,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":152551,"byte_end":152554,"line_start":182,"line_end":182,"column_start":2,"column_end":5}},{"value":"/ As with `at`, this function must produce a unique mapping from each","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":152556,"byte_end":152627,"line_start":183,"line_end":183,"column_start":2,"column_end":73}},{"value":"/ legal index in the `R` domain to a one-hot value of `R`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":152629,"byte_end":152689,"line_start":184,"line_end":184,"column_start":2,"column_end":62}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":152691,"byte_end":152700,"line_start":185,"line_end":185,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":902},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":153848,"byte_end":153852,"line_start":224,"line_end":224,"column_start":5,"column_end":9},"name":"mask","qualname":"::order::BitOrder::mask","value":"pub fn mask<R, impl Into<Option<BitIdx<R>>>: Into<Option<BitIdx<R>>>,\n            impl Into<Option<BitTail<R>>>: Into<Option<BitTail<R>>>>(impl Into<Option<BitIdx<R>>>,\n                                                                     impl Into<Option<BitTail<R>>>)\n-> BitMask<R> where R: BitRegister","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":" Constructs a multi-bit selector mask for batch operations on a single\n register `R`.","sig":null,"attributes":[{"value":"/ Constructs a multi-bit selector mask for batch operations on a single","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":152807,"byte_end":152880,"line_start":191,"line_end":191,"column_start":2,"column_end":75}},{"value":"/ register `R`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":152882,"byte_end":152899,"line_start":192,"line_end":192,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":152901,"byte_end":152904,"line_start":193,"line_end":193,"column_start":2,"column_end":5}},{"value":"/ The default implementation of this function traverses the index range,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":152906,"byte_end":152980,"line_start":194,"line_end":194,"column_start":2,"column_end":76}},{"value":"/ converting each index into a single-bit selector with `Self::select` and","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":152982,"byte_end":153058,"line_start":195,"line_end":195,"column_start":2,"column_end":78}},{"value":"/ accumulating into a combined register value.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":153060,"byte_end":153108,"line_start":196,"line_end":196,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":153110,"byte_end":153113,"line_start":197,"line_end":197,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":153115,"byte_end":153131,"line_start":198,"line_end":198,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":153133,"byte_end":153136,"line_start":199,"line_end":199,"column_start":2,"column_end":5}},{"value":"/ - `from`: The inclusive starting index for the mask.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":153138,"byte_end":153194,"line_start":200,"line_end":200,"column_start":2,"column_end":58}},{"value":"/ - `upto`: The exclusive ending index for the mask.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":153196,"byte_end":153250,"line_start":201,"line_end":201,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":153252,"byte_end":153255,"line_start":202,"line_end":202,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":153257,"byte_end":153270,"line_start":203,"line_end":203,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":153272,"byte_end":153275,"line_start":204,"line_end":204,"column_start":2,"column_end":5}},{"value":"/ A bit-mask with all bits corresponding to the input index range set high","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":153277,"byte_end":153353,"line_start":205,"line_end":205,"column_start":2,"column_end":78}},{"value":"/ and all others set low.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":153355,"byte_end":153382,"line_start":206,"line_end":206,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":153384,"byte_end":153387,"line_start":207,"line_end":207,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":153389,"byte_end":153410,"line_start":208,"line_end":208,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":153412,"byte_end":153415,"line_start":209,"line_end":209,"column_start":2,"column_end":5}},{"value":"/ - `R`: The storage type for which the mask will be calculated. The mask","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":153417,"byte_end":153492,"line_start":210,"line_end":210,"column_start":2,"column_end":77}},{"value":"/   must also be this type, as it will be applied to a register of `R` in","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":153494,"byte_end":153569,"line_start":211,"line_end":211,"column_start":2,"column_end":77}},{"value":"/   order to set, clear, or test all the selected bits.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":153571,"byte_end":153628,"line_start":212,"line_end":212,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":153630,"byte_end":153633,"line_start":213,"line_end":213,"column_start":2,"column_end":5}},{"value":"/ # Requirements","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":153635,"byte_end":153653,"line_start":214,"line_end":214,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":153655,"byte_end":153658,"line_start":215,"line_end":215,"column_start":2,"column_end":5}},{"value":"/ This function must always be equivalent to","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":153660,"byte_end":153706,"line_start":216,"line_end":216,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":153708,"byte_end":153711,"line_start":217,"line_end":217,"column_start":2,"column_end":5}},{"value":"/ ```rust,ignore","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":153713,"byte_end":153731,"line_start":218,"line_end":218,"column_start":2,"column_end":20}},{"value":"/ (from .. upto)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":153733,"byte_end":153751,"line_start":219,"line_end":219,"column_start":2,"column_end":20}},{"value":"/   .map(1 << Self::at::<R>)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":153753,"byte_end":153783,"line_start":220,"line_end":220,"column_start":2,"column_end":32}},{"value":"/   .fold(0, |mask, sel| mask | sel)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":153785,"byte_end":153823,"line_start":221,"line_end":221,"column_start":2,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":153825,"byte_end":153832,"line_start":222,"line_end":222,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":153834,"byte_end":153843,"line_start":223,"line_end":223,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":3985},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":154435,"byte_end":154439,"line_start":243,"line_end":243,"column_start":12,"column_end":16},"name":"Msb0","qualname":"::order::Msb0","value":"","parent":null,"children":[],"decl_id":null,"docs":" Traverses a register from `MSbit` to `LSbit`.\n","sig":null,"attributes":[{"value":"/ Traverses a register from `MSbit` to `LSbit`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":154297,"byte_end":154346,"line_start":241,"line_end":241,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":4007},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":155919,"byte_end":155923,"line_start":288,"line_end":288,"column_start":12,"column_end":16},"name":"Lsb0","qualname":"::order::Lsb0","value":"","parent":null,"children":[],"decl_id":null,"docs":" Traverses a register from `LSbit` to `MSbit`.\n","sig":null,"attributes":[{"value":"/ Traverses a register from `LSbit` to `MSbit`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":155781,"byte_end":155830,"line_start":286,"line_end":286,"column_start":1,"column_end":50}}]},{"kind":"Type","id":{"krate":0,"index":924},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":157521,"byte_end":157530,"line_start":342,"line_end":342,"column_start":10,"column_end":19},"name":"LocalBits","qualname":"::order::LocalBits","value":"Lsb0","parent":null,"children":[],"decl_id":null,"docs":" A default bit ordering.","sig":null,"attributes":[{"value":"* A default bit ordering.\n\nTypically, your platform’s C compiler uses least-significant-bit-first ordering\nfor bitfields. The Lsb0 bit ordering and little-endian byte ordering are\notherwise completely unrelated.\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":157259,"byte_end":157478,"line_start":335,"line_end":340,"column_start":1,"column_end":4}},{"value":"cfg(target_endian = \"little\")","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":157479,"byte_end":157511,"line_start":341,"line_end":341,"column_start":1,"column_end":33}}]},{"kind":"Mod","id":{"krate":0,"index":1087},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","parent":null,"children":[{"krate":0,"index":1088},{"krate":0,"index":1116},{"krate":0,"index":1131},{"krate":0,"index":1148},{"krate":0,"index":1156},{"krate":0,"index":1188},{"krate":0,"index":1189},{"krate":0,"index":1190}],"decl_id":null,"docs":" `bitvec` symbol export","sig":null,"attributes":[{"value":"* `bitvec` symbol export\n\nThis module collects the general public API into a single spot for inclusion, as\n`use bitvec::prelude::*;`, without polluting the root namespace of the crate.\n\nThe prelude has a number of submodules, which can be used to limit the symbols\nimported.\n\nThe `base` module (`use bitvec::prelude::base::*;`) imports only the data types\nand macros needed to make direct use of the crate. It also imports trait\n*methods* from `BitField` and `BitView`, without importing those trait names.\n\nThe `macros` module imports only the constructor macros.\n\nThe `traits` module imports the names of all traits in the crate.\n\nThe `types` module imports all data types in the crate.\n\nYou may alternatively wish to import the crate root, or this prelude, under a\nshorter name, without bringing any other items into scope. The import statements\n\n```rust,ignore\nuse bitvec as bv;\n//  or\nuse bitvec::prelude as bv;\n```\n\nwill make the crate symbols available under the `bv` namespace instead of the\nlonger `bitvec`. The prelude contains all the major public symbols of the crate\ndirectly, while the crate root does not reëxport the items in its submodules.\nUse whichever path root you prefer: crate for full paths, and prelude for\nshortcuts.\n!*/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":196657,"byte_end":197906,"line_start":1,"line_end":33,"column_start":1,"column_end":4}}]},{"kind":"Mod","id":{"krate":0,"index":1088},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":197991,"byte_end":197995,"line_start":36,"line_end":36,"column_start":9,"column_end":13},"name":"base","qualname":"::prelude::base","value":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","parent":null,"children":[{"krate":0,"index":1089},{"krate":0,"index":1090},{"krate":0,"index":1091},{"krate":0,"index":1092},{"krate":0,"index":1093},{"krate":0,"index":1096},{"krate":0,"index":1097},{"krate":0,"index":1100},{"krate":0,"index":1101},{"krate":0,"index":1103},{"krate":0,"index":1104},{"krate":0,"index":1106},{"krate":0,"index":1109},{"krate":0,"index":1110},{"krate":0,"index":1113}],"decl_id":null,"docs":" The base symbols, containing only the minimum needed to use the crate.\n","sig":null,"attributes":[{"value":"/ The base symbols, containing only the minimum needed to use the crate.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":197908,"byte_end":197982,"line_start":35,"line_end":35,"column_start":1,"column_end":75}}]},{"kind":"Mod","id":{"krate":0,"index":1116},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":198296,"byte_end":198302,"line_start":60,"line_end":60,"column_start":9,"column_end":15},"name":"macros","qualname":"::prelude::macros","value":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","parent":null,"children":[{"krate":0,"index":1117},{"krate":0,"index":1118},{"krate":0,"index":1121},{"krate":0,"index":1124},{"krate":0,"index":1125},{"krate":0,"index":1128}],"decl_id":null,"docs":" Macros available for default export.\n","sig":null,"attributes":[{"value":"/ Macros available for default export.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":198247,"byte_end":198287,"line_start":59,"line_end":59,"column_start":1,"column_end":41}}]},{"kind":"Mod","id":{"krate":0,"index":1131},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":198467,"byte_end":198473,"line_start":74,"line_end":74,"column_start":9,"column_end":15},"name":"traits","qualname":"::prelude::traits","value":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","parent":null,"children":[{"krate":0,"index":1132},{"krate":0,"index":1133},{"krate":0,"index":1136},{"krate":0,"index":1139},{"krate":0,"index":1142},{"krate":0,"index":1145}],"decl_id":null,"docs":" Traits available for default export.\n","sig":null,"attributes":[{"value":"/ Traits available for default export.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":198418,"byte_end":198458,"line_start":73,"line_end":73,"column_start":1,"column_end":41}}]},{"kind":"Mod","id":{"krate":0,"index":1148},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":198668,"byte_end":198681,"line_start":85,"line_end":85,"column_start":9,"column_end":22},"name":"trait_methods","qualname":"::prelude::trait_methods","value":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","parent":null,"children":[{"krate":0,"index":1149},{"krate":0,"index":1150},{"krate":0,"index":1153}],"decl_id":null,"docs":" Imports trait methods without importing the traits themselves.\n","sig":null,"attributes":[{"value":"/ Imports trait methods without importing the traits themselves.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":198593,"byte_end":198659,"line_start":84,"line_end":84,"column_start":1,"column_end":67}}]},{"kind":"Mod","id":{"krate":0,"index":1156},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":198807,"byte_end":198812,"line_start":93,"line_end":93,"column_start":9,"column_end":14},"name":"types","qualname":"::prelude::types","value":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","parent":null,"children":[{"krate":0,"index":1157},{"krate":0,"index":1158},{"krate":0,"index":1161},{"krate":0,"index":1162},{"krate":0,"index":1165},{"krate":0,"index":1168},{"krate":0,"index":1169},{"krate":0,"index":1172},{"krate":0,"index":1173},{"krate":0,"index":1175},{"krate":0,"index":1176},{"krate":0,"index":1178},{"krate":0,"index":1181},{"krate":0,"index":1182},{"krate":0,"index":1185}],"decl_id":null,"docs":" Datatypes available for default export.\n","sig":null,"attributes":[{"value":"/ Datatypes available for default export.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/prelude.rs","byte_start":198755,"byte_end":198798,"line_start":92,"line_end":92,"column_start":1,"column_end":44}}]},{"kind":"Mod","id":{"krate":0,"index":1191},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"slice","qualname":"::slice","value":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","parent":null,"children":[{"krate":0,"index":1192},{"krate":0,"index":1193},{"krate":0,"index":1196},{"krate":0,"index":1199},{"krate":0,"index":1200},{"krate":0,"index":1203},{"krate":0,"index":1206},{"krate":0,"index":1209},{"krate":0,"index":1212},{"krate":0,"index":1213},{"krate":0,"index":1216},{"krate":0,"index":1219},{"krate":0,"index":1222},{"krate":0,"index":1225},{"krate":0,"index":1226},{"krate":0,"index":1229},{"krate":0,"index":1230},{"krate":0,"index":1232},{"krate":0,"index":1235},{"krate":0,"index":1238},{"krate":0,"index":1239},{"krate":0,"index":1242},{"krate":0,"index":1243},{"krate":0,"index":1245},{"krate":0,"index":1248},{"krate":0,"index":1251},{"krate":0,"index":1254},{"krate":0,"index":1257},{"krate":0,"index":1260},{"krate":0,"index":1263},{"krate":0,"index":1269},{"krate":0,"index":1278},{"krate":0,"index":1332},{"krate":0,"index":1336},{"krate":0,"index":1341},{"krate":0,"index":1345},{"krate":0,"index":1349},{"krate":0,"index":1635},{"krate":0,"index":1822},{"krate":0,"index":1916},{"krate":0,"index":1994},{"krate":0,"index":2197},{"krate":0,"index":2198},{"krate":0,"index":2199},{"krate":0,"index":2202},{"krate":0,"index":2205},{"krate":0,"index":2208},{"krate":0,"index":2211},{"krate":0,"index":2214},{"krate":0,"index":2215},{"krate":0,"index":2218},{"krate":0,"index":2221},{"krate":0,"index":2224},{"krate":0,"index":2227},{"krate":0,"index":2230},{"krate":0,"index":2233},{"krate":0,"index":2236},{"krate":0,"index":2239},{"krate":0,"index":2242},{"krate":0,"index":2245},{"krate":0,"index":2248},{"krate":0,"index":2251},{"krate":0,"index":2254},{"krate":0,"index":2257},{"krate":0,"index":2260},{"krate":0,"index":2263},{"krate":0,"index":2266},{"krate":0,"index":2269},{"krate":0,"index":2272}],"decl_id":null,"docs":" A dynamically-sized view into individual bits of a memory region.","sig":null,"attributes":[{"value":"* A dynamically-sized view into individual bits of a memory region.\n\nYou can read the language’s [`slice` module documentation][std] here.\n\nThis module defines the [`BitSlice`] region, and all of its associated support\ncode.\n\n`BitSlice` is the primary working type of this crate. It is a wrapper type over\n`[T]` which enables you to view, manipulate, and take the address of individual\nbits in memory. It behaves in every possible respect exactly like an ordinary\nslice: it is dynamically-sized, and must be held by `&` or `&mut` reference,\njust like `[T]`, and implements every inherent method and trait that `[T]` does,\nto the absolute limits of what Rust permits.\n\nThe key to `BitSlice`’s powerful capability is that references to it use a\nspecial encoding that store, in addition to the address of the base element and\nthe bit length, the index of the starting bit in the base element. This custom\nreference encoding has some costs in what APIs are possible – for instance, Rust\nforbids it from supporting `&mut BitSlice[index] = bool` write indexing – but in\nexchange, enables it to be *far* more capable than any other bit-slice crate in\nexistence.\n\nBecause of the volume of code that must be written to match the `[T]` standard\nAPI, this module is organized very differently than the slice implementation in\nthe `core` and `std` distribution libraries.\n\n- the root module `slice` contains new APIs that have no counterpart in `[T]`\n- `slice/api` contains reïmplementations of the `[T]` inherent methods\n- `slice/iter` implements all of the iteration capability\n- `slice/ops` implements the traits in `core::ops`\n- `slice/proxy` implements the proxy reference used in place of `&mut bool`\n- `slice/traits` implements all other traits not in `core::ops`\n- lastly, `slice/tests` contains all the unit tests.\n\n[`BitSlice`]: struct.BitSlice.html\n[std]: https://doc.rust-lang.org/std/slice\n!*/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":199113,"byte_end":201019,"line_start":1,"line_end":37,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1263},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":214481,"byte_end":214489,"line_start":383,"line_end":383,"column_start":12,"column_end":20},"name":"BitSlice","qualname":"::slice::BitSlice","value":"BitSlice {  }","parent":null,"children":[{"krate":0,"index":1266},{"krate":0,"index":1267},{"krate":0,"index":1268}],"decl_id":null,"docs":" A slice of individual bits, anywhere in memory.","sig":null,"attributes":[{"value":"* A slice of individual bits, anywhere in memory.\n\nThis is the main working type of the crate. It is analagous to `[bool]`, and is\nwritten to be as close as possible to drop-in replacable for it. This type\ncontains most of the *methods* used to operate on memory, but it will rarely be\nnamed directly in your code. You should generally prefer to use [`BitArray`] for\nfixed-size arrays or [`BitVec`] for dynamic vectors, and use `&BitSlice`\nreferences only where you would directly use `&[bool]` or `&[u8]` references\nbefore using this crate.\n\nAs it is a slice wrapper, you are intended to work with this through references\n(`&BitSlice<O, T>` and `&mut BitSlice<O, T>`) or through the other data\nstructures provided by `bitvec` that are implemented atop it. Once created,\nreferences to `BitSlice` are guaranteed to work just like references to `[bool]`\nto the fullest extent possible in the Rust language.\n\nEvery bit-vector crate can give you an opaque type that hides shift/mask\noperations from you. `BitSlice` does far more than this: it offers you the full\nRust guarantees about reference behavior, including lifetime tracking,\nmutability and aliasing awareness, and explicit memory control, *as well as* the\nfull set of tools and APIs available to the standard `[bool]` slice type.\n`BitSlice` can arbitrarily split and subslice, just like `[bool]`. You can write\na linear consuming function and keep the patterns already know.\n\nFor example, to trim all the bits off either edge that match a condition, you\ncould write\n\n```rust\nuse bitvec::prelude::*;\n\nfn trim<O: BitOrder, T: BitStore>(\n  bits: &BitSlice<O, T>,\n  to_trim: bool,\n) -> &BitSlice<O, T> {\n  let stop = |b: &bool| *b != to_trim;\n  let front = bits.iter().position(stop).unwrap_or(0);\n  let back = bits.iter().rposition(stop).unwrap_or(0);\n  &bits[front ..= back]\n}\n# assert_eq!(trim(bits![0, 0, 1, 1, 0, 1, 0], false), bits![1, 1, 0, 1]);\n```\n\nto get behavior something like\n`trim(&BitSlice[0, 0, 1, 1, 0, 1, 0], false) == &BitSlice[1, 1, 0, 1]`.\n\n# Documentation\n\nAll APIs that mirror something in the standard library will have an `Original`\nsection linking to the corresponding item. All APIs that have a different\nsignature or behavior than the original will have an `API Differences` section\nexplaining what has changed, and how to adapt your existing code to the change.\n\nThese sections look like this:\n\n# Original\n\n[`slice`](https://doc.rust-lang.org/std/primitive.slice.html)\n\n# API Differences\n\nThe slice type `[bool]` has no type parameters. `BitSlice<O, T>` has two: one\nfor the memory type used as backing storage, and one for the order of bits\nwithin that memory type.\n\n`&BitSlice<O, T>` is capable of producing `&bool` references to read bits out\nof its memory, but is not capable of producing `&mut bool` references to write\nbits *into* its memory. Any `[bool]` API that would produce a `&mut bool` will\ninstead produce a [`BitMut<O, T>`] proxy reference.\n\n# Behavior\n\n`BitSlice` is a wrapper over `[T]`. It describes a region of memory, and must be\nhandled indirectly. This is most commonly through the reference types\n`&BitSlice` and `&mut BitSlice`, which borrow memory owned by some other value\nin the program. These buffers can be directly owned by the sibling types\n`BitBox`, which behavios like `Box<[T]>`, and `BitVec`, which behaves like\n`Vec<T>`. It cannot be used as the type parameter to a standard-library-provided\nhandle type.\n\nThe `BitSlice` region provides access to each individual bit in the region, as\nif each bit had a memory address that you could use to dereference it. It packs\neach logical bit into exactly one bit of storage memory, just like\n[`std::bitset`] and [`std::vector<bool>`] in C++.\n\n# Type Parameters\n\n`BitSlice` has two type parameters which propagate through nearly every public\nAPI in the crate. These are very important to its operation, and your choice\nof type arguments informs nearly every part of this library’s behavior.\n\n## `T: BitStore`\n\nThis is the simpler of the two parameters. It refers to the integer type used to\nhold bits. It must be one of the Rust unsigned integer fundamentals: `u8`,\n`u16`, `u32`, `usize`, and on 64-bit systems only, `u64`. In addition, it can\nalso be the `Cell<N>` wrapper over any of those, or their equivalent types in\n`core::sync::atomic`. Unless you know you need to have `Cell` or atomic\nproperties, though, you should use a plain integer.\n\nThe default type argument is `usize`.\n\nThe argument you choose is used as the basis of a `[T]` slice, over which the\n`BitSlice` view type is placed. `BitSlice<_, T>` is subject to all of the rules\nabout alignment that `[T]` is. If you are working with in-memory representation\nformats, chances are that you already have a `T` type with which you’ve been\nworking, and should use it here.\n\nIf you are only using this crate to discard the seven wasted bits per `bool`\nof a collection of `bool`s, and are not too concerned about the in-memory\nrepresentation, then you should use the default type argument of `usize`. This\nis because most processors work best when moving an entire `usize` between\nmemory and the processor itself, and using a smaller type may cause it to slow\ndown.\n\n## `O: BitOrder`\n\nThis is the more complex parameter. It has a default argument which, like\n`usize`, is the good-enough choice when you do not explicitly need to control\nthe representation of bits in memory.\n\nThis parameter determines how to index the bits within a single memory element\n`T`. Computers all agree that in a slice of elements `T`, the element with the\nlower index has a lower memory address than the element with the higher index.\nBut the individual bits within an element do not have addresses, and so there is\nno uniform standard of which bit is the zeroth, which is the first, which is the\npenultimate, and which is the last.\n\nTo make matters even more confusing, there are two predominant ideas of\nin-element ordering that often *correlate* with the in-element *byte* ordering\nof integer types, but are in fact wholly unrelated! `bitvec` provides these two\nmain orders as types for you, and if you need a different one, it also provides\nthe tools you need to make your own.\n\n### Least Significant Bit Comes First\n\nThis ordering, named the [`Lsb0`] type, indexes bits within an element by\nplacing the `0` index at the least significant bit (numeric value `1`) and the\nfinal index at the most significant bit (numeric value `T::min_value()`, for\nsigned integers on most machines).\n\nFor example, this is the ordering used by the [TCP wire format], and by most C\ncompilers to lay out bit-field struct members on little-endian **byte**-ordered\nmachines.\n\n### Most Significant Bit Comes First\n\nThis ordering, named the [`Msb0`] type, indexes bits within an element by\nplacing the `0` index at the most significant bit (numeric value `T::min_value()`\nfor most signed integers) and the final index at the least significant bit\n(numeric value `1`).\n\nThis is the ordering used by most C compilers to lay out bit-field struct\nmembers on big-endian **byte**-ordered machines.\n\n### Default Ordering\n\nThe default ordering is `Lsb0`, as it typically produces shorter object code\nthan `Msb0` does. If you are implementing a collection, then `Lsb0` is likely\nthe more performant ordering; if you are implementing a buffer protocol, then\nyour choice of ordering is dictated by the protocol definition.\n\n# Safety\n\n`BitSlice` is designed to never introduce new memory unsafety that you did not\nprovide yourself, either before or during the use of this crate. Bugs do, and\nhave, occured, and you are encouraged to submit any discovered flaw as a defect\nreport.\n\nThe `&BitSlice` reference type uses a private encoding scheme to hold all the\ninformation needed in its stack value. This encoding is **not** part of the\npublic API of the library, and is not binary-compatible with `&[T]`.\nFurthermore, in order to satisfy Rust’s requirements about alias conditions,\n`BitSlice` performs type transformations on the `T` parameter to ensure that it\nnever creates the potential for undefined behavior.\n\nYou must never attempt to type-cast a reference to `BitSlice` in any way. You\nmust not use `mem::transmute` with `BitSlice` anywhere in its type arguments.\nYou must not use `as`-casting to convert between `*BitSlice` and any other type.\nYou must not attempt to modify the binary representation of a `&BitSlice`\nreference value. These actions will all lead to runtime memory unsafety, are\n(hopefully) likely to induce a program crash, and may possibly cause undefined\nbehavior at compile-time.\n\nEverything in the `BitSlice` public API, even the `unsafe` parts, are guaranteed\nto have no more unsafety than their equivalent parts in the standard library.\nAll `unsafe` APIs will have documentation explicitly detailing what the API\nrequires you to uphold in order for it to function safely and correctly. All\nsafe APIs will do so themselves.\n\n# Performance\n\nLike the standard library’s `[T]` slice, `BitSlice` is designed to be very easy\nto use safely, while supporting `unsafe` when necessary. Rust has a powerful\noptimizing engine, and `BitSlice` will frequently be compiled to have zero\nruntime cost. Where it is slower, it will not be significantly slower than a\nmanual replacement.\n\nAs the machine instructions operate on registers rather than bits, your choice\nof `T: BitOrder` type parameter can influence your slice’s performance. Using\nlarger register types means that slices can gallop over completely-filled\ninterior elements faster, while narrower register types permit more graceful\nhandling of subslicing and aliased splits.\n\n# Construction\n\n`BitSlice` views of memory can be constructed over borrowed data in a number of\nways. As this is a reference-only type, it can only ever be built by borrowing\nan existing memory buffer and taking temporary control of your program’s view of\nthe region.\n\n## Macro Constructor\n\n`BitSlice` buffers can be constructed at compile-time through the [`bits!`]\nmacro. This macro accepts a superset of the `vec!` arguments, and creates an\nappropriate buffer in your program’s static memory.\n\n```rust\nuse bitvec::prelude::*;\n\nlet static_borrow = bits![0, 1, 0, 0, 1, 0, 0, 1];\nlet mutable_static: &mut BitSlice<_, _> = bits![mut 0; 8];\n\nassert_ne!(static_borrow, mutable_static);\nmutable_static.clone_from_bitslice(static_borrow);\nassert_eq!(static_borrow, mutable_static);\n```\n\nNote that, despite constructing a `static mut` binding, the `bits![mut …]` call\nis not `unsafe`, as the constructed symbol is hidden and only accessible by the\nsole `&mut` reference returned by the macro call.\n\n## Borrowing Constructors\n\nThe functions [`from_element`], [`from_element_mut`], [`from_slice`], and\n[`from_slice_mut`] take references to existing memory, and construct `BitSlice`\nreferences over them. These are the most basic ways to borrow memory and view it\nas bits.\n\n```rust\nuse bitvec::prelude::*;\n\nlet data = [0u16; 3];\nlet local_borrow = BitSlice::<Lsb0, _>::from_slice(&data);\n\nlet mut data = [0u8; 5];\nlet local_mut = BitSlice::<Lsb0, _>::from_slice_mut(&mut data);\n```\n\n## Trait Method Constructors\n\nThe [`BitView`] trait implements `.view_bits::<O>()` and `.view_bits_mut::<O>()`\nmethods on elements, arrays not larger than 32 elements, and slices. This trait,\nimported in the crate prelude, is *probably* the easiest way for you to borrow\nmemory.\n\n```rust\nuse bitvec::prelude::*;\n\nlet data = [0u32; 5];\nlet trait_view = data.view_bits::<Msb0>();\n\nlet mut data = 0usize;\nlet trait_mut = data.view_bits_mut::<Msb0>();\n```\n\n## Owned Bit Slices\n\nIf you wish to take ownership of a memory region and enforce that it is always\nviewed as a `BitSlice` by default, you can use one of the [`BitArray`],\n[`BitBox`], or [`BitVec`] types, rather than pairing ordinary buffer types with\nthe borrowing constructors.\n\n```rust\nuse bitvec::prelude::*;\n\nlet slice = bits![0; 27];\nlet array = bitarr![LocalBits, u8; 0; 10];\n# #[cfg(feature = \"alloc\")] fn allocs() {\nlet boxed = bitbox![0; 10];\nlet vec = bitvec![0; 20];\n# } #[cfg(feature = \"alloc\")] allocs();\n\n// arrays always round up\nassert_eq!(array.as_bitslice(), slice[.. 16]);\n# #[cfg(feature = \"alloc\")] fn allocs2() {\n# let slice = bits![0; 27];\n# let boxed = bitbox![0; 10];\n# let vec = bitvec![0; 20];\nassert_eq!(boxed.as_bitslice(), slice[.. 10]);\nassert_eq!(vec.as_bitslice(), slice[.. 20]);\n# } #[cfg(feature = \"alloc\")] allocs2();\n```\n\n[TCP wire format]: https://en.wikipedia.org/wiki/Transmission_Control_Protocol#TCP_segment_structure\n[`BitArray`]: ../array/struct.BitArray.html\n[`BitBox`]: ../boxed/struct.BitBox.html\n[`BitMut<O, T>`]: struct.BitMut.html\n[`BitVec`]: ../vec/struct.BitVec.html\n[`BitView`]: ../view/trait.BitView.html\n[`Lsb0`]: ../order/struct.Lsb0.html\n[`Msb0`]: ../order/struct.Msb0.html\n[`bits!`]: ../macro.bits.html\n[`bitvec::prelude::LocalBits`]: ../order/type.LocalBits.html\n[`std::bitset`]: https://en.cppreference.com/w/cpp/utility/bitset\n[`std::vector<bool>`]: https://en.cppreference.com/w/cpp/container/vector_bool\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":201420,"byte_end":214448,"line_start":76,"line_end":381,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":214449,"byte_end":214469,"line_start":382,"line_end":382,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1272},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":216723,"byte_end":216735,"line_start":448,"line_end":448,"column_start":9,"column_end":21},"name":"from_element","qualname":"<BitSlice<O, T>>::from_element","value":"pub fn from_element(&T) -> &Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a shared `&BitSlice` reference over a shared element.","sig":null,"attributes":[{"value":"/ Constructs a shared `&BitSlice` reference over a shared element.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":215962,"byte_end":216030,"line_start":421,"line_end":421,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":216032,"byte_end":216035,"line_start":422,"line_end":422,"column_start":2,"column_end":5}},{"value":"/ The [`BitView`] trait, implemented on all `T` elements, provides a","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":216037,"byte_end":216107,"line_start":423,"line_end":423,"column_start":2,"column_end":72}},{"value":"/ method [`.view_bits::<O>()`] which delegates to this function and may be","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":216109,"byte_end":216185,"line_start":424,"line_end":424,"column_start":2,"column_end":78}},{"value":"/ more convenient for you to write.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":216187,"byte_end":216224,"line_start":425,"line_end":425,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":216226,"byte_end":216229,"line_start":426,"line_end":426,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":216231,"byte_end":216247,"line_start":427,"line_end":427,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":216249,"byte_end":216252,"line_start":428,"line_end":428,"column_start":2,"column_end":5}},{"value":"/ - `elem`: A shared reference to a memory element.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":216254,"byte_end":216307,"line_start":429,"line_end":429,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":216309,"byte_end":216312,"line_start":430,"line_end":430,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":216314,"byte_end":216327,"line_start":431,"line_end":431,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":216329,"byte_end":216332,"line_start":432,"line_end":432,"column_start":2,"column_end":5}},{"value":"/ A shared `&BitSlice` over the `elem` element.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":216334,"byte_end":216383,"line_start":433,"line_end":433,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":216385,"byte_end":216388,"line_start":434,"line_end":434,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":216390,"byte_end":216404,"line_start":435,"line_end":435,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":216406,"byte_end":216409,"line_start":436,"line_end":436,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":216411,"byte_end":216422,"line_start":437,"line_end":437,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":216424,"byte_end":216451,"line_start":438,"line_end":438,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":216453,"byte_end":216456,"line_start":439,"line_end":439,"column_start":2,"column_end":5}},{"value":"/ let elem = 0u8;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":216458,"byte_end":216477,"line_start":440,"line_end":440,"column_start":2,"column_end":21}},{"value":"/ let bits = BitSlice::<LocalBits, _>::from_element(&elem);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":216479,"byte_end":216540,"line_start":441,"line_end":441,"column_start":2,"column_end":63}},{"value":"/ assert_eq!(bits.len(), 8);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":216542,"byte_end":216572,"line_start":442,"line_end":442,"column_start":2,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":216574,"byte_end":216581,"line_start":443,"line_end":443,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":216583,"byte_end":216586,"line_start":444,"line_end":444,"column_start":2,"column_end":5}},{"value":"/ [`BitView`]: ../view/trait.BitView.html","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":216588,"byte_end":216631,"line_start":445,"line_end":445,"column_start":2,"column_end":45}},{"value":"/ [`.view_bits::<O>()`]: ../view/trait.BitView.html#method.view_bits","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":216633,"byte_end":216703,"line_start":446,"line_end":446,"column_start":2,"column_end":72}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":216705,"byte_end":216714,"line_start":447,"line_end":447,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1273},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":217858,"byte_end":217874,"line_start":488,"line_end":488,"column_start":9,"column_end":25},"name":"from_element_mut","qualname":"<BitSlice<O, T>>::from_element_mut","value":"pub fn from_element_mut(&mut T) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs an exclusive `&mut BitSlice` reference over an element.","sig":null,"attributes":[{"value":"/ Constructs an exclusive `&mut BitSlice` reference over an element.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":216866,"byte_end":216936,"line_start":455,"line_end":455,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":216938,"byte_end":216941,"line_start":456,"line_end":456,"column_start":2,"column_end":5}},{"value":"/ The [`BitView`] trait, implemented on all `T` elements, provides a","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":216943,"byte_end":217013,"line_start":457,"line_end":457,"column_start":2,"column_end":72}},{"value":"/ method [`.view_bits_mut::<O>()`] which delegates to this function and","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":217015,"byte_end":217088,"line_start":458,"line_end":458,"column_start":2,"column_end":75}},{"value":"/ may be more convenient for you to write.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":217090,"byte_end":217134,"line_start":459,"line_end":459,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":217136,"byte_end":217139,"line_start":460,"line_end":460,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":217141,"byte_end":217157,"line_start":461,"line_end":461,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":217159,"byte_end":217162,"line_start":462,"line_end":462,"column_start":2,"column_end":5}},{"value":"/ - `elem`: An exclusive reference to a memory element.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":217164,"byte_end":217221,"line_start":463,"line_end":463,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":217223,"byte_end":217226,"line_start":464,"line_end":464,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":217228,"byte_end":217241,"line_start":465,"line_end":465,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":217243,"byte_end":217246,"line_start":466,"line_end":466,"column_start":2,"column_end":5}},{"value":"/ An exclusive `&mut BitSlice` over the `elem` element.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":217248,"byte_end":217305,"line_start":467,"line_end":467,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":217307,"byte_end":217310,"line_start":468,"line_end":468,"column_start":2,"column_end":5}},{"value":"/ Note that the original `elem` reference will be inaccessible for the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":217312,"byte_end":217384,"line_start":469,"line_end":469,"column_start":2,"column_end":74}},{"value":"/ duration of the returned slice handle’s lifetime.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":217386,"byte_end":217441,"line_start":470,"line_end":470,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":217443,"byte_end":217446,"line_start":471,"line_end":471,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":217448,"byte_end":217462,"line_start":472,"line_end":472,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":217464,"byte_end":217467,"line_start":473,"line_end":473,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":217469,"byte_end":217480,"line_start":474,"line_end":474,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":217482,"byte_end":217509,"line_start":475,"line_end":475,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":217511,"byte_end":217514,"line_start":476,"line_end":476,"column_start":2,"column_end":5}},{"value":"/ let mut elem = 0u16;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":217516,"byte_end":217540,"line_start":477,"line_end":477,"column_start":2,"column_end":26}},{"value":"/ let bits = BitSlice::<Msb0, _>::from_element_mut(&mut elem);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":217542,"byte_end":217606,"line_start":478,"line_end":478,"column_start":2,"column_end":66}},{"value":"/ bits.set(15, true);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":217608,"byte_end":217631,"line_start":479,"line_end":479,"column_start":2,"column_end":25}},{"value":"/ assert!(bits.get(15).unwrap());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":217633,"byte_end":217668,"line_start":480,"line_end":480,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(elem, 1);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":217670,"byte_end":217694,"line_start":481,"line_end":481,"column_start":2,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":217696,"byte_end":217703,"line_start":482,"line_end":482,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":217705,"byte_end":217708,"line_start":483,"line_end":483,"column_start":2,"column_end":5}},{"value":"/ [`BitView`]: ../view/trait.BitView.html","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":217710,"byte_end":217753,"line_start":484,"line_end":484,"column_start":2,"column_end":45}},{"value":"/ [`.view_bits_mut::<O>()`]:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":217755,"byte_end":217785,"line_start":485,"line_end":485,"column_start":2,"column_end":32}},{"value":"/ ../view/trait.BitView.html#method.view_bits_mut","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":217787,"byte_end":217838,"line_start":486,"line_end":486,"column_start":2,"column_end":53}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":217840,"byte_end":217849,"line_start":487,"line_end":487,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1274},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":219210,"byte_end":219220,"line_start":532,"line_end":532,"column_start":9,"column_end":19},"name":"from_slice","qualname":"<BitSlice<O, T>>::from_slice","value":"pub fn from_slice(&[T]) -> Option<&Self>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a shared `&BitSlice` reference over a shared element slice.","sig":null,"attributes":[{"value":"/ Constructs a shared `&BitSlice` reference over a shared element slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":218013,"byte_end":218087,"line_start":495,"line_end":495,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":218089,"byte_end":218092,"line_start":496,"line_end":496,"column_start":2,"column_end":5}},{"value":"/ The [`BitView`] trait, implemented on all `[T]` slices, provides a","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":218094,"byte_end":218164,"line_start":497,"line_end":497,"column_start":2,"column_end":72}},{"value":"/ method [`.view_bits::<O>()`] that is equivalent to this function and may","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":218166,"byte_end":218242,"line_start":498,"line_end":498,"column_start":2,"column_end":78}},{"value":"/ be more convenient for you to write.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":218244,"byte_end":218284,"line_start":499,"line_end":499,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":218286,"byte_end":218289,"line_start":500,"line_end":500,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":218291,"byte_end":218307,"line_start":501,"line_end":501,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":218309,"byte_end":218312,"line_start":502,"line_end":502,"column_start":2,"column_end":5}},{"value":"/ - `slice`: A shared reference over a sequence of memory elements.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":218314,"byte_end":218383,"line_start":503,"line_end":503,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":218385,"byte_end":218388,"line_start":504,"line_end":504,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":218390,"byte_end":218403,"line_start":505,"line_end":505,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":218405,"byte_end":218408,"line_start":506,"line_end":506,"column_start":2,"column_end":5}},{"value":"/ If `slice` does not have fewer than [`MAX_ELTS`] elements, this returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":218410,"byte_end":218485,"line_start":507,"line_end":507,"column_start":2,"column_end":77}},{"value":"/ `None`. Otherwise, it returns a shared `&BitSlice` over the `slice`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":218487,"byte_end":218558,"line_start":508,"line_end":508,"column_start":2,"column_end":73}},{"value":"/ elements.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":218560,"byte_end":218573,"line_start":509,"line_end":509,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":218575,"byte_end":218578,"line_start":510,"line_end":510,"column_start":2,"column_end":5}},{"value":"/ # Conditions","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":218580,"byte_end":218596,"line_start":511,"line_end":511,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":218598,"byte_end":218601,"line_start":512,"line_end":512,"column_start":2,"column_end":5}},{"value":"/ The produced `&BitSlice` handle always begins at the zeroth bit.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":218603,"byte_end":218671,"line_start":513,"line_end":513,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":218673,"byte_end":218676,"line_start":514,"line_end":514,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":218678,"byte_end":218692,"line_start":515,"line_end":515,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":218694,"byte_end":218697,"line_start":516,"line_end":516,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":218699,"byte_end":218710,"line_start":517,"line_end":517,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":218712,"byte_end":218739,"line_start":518,"line_end":518,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":218741,"byte_end":218744,"line_start":519,"line_end":519,"column_start":2,"column_end":5}},{"value":"/ let slice = &[0u8, 1];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":218746,"byte_end":218772,"line_start":520,"line_end":520,"column_start":2,"column_end":28}},{"value":"/ let bits = BitSlice::<Msb0, _>::from_slice(slice).unwrap();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":218774,"byte_end":218837,"line_start":521,"line_end":521,"column_start":2,"column_end":65}},{"value":"/ assert!(bits[15]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":218839,"byte_end":218861,"line_start":522,"line_end":522,"column_start":2,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":218863,"byte_end":218870,"line_start":523,"line_end":523,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":218872,"byte_end":218875,"line_start":524,"line_end":524,"column_start":2,"column_end":5}},{"value":"/ An example showing this function failing would require a slice exceeding","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":218877,"byte_end":218953,"line_start":525,"line_end":525,"column_start":2,"column_end":78}},{"value":"/ `!0usize >> 3` bytes in size, which is infeasible to produce.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":218955,"byte_end":219020,"line_start":526,"line_end":526,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":219022,"byte_end":219025,"line_start":527,"line_end":527,"column_start":2,"column_end":5}},{"value":"/ [`BitView`]: ../view/trait.BitView.html","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":219027,"byte_end":219070,"line_start":528,"line_end":528,"column_start":2,"column_end":45}},{"value":"/ [`MAX_ELTS`]: #associatedconstant.MAX_ELTS","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":219072,"byte_end":219118,"line_start":529,"line_end":529,"column_start":2,"column_end":48}},{"value":"/ [`.view_bits::<O>()`]: ../view/trait.BitView.html#method.view_bits","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":219120,"byte_end":219190,"line_start":530,"line_end":530,"column_start":2,"column_end":72}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":219192,"byte_end":219201,"line_start":531,"line_end":531,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1275},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":219945,"byte_end":219965,"line_start":556,"line_end":556,"column_start":16,"column_end":36},"name":"from_slice_unchecked","qualname":"<BitSlice<O, T>>::from_slice_unchecked","value":"pub unsafe fn from_slice_unchecked(&[T]) -> &Self","parent":null,"children":[],"decl_id":null,"docs":" Converts a slice reference into a `BitSlice` reference without checking\n that its size can be safely used.","sig":null,"attributes":[{"value":"/ Converts a slice reference into a `BitSlice` reference without checking","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":219485,"byte_end":219560,"line_start":542,"line_end":542,"column_start":2,"column_end":77}},{"value":"/ that its size can be safely used.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":219562,"byte_end":219599,"line_start":543,"line_end":543,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":219601,"byte_end":219604,"line_start":544,"line_end":544,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":219606,"byte_end":219618,"line_start":545,"line_end":545,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":219620,"byte_end":219623,"line_start":546,"line_end":546,"column_start":2,"column_end":5}},{"value":"/ If the `slice` length is too long, then it will be capped at","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":219625,"byte_end":219689,"line_start":547,"line_end":547,"column_start":2,"column_end":66}},{"value":"/ [`MAX_BITS`]. You are responsible for ensuring that the input slice is","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":219691,"byte_end":219765,"line_start":548,"line_end":548,"column_start":2,"column_end":76}},{"value":"/ not unduly truncated.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":219767,"byte_end":219792,"line_start":549,"line_end":549,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":219794,"byte_end":219797,"line_start":550,"line_end":550,"column_start":2,"column_end":5}},{"value":"/ Prefer [`from_slice`].","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":219799,"byte_end":219825,"line_start":551,"line_end":551,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":219827,"byte_end":219830,"line_start":552,"line_end":552,"column_start":2,"column_end":5}},{"value":"/ [`MAX_BITS`]: #associatedconstant.MAX_BITS","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":219832,"byte_end":219878,"line_start":553,"line_end":553,"column_start":2,"column_end":48}},{"value":"/ [`from_slice`]: #method.from_slice","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":219880,"byte_end":219918,"line_start":554,"line_end":554,"column_start":2,"column_end":40}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":219920,"byte_end":219929,"line_start":555,"line_end":555,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1276},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":222181,"byte_end":222195,"line_start":624,"line_end":624,"column_start":9,"column_end":23},"name":"from_slice_mut","qualname":"<BitSlice<O, T>>::from_slice_mut","value":"pub fn from_slice_mut(&mut [T]) -> Option<&mut Self>","parent":null,"children":[],"decl_id":null,"docs":" Constructs an exclusive `&mut BitSlice` reference over a slice.","sig":null,"attributes":[{"value":"/ Constructs an exclusive `&mut BitSlice` reference over a slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":220301,"byte_end":220368,"line_start":564,"line_end":564,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":220370,"byte_end":220373,"line_start":565,"line_end":565,"column_start":2,"column_end":5}},{"value":"/ The [`BitView`] trait, implemented on all `[T]` slices, provides a","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":220375,"byte_end":220445,"line_start":566,"line_end":566,"column_start":2,"column_end":72}},{"value":"/ method [`.view_bits_mut::<O>()`] that is equivalent to this function and","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":220447,"byte_end":220523,"line_start":567,"line_end":567,"column_start":2,"column_end":78}},{"value":"/ may be more convenient for you to write.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":220525,"byte_end":220569,"line_start":568,"line_end":568,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":220571,"byte_end":220574,"line_start":569,"line_end":569,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":220576,"byte_end":220592,"line_start":570,"line_end":570,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":220594,"byte_end":220597,"line_start":571,"line_end":571,"column_start":2,"column_end":5}},{"value":"/ - `slice`: An exclusive reference over a sequence of memory elements.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":220599,"byte_end":220672,"line_start":572,"line_end":572,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":220674,"byte_end":220677,"line_start":573,"line_end":573,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":220679,"byte_end":220692,"line_start":574,"line_end":574,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":220694,"byte_end":220697,"line_start":575,"line_end":575,"column_start":2,"column_end":5}},{"value":"/ An exclusive `&mut BitSlice` over the `slice` elements.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":220699,"byte_end":220758,"line_start":576,"line_end":576,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":220760,"byte_end":220763,"line_start":577,"line_end":577,"column_start":2,"column_end":5}},{"value":"/ Note that the original `slice` reference will be inaccessible for the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":220765,"byte_end":220838,"line_start":578,"line_end":578,"column_start":2,"column_end":75}},{"value":"/ duration of the returned slice handle’s lifetime.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":220840,"byte_end":220895,"line_start":579,"line_end":579,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":220897,"byte_end":220900,"line_start":580,"line_end":580,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":220902,"byte_end":220914,"line_start":581,"line_end":581,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":220916,"byte_end":220919,"line_start":582,"line_end":582,"column_start":2,"column_end":5}},{"value":"/ This panics if `slice` does not have fewer than [`MAX_ELTS`] elements.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":220921,"byte_end":220995,"line_start":583,"line_end":583,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":220997,"byte_end":221000,"line_start":584,"line_end":584,"column_start":2,"column_end":5}},{"value":"/ [`MAX_ELTS`]: #associatedconstant.MAX_ELTS","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":221002,"byte_end":221048,"line_start":585,"line_end":585,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":221050,"byte_end":221053,"line_start":586,"line_end":586,"column_start":2,"column_end":5}},{"value":"/ # Conditions","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":221055,"byte_end":221071,"line_start":587,"line_end":587,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":221073,"byte_end":221076,"line_start":588,"line_end":588,"column_start":2,"column_end":5}},{"value":"/ The produced `&mut BitSlice` handle always begins at the zeroth bit of","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":221078,"byte_end":221152,"line_start":589,"line_end":589,"column_start":2,"column_end":76}},{"value":"/ the zeroth element in `slice`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":221154,"byte_end":221188,"line_start":590,"line_end":590,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":221190,"byte_end":221193,"line_start":591,"line_end":591,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":221195,"byte_end":221209,"line_start":592,"line_end":592,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":221211,"byte_end":221214,"line_start":593,"line_end":593,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":221216,"byte_end":221227,"line_start":594,"line_end":594,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":221229,"byte_end":221256,"line_start":595,"line_end":595,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":221258,"byte_end":221261,"line_start":596,"line_end":596,"column_start":2,"column_end":5}},{"value":"/ let mut slice = [0u8; 2];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":221263,"byte_end":221292,"line_start":597,"line_end":597,"column_start":2,"column_end":31}},{"value":"/ let bits = BitSlice::<Lsb0, _>::from_slice_mut(&mut slice).unwrap();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":221294,"byte_end":221366,"line_start":598,"line_end":598,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":221368,"byte_end":221371,"line_start":599,"line_end":599,"column_start":2,"column_end":5}},{"value":"/ assert!(!bits[0]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":221373,"byte_end":221395,"line_start":600,"line_end":600,"column_start":2,"column_end":24}},{"value":"/ bits.set(0, true);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":221397,"byte_end":221419,"line_start":601,"line_end":601,"column_start":2,"column_end":24}},{"value":"/ assert!(bits[0]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":221421,"byte_end":221442,"line_start":602,"line_end":602,"column_start":2,"column_end":23}},{"value":"/ assert_eq!(slice[0], 1);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":221444,"byte_end":221472,"line_start":603,"line_end":603,"column_start":2,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":221474,"byte_end":221481,"line_start":604,"line_end":604,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":221483,"byte_end":221486,"line_start":605,"line_end":605,"column_start":2,"column_end":5}},{"value":"/ This example attempts to construct a `&mut BitSlice` handle from a slice","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":221488,"byte_end":221564,"line_start":606,"line_end":606,"column_start":2,"column_end":78}},{"value":"/ that is too large to index. Either the `vec!` allocation will fail, or","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":221566,"byte_end":221640,"line_start":607,"line_end":607,"column_start":2,"column_end":76}},{"value":"/ the bit-slice constructor will fail.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":221642,"byte_end":221682,"line_start":608,"line_end":608,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":221684,"byte_end":221687,"line_start":609,"line_end":609,"column_start":2,"column_end":5}},{"value":"/ ```rust,should_panic","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":221689,"byte_end":221713,"line_start":610,"line_end":610,"column_start":2,"column_end":26}},{"value":"/ # #[cfg(feature = \"alloc\")] {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":221715,"byte_end":221748,"line_start":611,"line_end":611,"column_start":2,"column_end":35}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":221750,"byte_end":221777,"line_start":612,"line_end":612,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":221779,"byte_end":221782,"line_start":613,"line_end":613,"column_start":2,"column_end":5}},{"value":"/ let mut data = vec![0usize; BitSlice::<LocalBits, usize>::MAX_ELTS];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":221784,"byte_end":221856,"line_start":614,"line_end":614,"column_start":2,"column_end":74}},{"value":"/ let bits = BitSlice::<LocalBits, _>::from_slice_mut(&mut data[..]).unwrap();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":221858,"byte_end":221938,"line_start":615,"line_end":615,"column_start":2,"column_end":82}},{"value":"/ # }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":221940,"byte_end":221947,"line_start":616,"line_end":616,"column_start":2,"column_end":9}},{"value":"/ # #[cfg(not(feature = \"alloc\"))] panic!(\"No allocator present\");","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":221949,"byte_end":222017,"line_start":617,"line_end":617,"column_start":2,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":222019,"byte_end":222026,"line_start":618,"line_end":618,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":222028,"byte_end":222031,"line_start":619,"line_end":619,"column_start":2,"column_end":5}},{"value":"/ [`BitView`]: ../view/trait.BitView.html","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":222033,"byte_end":222076,"line_start":620,"line_end":620,"column_start":2,"column_end":45}},{"value":"/ [`.view_bits_mut::<O>()`]:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":222078,"byte_end":222108,"line_start":621,"line_end":621,"column_start":2,"column_end":32}},{"value":"/ ../view/trait.BitView.html#method.view_bits_mut","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":222110,"byte_end":222161,"line_start":622,"line_end":622,"column_start":2,"column_end":53}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":222163,"byte_end":222172,"line_start":623,"line_end":623,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1277},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":222846,"byte_end":222870,"line_start":646,"line_end":646,"column_start":16,"column_end":40},"name":"from_slice_unchecked_mut","qualname":"<BitSlice<O, T>>::from_slice_unchecked_mut","value":"pub unsafe fn from_slice_unchecked_mut(&mut [T]) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Converts a slice reference into a `BitSlice` reference without checking\n that its size can be safely used.","sig":null,"attributes":[{"value":"/ Converts a slice reference into a `BitSlice` reference without checking","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":222374,"byte_end":222449,"line_start":632,"line_end":632,"column_start":2,"column_end":77}},{"value":"/ that its size can be safely used.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":222451,"byte_end":222488,"line_start":633,"line_end":633,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":222490,"byte_end":222493,"line_start":634,"line_end":634,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":222495,"byte_end":222507,"line_start":635,"line_end":635,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":222509,"byte_end":222512,"line_start":636,"line_end":636,"column_start":2,"column_end":5}},{"value":"/ If the `slice` length is too long, then it will be capped at","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":222514,"byte_end":222578,"line_start":637,"line_end":637,"column_start":2,"column_end":66}},{"value":"/ [`MAX_BITS`]. You are responsible for ensuring that the input slice is","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":222580,"byte_end":222654,"line_start":638,"line_end":638,"column_start":2,"column_end":76}},{"value":"/ not unduly truncated.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":222656,"byte_end":222681,"line_start":639,"line_end":639,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":222683,"byte_end":222686,"line_start":640,"line_end":640,"column_start":2,"column_end":5}},{"value":"/ Prefer [`from_slice_mut`].","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":222688,"byte_end":222718,"line_start":641,"line_end":641,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":222720,"byte_end":222723,"line_start":642,"line_end":642,"column_start":2,"column_end":5}},{"value":"/ [`MAX_BITS`]: #associatedconstant.MAX_BITS","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":222725,"byte_end":222771,"line_start":643,"line_end":643,"column_start":2,"column_end":48}},{"value":"/ [`from_slice_mut`]: #method.from_slice_mut","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":222773,"byte_end":222819,"line_start":644,"line_end":644,"column_start":2,"column_end":48}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":222821,"byte_end":222830,"line_start":645,"line_end":645,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1281},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":223460,"byte_end":223465,"line_start":671,"line_end":671,"column_start":9,"column_end":14},"name":"empty","qualname":"<BitSlice<O, T>>::empty","value":"pub fn empty<'a>() -> &'a Self","parent":null,"children":[],"decl_id":null,"docs":" Produces the empty slice. This is equivalent to `&[]` for ordinary\n slices.","sig":null,"attributes":[{"value":"/ Produces the empty slice. This is equivalent to `&[]` for ordinary","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":223198,"byte_end":223268,"line_start":659,"line_end":659,"column_start":2,"column_end":72}},{"value":"/ slices.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":223270,"byte_end":223281,"line_start":660,"line_end":660,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":223283,"byte_end":223286,"line_start":661,"line_end":661,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":223288,"byte_end":223302,"line_start":662,"line_end":662,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":223304,"byte_end":223307,"line_start":663,"line_end":663,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":223309,"byte_end":223320,"line_start":664,"line_end":664,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":223322,"byte_end":223349,"line_start":665,"line_end":665,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":223351,"byte_end":223354,"line_start":666,"line_end":666,"column_start":2,"column_end":5}},{"value":"/ let bits: &BitSlice = BitSlice::empty();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":223356,"byte_end":223400,"line_start":667,"line_end":667,"column_start":2,"column_end":46}},{"value":"/ assert!(bits.is_empty());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":223402,"byte_end":223431,"line_start":668,"line_end":668,"column_start":2,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":223433,"byte_end":223440,"line_start":669,"line_end":669,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":223442,"byte_end":223451,"line_start":670,"line_end":670,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1283},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":223807,"byte_end":223816,"line_start":687,"line_end":687,"column_start":9,"column_end":18},"name":"empty_mut","qualname":"<BitSlice<O, T>>::empty_mut","value":"pub fn empty_mut<'a>() -> &'a mut Self","parent":null,"children":[],"decl_id":null,"docs":" Produces the empty mutable slice. This is equivalent to `&mut []` for\n ordinary slices.","sig":null,"attributes":[{"value":"/ Produces the empty mutable slice. This is equivalent to `&mut []` for","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":223525,"byte_end":223598,"line_start":675,"line_end":675,"column_start":2,"column_end":75}},{"value":"/ ordinary slices.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":223600,"byte_end":223620,"line_start":676,"line_end":676,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":223622,"byte_end":223625,"line_start":677,"line_end":677,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":223627,"byte_end":223641,"line_start":678,"line_end":678,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":223643,"byte_end":223646,"line_start":679,"line_end":679,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":223648,"byte_end":223659,"line_start":680,"line_end":680,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":223661,"byte_end":223688,"line_start":681,"line_end":681,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":223690,"byte_end":223693,"line_start":682,"line_end":682,"column_start":2,"column_end":5}},{"value":"/ let bits: &mut BitSlice = BitSlice::empty_mut();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":223695,"byte_end":223747,"line_start":683,"line_end":683,"column_start":2,"column_end":54}},{"value":"/ assert!(bits.is_empty());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":223749,"byte_end":223778,"line_start":684,"line_end":684,"column_start":2,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":223780,"byte_end":223787,"line_start":685,"line_end":685,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":223789,"byte_end":223798,"line_start":686,"line_end":686,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1285},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":224836,"byte_end":224839,"line_start":731,"line_end":731,"column_start":9,"column_end":12},"name":"set","qualname":"<BitSlice<O, T>>::set","value":"pub fn set(&mut Self, usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Sets the bit value at the given position.","sig":null,"attributes":[{"value":"/ Sets the bit value at the given position.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":223880,"byte_end":223925,"line_start":691,"line_end":691,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":223927,"byte_end":223930,"line_start":692,"line_end":692,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":223932,"byte_end":223948,"line_start":693,"line_end":693,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":223950,"byte_end":223953,"line_start":694,"line_end":694,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":223955,"byte_end":223972,"line_start":695,"line_end":695,"column_start":2,"column_end":19}},{"value":"/ - `index`: The bit index to set. It must be in the range `0 ..","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":223974,"byte_end":224040,"line_start":696,"line_end":696,"column_start":2,"column_end":68}},{"value":"/   self.len()`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":224042,"byte_end":224060,"line_start":697,"line_end":697,"column_start":2,"column_end":20}},{"value":"/ - `value`: The value to be set, `true` for `1` and `false` for `0`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":224062,"byte_end":224133,"line_start":698,"line_end":698,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":224135,"byte_end":224138,"line_start":699,"line_end":699,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":224140,"byte_end":224153,"line_start":700,"line_end":700,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":224155,"byte_end":224158,"line_start":701,"line_end":701,"column_start":2,"column_end":5}},{"value":"/ If `index` is valid, then the bit to which it refers is set to `value`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":224160,"byte_end":224235,"line_start":702,"line_end":702,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":224237,"byte_end":224240,"line_start":703,"line_end":703,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":224242,"byte_end":224254,"line_start":704,"line_end":704,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":224256,"byte_end":224259,"line_start":705,"line_end":705,"column_start":2,"column_end":5}},{"value":"/ This method panics if `index` is outside the slice domain.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":224261,"byte_end":224323,"line_start":706,"line_end":706,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":224325,"byte_end":224328,"line_start":707,"line_end":707,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":224330,"byte_end":224344,"line_start":708,"line_end":708,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":224346,"byte_end":224349,"line_start":709,"line_end":709,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":224351,"byte_end":224362,"line_start":710,"line_end":710,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":224364,"byte_end":224391,"line_start":711,"line_end":711,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":224393,"byte_end":224396,"line_start":712,"line_end":712,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0u8;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":224398,"byte_end":224421,"line_start":713,"line_end":713,"column_start":2,"column_end":25}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":224423,"byte_end":224467,"line_start":714,"line_end":714,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":224469,"byte_end":224472,"line_start":715,"line_end":715,"column_start":2,"column_end":5}},{"value":"/ assert!(!bits.get(7).unwrap());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":224474,"byte_end":224509,"line_start":716,"line_end":716,"column_start":2,"column_end":37}},{"value":"/ bits.set(7, true);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":224511,"byte_end":224533,"line_start":717,"line_end":717,"column_start":2,"column_end":24}},{"value":"/ assert!(bits.get(7).unwrap());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":224535,"byte_end":224569,"line_start":718,"line_end":718,"column_start":2,"column_end":36}},{"value":"/ assert_eq!(data, 1);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":224571,"byte_end":224595,"line_start":719,"line_end":719,"column_start":2,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":224597,"byte_end":224604,"line_start":720,"line_end":720,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":224606,"byte_end":224609,"line_start":721,"line_end":721,"column_start":2,"column_end":5}},{"value":"/ This example panics when it attempts to set a bit that is out of bounds.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":224611,"byte_end":224687,"line_start":722,"line_end":722,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":224689,"byte_end":224692,"line_start":723,"line_end":723,"column_start":2,"column_end":5}},{"value":"/ ```rust,should_panic","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":224694,"byte_end":224718,"line_start":724,"line_end":724,"column_start":2,"column_end":26}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":224720,"byte_end":224747,"line_start":725,"line_end":725,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":224749,"byte_end":224752,"line_start":726,"line_end":726,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":224754,"byte_end":224782,"line_start":727,"line_end":727,"column_start":2,"column_end":30}},{"value":"/ bits.set(1, false);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":224784,"byte_end":224807,"line_start":728,"line_end":728,"column_start":2,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":224809,"byte_end":224816,"line_start":729,"line_end":729,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":224818,"byte_end":224827,"line_start":730,"line_end":730,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1286},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226359,"byte_end":226372,"line_start":785,"line_end":785,"column_start":16,"column_end":29},"name":"set_unchecked","qualname":"<BitSlice<O, T>>::set_unchecked","value":"pub unsafe fn set_unchecked(&mut Self, usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Sets a bit at an index, without checking boundary conditions.","sig":null,"attributes":[{"value":"/ Sets a bit at an index, without checking boundary conditions.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":225029,"byte_end":225094,"line_start":739,"line_end":739,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":225096,"byte_end":225099,"line_start":740,"line_end":740,"column_start":2,"column_end":5}},{"value":"/ This is generally not recommended; use with caution! For a safe","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":225101,"byte_end":225168,"line_start":741,"line_end":741,"column_start":2,"column_end":69}},{"value":"/ alternative, see [`set`].","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":225170,"byte_end":225199,"line_start":742,"line_end":742,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":225201,"byte_end":225204,"line_start":743,"line_end":743,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":225206,"byte_end":225222,"line_start":744,"line_end":744,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":225224,"byte_end":225227,"line_start":745,"line_end":745,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":225229,"byte_end":225246,"line_start":746,"line_end":746,"column_start":2,"column_end":19}},{"value":"/ - `index`: The bit index to set. It must be in the range `0 ..","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":225248,"byte_end":225314,"line_start":747,"line_end":747,"column_start":2,"column_end":68}},{"value":"/   self.len()`. It will not be checked.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":225316,"byte_end":225358,"line_start":748,"line_end":748,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":225360,"byte_end":225363,"line_start":749,"line_end":749,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":225365,"byte_end":225378,"line_start":750,"line_end":750,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":225380,"byte_end":225383,"line_start":751,"line_end":751,"column_start":2,"column_end":5}},{"value":"/ The bit at `index` is set to `value`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":225385,"byte_end":225426,"line_start":752,"line_end":752,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":225428,"byte_end":225431,"line_start":753,"line_end":753,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":225433,"byte_end":225445,"line_start":754,"line_end":754,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":225447,"byte_end":225450,"line_start":755,"line_end":755,"column_start":2,"column_end":5}},{"value":"/ This method is **not** safe. It performs raw pointer arithmetic to seek","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":225452,"byte_end":225527,"line_start":756,"line_end":756,"column_start":2,"column_end":77}},{"value":"/ from the start of the slice to the requested index, and set the bit","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":225529,"byte_end":225600,"line_start":757,"line_end":757,"column_start":2,"column_end":73}},{"value":"/ there. It does not inspect the length of `self`, and it is free to","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":225602,"byte_end":225672,"line_start":758,"line_end":758,"column_start":2,"column_end":72}},{"value":"/ perform out-of-bounds memory *write* access.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":225674,"byte_end":225722,"line_start":759,"line_end":759,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":225724,"byte_end":225727,"line_start":760,"line_end":760,"column_start":2,"column_end":5}},{"value":"/ Use this method **only** when you have already performed the bounds","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":225729,"byte_end":225800,"line_start":761,"line_end":761,"column_start":2,"column_end":73}},{"value":"/ check, and can guarantee that the call occurs with a safely in-bounds","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":225802,"byte_end":225875,"line_start":762,"line_end":762,"column_start":2,"column_end":75}},{"value":"/ index.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":225877,"byte_end":225887,"line_start":763,"line_end":763,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":225889,"byte_end":225892,"line_start":764,"line_end":764,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":225894,"byte_end":225908,"line_start":765,"line_end":765,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":225910,"byte_end":225913,"line_start":766,"line_end":766,"column_start":2,"column_end":5}},{"value":"/ This example uses a bit slice of length 2, and demonstrates","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":225915,"byte_end":225978,"line_start":767,"line_end":767,"column_start":2,"column_end":65}},{"value":"/ out-of-bounds access to the last bit in the element.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":225980,"byte_end":226036,"line_start":768,"line_end":768,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226038,"byte_end":226041,"line_start":769,"line_end":769,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226043,"byte_end":226054,"line_start":770,"line_end":770,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226056,"byte_end":226083,"line_start":771,"line_end":771,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226085,"byte_end":226088,"line_start":772,"line_end":772,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0u8;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226090,"byte_end":226113,"line_start":773,"line_end":773,"column_start":2,"column_end":25}},{"value":"/ let bits = &mut data.view_bits_mut::<Msb0>()[2 .. 4];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226115,"byte_end":226172,"line_start":774,"line_end":774,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226174,"byte_end":226177,"line_start":775,"line_end":775,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits.len(), 2);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226179,"byte_end":226209,"line_start":776,"line_end":776,"column_start":2,"column_end":32}},{"value":"/ unsafe {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226211,"byte_end":226223,"line_start":777,"line_end":777,"column_start":2,"column_end":14}},{"value":"/   bits.set_unchecked(5, true);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226225,"byte_end":226259,"line_start":778,"line_end":778,"column_start":2,"column_end":36}},{"value":"/ }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226261,"byte_end":226266,"line_start":779,"line_end":779,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(data, 1);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226268,"byte_end":226292,"line_start":780,"line_end":780,"column_start":2,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226294,"byte_end":226301,"line_start":781,"line_end":781,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226303,"byte_end":226306,"line_start":782,"line_end":782,"column_start":2,"column_end":5}},{"value":"/ [`set`]: #method.set","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226308,"byte_end":226332,"line_start":783,"line_end":783,"column_start":2,"column_end":26}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226334,"byte_end":226343,"line_start":784,"line_end":784,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1287},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226993,"byte_end":226996,"line_start":819,"line_end":819,"column_start":9,"column_end":12},"name":"all","qualname":"<BitSlice<O, T>>::all","value":"pub fn all(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if *all* bits in the slice domain are set (logical `∧`).","sig":null,"attributes":[{"value":"/ Tests if *all* bits in the slice domain are set (logical `∧`).","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226460,"byte_end":226528,"line_start":789,"line_end":789,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226530,"byte_end":226533,"line_start":790,"line_end":790,"column_start":2,"column_end":5}},{"value":"/ # Truth Table","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226535,"byte_end":226552,"line_start":791,"line_end":791,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226554,"byte_end":226557,"line_start":792,"line_end":792,"column_start":2,"column_end":5}},{"value":"/ ```text","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226559,"byte_end":226570,"line_start":793,"line_end":793,"column_start":2,"column_end":13}},{"value":"/ 0 0 => 0","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226572,"byte_end":226584,"line_start":794,"line_end":794,"column_start":2,"column_end":14}},{"value":"/ 0 1 => 0","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226586,"byte_end":226598,"line_start":795,"line_end":795,"column_start":2,"column_end":14}},{"value":"/ 1 0 => 0","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226600,"byte_end":226612,"line_start":796,"line_end":796,"column_start":2,"column_end":14}},{"value":"/ 1 1 => 1","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226614,"byte_end":226626,"line_start":797,"line_end":797,"column_start":2,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226628,"byte_end":226635,"line_start":798,"line_end":798,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226637,"byte_end":226640,"line_start":799,"line_end":799,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226642,"byte_end":226658,"line_start":800,"line_end":800,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226660,"byte_end":226663,"line_start":801,"line_end":801,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226665,"byte_end":226678,"line_start":802,"line_end":802,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226680,"byte_end":226683,"line_start":803,"line_end":803,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226685,"byte_end":226698,"line_start":804,"line_end":804,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226700,"byte_end":226703,"line_start":805,"line_end":805,"column_start":2,"column_end":5}},{"value":"/ Whether all bits in the slice domain are set. The empty slice returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226705,"byte_end":226778,"line_start":806,"line_end":806,"column_start":2,"column_end":75}},{"value":"/ `true`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226780,"byte_end":226791,"line_start":807,"line_end":807,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226793,"byte_end":226796,"line_start":808,"line_end":808,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226798,"byte_end":226812,"line_start":809,"line_end":809,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226814,"byte_end":226817,"line_start":810,"line_end":810,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226819,"byte_end":226830,"line_start":811,"line_end":811,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226832,"byte_end":226859,"line_start":812,"line_end":812,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226861,"byte_end":226864,"line_start":813,"line_end":813,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1, 1, 0, 1];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226866,"byte_end":226899,"line_start":814,"line_end":814,"column_start":2,"column_end":35}},{"value":"/ assert!(bits[.. 2].all());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226901,"byte_end":226931,"line_start":815,"line_end":815,"column_start":2,"column_end":32}},{"value":"/ assert!(!bits[2 ..].all());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226933,"byte_end":226964,"line_start":816,"line_end":816,"column_start":2,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226966,"byte_end":226973,"line_start":817,"line_end":817,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":226975,"byte_end":226984,"line_start":818,"line_end":818,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1291},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":228539,"byte_end":228542,"line_start":876,"line_end":876,"column_start":9,"column_end":12},"name":"any","qualname":"<BitSlice<O, T>>::any","value":"pub fn any(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if *any* bit in the slice is set (logical `∨`).","sig":null,"attributes":[{"value":"/ Tests if *any* bit in the slice is set (logical `∨`).","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":228016,"byte_end":228075,"line_start":846,"line_end":846,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":228077,"byte_end":228080,"line_start":847,"line_end":847,"column_start":2,"column_end":5}},{"value":"/ # Truth Table","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":228082,"byte_end":228099,"line_start":848,"line_end":848,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":228101,"byte_end":228104,"line_start":849,"line_end":849,"column_start":2,"column_end":5}},{"value":"/ ```text","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":228106,"byte_end":228117,"line_start":850,"line_end":850,"column_start":2,"column_end":13}},{"value":"/ 0 0 => 0","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":228119,"byte_end":228131,"line_start":851,"line_end":851,"column_start":2,"column_end":14}},{"value":"/ 0 1 => 1","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":228133,"byte_end":228145,"line_start":852,"line_end":852,"column_start":2,"column_end":14}},{"value":"/ 1 0 => 1","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":228147,"byte_end":228159,"line_start":853,"line_end":853,"column_start":2,"column_end":14}},{"value":"/ 1 1 => 1","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":228161,"byte_end":228173,"line_start":854,"line_end":854,"column_start":2,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":228175,"byte_end":228182,"line_start":855,"line_end":855,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":228184,"byte_end":228187,"line_start":856,"line_end":856,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":228189,"byte_end":228205,"line_start":857,"line_end":857,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":228207,"byte_end":228210,"line_start":858,"line_end":858,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":228212,"byte_end":228225,"line_start":859,"line_end":859,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":228227,"byte_end":228230,"line_start":860,"line_end":860,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":228232,"byte_end":228245,"line_start":861,"line_end":861,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":228247,"byte_end":228250,"line_start":862,"line_end":862,"column_start":2,"column_end":5}},{"value":"/ Whether any bit in the slice domain is set. The empty slice returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":228252,"byte_end":228323,"line_start":863,"line_end":863,"column_start":2,"column_end":73}},{"value":"/ `false`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":228325,"byte_end":228337,"line_start":864,"line_end":864,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":228339,"byte_end":228342,"line_start":865,"line_end":865,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":228344,"byte_end":228358,"line_start":866,"line_end":866,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":228360,"byte_end":228363,"line_start":867,"line_end":867,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":228365,"byte_end":228376,"line_start":868,"line_end":868,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":228378,"byte_end":228405,"line_start":869,"line_end":869,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":228407,"byte_end":228410,"line_start":870,"line_end":870,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 0];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":228412,"byte_end":228445,"line_start":871,"line_end":871,"column_start":2,"column_end":35}},{"value":"/ assert!(bits[.. 2].any());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":228447,"byte_end":228477,"line_start":872,"line_end":872,"column_start":2,"column_end":32}},{"value":"/ assert!(!bits[2 ..].any());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":228479,"byte_end":228510,"line_start":873,"line_end":873,"column_start":2,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":228512,"byte_end":228519,"line_start":874,"line_end":874,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":228521,"byte_end":228530,"line_start":875,"line_end":875,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1295},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229528,"byte_end":229535,"line_start":921,"line_end":921,"column_start":9,"column_end":16},"name":"not_all","qualname":"<BitSlice<O, T>>::not_all","value":"pub fn not_all(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if *any* bit in the slice is unset (logical `¬∧`).","sig":null,"attributes":[{"value":"/ Tests if *any* bit in the slice is unset (logical `¬∧`).","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229030,"byte_end":229093,"line_start":892,"line_end":892,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229095,"byte_end":229098,"line_start":893,"line_end":893,"column_start":2,"column_end":5}},{"value":"/ # Truth Table","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229100,"byte_end":229117,"line_start":894,"line_end":894,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229119,"byte_end":229122,"line_start":895,"line_end":895,"column_start":2,"column_end":5}},{"value":"/ ```text","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229124,"byte_end":229135,"line_start":896,"line_end":896,"column_start":2,"column_end":13}},{"value":"/ 0 0 => 1","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229137,"byte_end":229149,"line_start":897,"line_end":897,"column_start":2,"column_end":14}},{"value":"/ 0 1 => 1","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229151,"byte_end":229163,"line_start":898,"line_end":898,"column_start":2,"column_end":14}},{"value":"/ 1 0 => 1","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229165,"byte_end":229177,"line_start":899,"line_end":899,"column_start":2,"column_end":14}},{"value":"/ 1 1 => 0","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229179,"byte_end":229191,"line_start":900,"line_end":900,"column_start":2,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229193,"byte_end":229200,"line_start":901,"line_end":901,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229202,"byte_end":229205,"line_start":902,"line_end":902,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229207,"byte_end":229223,"line_start":903,"line_end":903,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229225,"byte_end":229228,"line_start":904,"line_end":904,"column_start":2,"column_end":5}},{"value":"/ - `&self","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229230,"byte_end":229242,"line_start":905,"line_end":905,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229244,"byte_end":229247,"line_start":906,"line_end":906,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229249,"byte_end":229262,"line_start":907,"line_end":907,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229264,"byte_end":229267,"line_start":908,"line_end":908,"column_start":2,"column_end":5}},{"value":"/ Whether any bit in the slice domain is unset.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229269,"byte_end":229318,"line_start":909,"line_end":909,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229320,"byte_end":229323,"line_start":910,"line_end":910,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229325,"byte_end":229339,"line_start":911,"line_end":911,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229341,"byte_end":229344,"line_start":912,"line_end":912,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229346,"byte_end":229357,"line_start":913,"line_end":913,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229359,"byte_end":229386,"line_start":914,"line_end":914,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229388,"byte_end":229391,"line_start":915,"line_end":915,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1, 1, 0, 1];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229393,"byte_end":229426,"line_start":916,"line_end":916,"column_start":2,"column_end":35}},{"value":"/ assert!(!bits[.. 2].not_all());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229428,"byte_end":229463,"line_start":917,"line_end":917,"column_start":2,"column_end":37}},{"value":"/ assert!(bits[2 ..].not_all());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229465,"byte_end":229499,"line_start":918,"line_end":918,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229501,"byte_end":229508,"line_start":919,"line_end":919,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229510,"byte_end":229519,"line_start":920,"line_end":920,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1296},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230075,"byte_end":230082,"line_start":954,"line_end":954,"column_start":9,"column_end":16},"name":"not_any","qualname":"<BitSlice<O, T>>::not_any","value":"pub fn not_any(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if *all* bits in the slice are unset (logical `¬∨`).","sig":null,"attributes":[{"value":"/ Tests if *all* bits in the slice are unset (logical `¬∨`).","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229572,"byte_end":229637,"line_start":925,"line_end":925,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229639,"byte_end":229642,"line_start":926,"line_end":926,"column_start":2,"column_end":5}},{"value":"/ # Truth Table","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229644,"byte_end":229661,"line_start":927,"line_end":927,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229663,"byte_end":229666,"line_start":928,"line_end":928,"column_start":2,"column_end":5}},{"value":"/ ```text","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229668,"byte_end":229679,"line_start":929,"line_end":929,"column_start":2,"column_end":13}},{"value":"/ 0 0 => 1","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229681,"byte_end":229693,"line_start":930,"line_end":930,"column_start":2,"column_end":14}},{"value":"/ 0 1 => 0","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229695,"byte_end":229707,"line_start":931,"line_end":931,"column_start":2,"column_end":14}},{"value":"/ 1 0 => 0","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229709,"byte_end":229721,"line_start":932,"line_end":932,"column_start":2,"column_end":14}},{"value":"/ 1 1 => 0","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229723,"byte_end":229735,"line_start":933,"line_end":933,"column_start":2,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229737,"byte_end":229744,"line_start":934,"line_end":934,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229746,"byte_end":229749,"line_start":935,"line_end":935,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229751,"byte_end":229767,"line_start":936,"line_end":936,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229769,"byte_end":229772,"line_start":937,"line_end":937,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229774,"byte_end":229787,"line_start":938,"line_end":938,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229789,"byte_end":229792,"line_start":939,"line_end":939,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229794,"byte_end":229807,"line_start":940,"line_end":940,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229809,"byte_end":229812,"line_start":941,"line_end":941,"column_start":2,"column_end":5}},{"value":"/ Whether all bits in the slice domain are unset.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229814,"byte_end":229865,"line_start":942,"line_end":942,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229867,"byte_end":229870,"line_start":943,"line_end":943,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229872,"byte_end":229886,"line_start":944,"line_end":944,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229888,"byte_end":229891,"line_start":945,"line_end":945,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229893,"byte_end":229904,"line_start":946,"line_end":946,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229906,"byte_end":229933,"line_start":947,"line_end":947,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229935,"byte_end":229938,"line_start":948,"line_end":948,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 0];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229940,"byte_end":229973,"line_start":949,"line_end":949,"column_start":2,"column_end":35}},{"value":"/ assert!(!bits[.. 2].not_any());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":229975,"byte_end":230010,"line_start":950,"line_end":950,"column_start":2,"column_end":37}},{"value":"/ assert!(bits[2 ..].not_any());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230012,"byte_end":230046,"line_start":951,"line_end":951,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230048,"byte_end":230055,"line_start":952,"line_end":952,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230057,"byte_end":230066,"line_start":953,"line_end":953,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1297},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230897,"byte_end":230901,"line_start":997,"line_end":997,"column_start":9,"column_end":13},"name":"some","qualname":"<BitSlice<O, T>>::some","value":"pub fn some(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether the slice has some, but not all, bits set and some, but\n not all, bits unset.","sig":null,"attributes":[{"value":"/ Tests whether the slice has some, but not all, bits set and some, but","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230119,"byte_end":230192,"line_start":958,"line_end":958,"column_start":2,"column_end":75}},{"value":"/ not all, bits unset.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230194,"byte_end":230218,"line_start":959,"line_end":959,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230220,"byte_end":230223,"line_start":960,"line_end":960,"column_start":2,"column_end":5}},{"value":"/ This is `false` if either [`.all`] or [`.not_any`] are `true`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230225,"byte_end":230291,"line_start":961,"line_end":961,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230293,"byte_end":230296,"line_start":962,"line_end":962,"column_start":2,"column_end":5}},{"value":"/ # Truth Table","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230298,"byte_end":230315,"line_start":963,"line_end":963,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230317,"byte_end":230320,"line_start":964,"line_end":964,"column_start":2,"column_end":5}},{"value":"/ ```text","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230322,"byte_end":230333,"line_start":965,"line_end":965,"column_start":2,"column_end":13}},{"value":"/ 0 0 => 0","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230335,"byte_end":230347,"line_start":966,"line_end":966,"column_start":2,"column_end":14}},{"value":"/ 0 1 => 1","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230349,"byte_end":230361,"line_start":967,"line_end":967,"column_start":2,"column_end":14}},{"value":"/ 1 0 => 1","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230363,"byte_end":230375,"line_start":968,"line_end":968,"column_start":2,"column_end":14}},{"value":"/ 1 1 => 0","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230377,"byte_end":230389,"line_start":969,"line_end":969,"column_start":2,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230391,"byte_end":230398,"line_start":970,"line_end":970,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230400,"byte_end":230403,"line_start":971,"line_end":971,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230405,"byte_end":230421,"line_start":972,"line_end":972,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230423,"byte_end":230426,"line_start":973,"line_end":973,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230428,"byte_end":230441,"line_start":974,"line_end":974,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230443,"byte_end":230446,"line_start":975,"line_end":975,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230448,"byte_end":230461,"line_start":976,"line_end":976,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230463,"byte_end":230466,"line_start":977,"line_end":977,"column_start":2,"column_end":5}},{"value":"/ Whether the slice domain has mixed content. The empty slice returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230468,"byte_end":230539,"line_start":978,"line_end":978,"column_start":2,"column_end":73}},{"value":"/ `false`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230541,"byte_end":230553,"line_start":979,"line_end":979,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230555,"byte_end":230558,"line_start":980,"line_end":980,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230560,"byte_end":230574,"line_start":981,"line_end":981,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230576,"byte_end":230579,"line_start":982,"line_end":982,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230581,"byte_end":230592,"line_start":983,"line_end":983,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230594,"byte_end":230621,"line_start":984,"line_end":984,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230623,"byte_end":230626,"line_start":985,"line_end":985,"column_start":2,"column_end":5}},{"value":"/ let data = 0b111_000_10u8;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230628,"byte_end":230658,"line_start":986,"line_end":986,"column_start":2,"column_end":32}},{"value":"/ let bits = bits![1, 1, 0, 0, 1, 0];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230660,"byte_end":230699,"line_start":987,"line_end":987,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230701,"byte_end":230704,"line_start":988,"line_end":988,"column_start":2,"column_end":5}},{"value":"/ assert!(!bits[.. 2].some());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230706,"byte_end":230738,"line_start":989,"line_end":989,"column_start":2,"column_end":34}},{"value":"/ assert!(!bits[2 .. 4].some());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230740,"byte_end":230774,"line_start":990,"line_end":990,"column_start":2,"column_end":36}},{"value":"/ assert!(bits.some());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230776,"byte_end":230801,"line_start":991,"line_end":991,"column_start":2,"column_end":27}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230803,"byte_end":230810,"line_start":992,"line_end":992,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230812,"byte_end":230815,"line_start":993,"line_end":993,"column_start":2,"column_end":5}},{"value":"/ [`.all`]: #method.all","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230817,"byte_end":230842,"line_start":994,"line_end":994,"column_start":2,"column_end":27}},{"value":"/ [`.not_any`]: #method.not_any","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230844,"byte_end":230877,"line_start":995,"line_end":995,"column_start":2,"column_end":35}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230879,"byte_end":230888,"line_start":996,"line_end":996,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1298},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":231390,"byte_end":231400,"line_start":1023,"line_end":1023,"column_start":9,"column_end":19},"name":"count_ones","qualname":"<BitSlice<O, T>>::count_ones","value":"pub fn count_ones(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of ones in the memory region backing `self`.","sig":null,"attributes":[{"value":"/ Returns the number of ones in the memory region backing `self`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":230955,"byte_end":231022,"line_start":1001,"line_end":1001,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":231024,"byte_end":231027,"line_start":1002,"line_end":1002,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":231029,"byte_end":231045,"line_start":1003,"line_end":1003,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":231047,"byte_end":231050,"line_start":1004,"line_end":1004,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":231052,"byte_end":231065,"line_start":1005,"line_end":1005,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":231067,"byte_end":231070,"line_start":1006,"line_end":1006,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":231072,"byte_end":231085,"line_start":1007,"line_end":1007,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":231087,"byte_end":231090,"line_start":1008,"line_end":1008,"column_start":2,"column_end":5}},{"value":"/ The number of high bits in the slice domain.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":231092,"byte_end":231140,"line_start":1009,"line_end":1009,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":231142,"byte_end":231145,"line_start":1010,"line_end":1010,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":231147,"byte_end":231161,"line_start":1011,"line_end":1011,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":231163,"byte_end":231166,"line_start":1012,"line_end":1012,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":231168,"byte_end":231184,"line_start":1013,"line_end":1013,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":231186,"byte_end":231189,"line_start":1014,"line_end":1014,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":231191,"byte_end":231202,"line_start":1015,"line_end":1015,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":231204,"byte_end":231231,"line_start":1016,"line_end":1016,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":231233,"byte_end":231236,"line_start":1017,"line_end":1017,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1, 1, 0, 0];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":231238,"byte_end":231271,"line_start":1018,"line_end":1018,"column_start":2,"column_end":35}},{"value":"/ assert_eq!(bits[.. 2].count_ones(), 2);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":231273,"byte_end":231316,"line_start":1019,"line_end":1019,"column_start":2,"column_end":45}},{"value":"/ assert_eq!(bits[2 ..].count_ones(), 0);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":231318,"byte_end":231361,"line_start":1020,"line_end":1020,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":231363,"byte_end":231370,"line_start":1021,"line_end":1021,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":231372,"byte_end":231381,"line_start":1022,"line_end":1022,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1302},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":232428,"byte_end":232439,"line_start":1069,"line_end":1069,"column_start":9,"column_end":20},"name":"count_zeros","qualname":"<BitSlice<O, T>>::count_zeros","value":"pub fn count_zeros(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of zeros in the memory region backing `self`.","sig":null,"attributes":[{"value":"/ Returns the number of zeros in the memory region backing `self`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":231991,"byte_end":232059,"line_start":1047,"line_end":1047,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":232061,"byte_end":232064,"line_start":1048,"line_end":1048,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":232066,"byte_end":232082,"line_start":1049,"line_end":1049,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":232084,"byte_end":232087,"line_start":1050,"line_end":1050,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":232089,"byte_end":232102,"line_start":1051,"line_end":1051,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":232104,"byte_end":232107,"line_start":1052,"line_end":1052,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":232109,"byte_end":232122,"line_start":1053,"line_end":1053,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":232124,"byte_end":232127,"line_start":1054,"line_end":1054,"column_start":2,"column_end":5}},{"value":"/ The number of low bits in the slice domain.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":232129,"byte_end":232176,"line_start":1055,"line_end":1055,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":232178,"byte_end":232181,"line_start":1056,"line_end":1056,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":232183,"byte_end":232197,"line_start":1057,"line_end":1057,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":232199,"byte_end":232202,"line_start":1058,"line_end":1058,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":232204,"byte_end":232220,"line_start":1059,"line_end":1059,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":232222,"byte_end":232225,"line_start":1060,"line_end":1060,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":232227,"byte_end":232238,"line_start":1061,"line_end":1061,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":232240,"byte_end":232267,"line_start":1062,"line_end":1062,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":232269,"byte_end":232272,"line_start":1063,"line_end":1063,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1, 1, 0, 0];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":232274,"byte_end":232307,"line_start":1064,"line_end":1064,"column_start":2,"column_end":35}},{"value":"/ assert_eq!(bits[.. 2].count_zeros(), 0);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":232309,"byte_end":232353,"line_start":1065,"line_end":1065,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(bits[2 ..].count_zeros(), 2);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":232355,"byte_end":232399,"line_start":1066,"line_end":1066,"column_start":2,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":232401,"byte_end":232408,"line_start":1067,"line_end":1067,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":232410,"byte_end":232419,"line_start":1068,"line_end":1068,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1306},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":233619,"byte_end":233626,"line_start":1115,"line_end":1115,"column_start":9,"column_end":16},"name":"set_all","qualname":"<BitSlice<O, T>>::set_all","value":"pub fn set_all(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Sets all bits in the slice to a value.","sig":null,"attributes":[{"value":"/ Sets all bits in the slice to a value.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":233037,"byte_end":233079,"line_start":1093,"line_end":1093,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":233081,"byte_end":233084,"line_start":1094,"line_end":1094,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":233086,"byte_end":233102,"line_start":1095,"line_end":1095,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":233104,"byte_end":233107,"line_start":1096,"line_end":1096,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":233109,"byte_end":233126,"line_start":1097,"line_end":1097,"column_start":2,"column_end":19}},{"value":"/ - `value`: The bit value to which all bits in the slice will be set.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":233128,"byte_end":233200,"line_start":1098,"line_end":1098,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":233202,"byte_end":233205,"line_start":1099,"line_end":1099,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":233207,"byte_end":233221,"line_start":1100,"line_end":1100,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":233223,"byte_end":233226,"line_start":1101,"line_end":1101,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":233228,"byte_end":233239,"line_start":1102,"line_end":1102,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":233241,"byte_end":233268,"line_start":1103,"line_end":1103,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":233270,"byte_end":233273,"line_start":1104,"line_end":1104,"column_start":2,"column_end":5}},{"value":"/ let mut src = 0u8;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":233275,"byte_end":233297,"line_start":1105,"line_end":1105,"column_start":2,"column_end":24}},{"value":"/ let bits = src.view_bits_mut::<Msb0>();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":233299,"byte_end":233342,"line_start":1106,"line_end":1106,"column_start":2,"column_end":45}},{"value":"/ bits[2 .. 6].set_all(true);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":233344,"byte_end":233375,"line_start":1107,"line_end":1107,"column_start":2,"column_end":33}},{"value":"/ assert_eq!(bits.as_slice(), &[0b0011_1100]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":233377,"byte_end":233425,"line_start":1108,"line_end":1108,"column_start":2,"column_end":50}},{"value":"/ bits[3 .. 5].set_all(false);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":233427,"byte_end":233459,"line_start":1109,"line_end":1109,"column_start":2,"column_end":34}},{"value":"/ assert_eq!(bits.as_slice(), &[0b0010_0100]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":233461,"byte_end":233509,"line_start":1110,"line_end":1110,"column_start":2,"column_end":50}},{"value":"/ bits[.. 1].set_all(true);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":233511,"byte_end":233540,"line_start":1111,"line_end":1111,"column_start":2,"column_end":31}},{"value":"/ assert_eq!(bits.as_slice(), &[0b1010_0100]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":233542,"byte_end":233590,"line_start":1112,"line_end":1112,"column_start":2,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":233592,"byte_end":233599,"line_start":1113,"line_end":1113,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":233601,"byte_end":233610,"line_start":1114,"line_end":1114,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1307},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":235703,"byte_end":235711,"line_start":1184,"line_end":1184,"column_start":9,"column_end":17},"name":"for_each","qualname":"<BitSlice<O, T>>::for_each","value":"pub fn for_each<F>(&mut Self, F) where F: FnMut(usize, bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Applies a function to each bit in the slice.","sig":null,"attributes":[{"value":"/ Applies a function to each bit in the slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":234743,"byte_end":234791,"line_start":1154,"line_end":1154,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":234793,"byte_end":234796,"line_start":1155,"line_end":1155,"column_start":2,"column_end":5}},{"value":"/ `BitSlice` cannot implement `IndexMut`, as it cannot manifest `&mut","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":234798,"byte_end":234869,"line_start":1156,"line_end":1156,"column_start":2,"column_end":73}},{"value":"/ bool` references, and the [`BitMut`] proxy reference has an unavoidable","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":234871,"byte_end":234946,"line_start":1157,"line_end":1157,"column_start":2,"column_end":77}},{"value":"/ overhead. This method bypasses both problems, by applying a function to","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":234948,"byte_end":235023,"line_start":1158,"line_end":1158,"column_start":2,"column_end":77}},{"value":"/ each pair of index and value in the slice, without constructing a proxy","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":235025,"byte_end":235100,"line_start":1159,"line_end":1159,"column_start":2,"column_end":77}},{"value":"/ reference.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":235102,"byte_end":235116,"line_start":1160,"line_end":1160,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":235118,"byte_end":235121,"line_start":1161,"line_end":1161,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":235123,"byte_end":235139,"line_start":1162,"line_end":1162,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":235141,"byte_end":235144,"line_start":1163,"line_end":1163,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":235146,"byte_end":235163,"line_start":1164,"line_end":1164,"column_start":2,"column_end":19}},{"value":"/ - `func`: A function which receives two arguments, `index: usize` and","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":235165,"byte_end":235238,"line_start":1165,"line_end":1165,"column_start":2,"column_end":75}},{"value":"/   `value: bool`, and returns a `bool`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":235240,"byte_end":235282,"line_start":1166,"line_end":1166,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":235284,"byte_end":235287,"line_start":1167,"line_end":1167,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":235289,"byte_end":235302,"line_start":1168,"line_end":1168,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":235304,"byte_end":235307,"line_start":1169,"line_end":1169,"column_start":2,"column_end":5}},{"value":"/ For each index in the slice, the result of invoking `func` with the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":235309,"byte_end":235380,"line_start":1170,"line_end":1170,"column_start":2,"column_end":73}},{"value":"/ index number and current bit value is written into the slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":235382,"byte_end":235447,"line_start":1171,"line_end":1171,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":235449,"byte_end":235452,"line_start":1172,"line_end":1172,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":235454,"byte_end":235468,"line_start":1173,"line_end":1173,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":235470,"byte_end":235473,"line_start":1174,"line_end":1174,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":235475,"byte_end":235486,"line_start":1175,"line_end":1175,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":235488,"byte_end":235515,"line_start":1176,"line_end":1176,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":235517,"byte_end":235520,"line_start":1177,"line_end":1177,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0u8;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":235522,"byte_end":235545,"line_start":1178,"line_end":1178,"column_start":2,"column_end":25}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":235547,"byte_end":235591,"line_start":1179,"line_end":1179,"column_start":2,"column_end":46}},{"value":"/ bits.for_each(|idx, _bit| idx % 3 == 0);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":235593,"byte_end":235637,"line_start":1180,"line_end":1180,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(data, 0b100_100_10);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":235639,"byte_end":235674,"line_start":1181,"line_end":1181,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":235676,"byte_end":235683,"line_start":1182,"line_end":1182,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":235685,"byte_end":235694,"line_start":1183,"line_end":1183,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1309},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":236827,"byte_end":236835,"line_start":1227,"line_end":1227,"column_start":9,"column_end":17},"name":"as_slice","qualname":"<BitSlice<O, T>>::as_slice","value":"pub fn as_slice(&Self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" Accesses the total backing storage of the `BitSlice`, as a slice of its\n elements.","sig":null,"attributes":[{"value":"/ Accesses the total backing storage of the `BitSlice`, as a slice of its","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":235939,"byte_end":236014,"line_start":1195,"line_end":1195,"column_start":2,"column_end":77}},{"value":"/ elements.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":236016,"byte_end":236029,"line_start":1196,"line_end":1196,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":236031,"byte_end":236034,"line_start":1197,"line_end":1197,"column_start":2,"column_end":5}},{"value":"/ This method produces a slice over all the memory elements it touches,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":236036,"byte_end":236109,"line_start":1198,"line_end":1198,"column_start":2,"column_end":75}},{"value":"/ using the current storage parameter. This is safe to do, as any events","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":236111,"byte_end":236185,"line_start":1199,"line_end":1199,"column_start":2,"column_end":76}},{"value":"/ that would create an aliasing view into the elements covered by the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":236187,"byte_end":236258,"line_start":1200,"line_end":1200,"column_start":2,"column_end":73}},{"value":"/ returned slice will also have caused the slice to use its alias-aware","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":236260,"byte_end":236333,"line_start":1201,"line_end":1201,"column_start":2,"column_end":75}},{"value":"/ type.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":236335,"byte_end":236344,"line_start":1202,"line_end":1202,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":236346,"byte_end":236349,"line_start":1203,"line_end":1203,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":236351,"byte_end":236367,"line_start":1204,"line_end":1204,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":236369,"byte_end":236372,"line_start":1205,"line_end":1205,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":236374,"byte_end":236387,"line_start":1206,"line_end":1206,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":236389,"byte_end":236392,"line_start":1207,"line_end":1207,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":236394,"byte_end":236407,"line_start":1208,"line_end":1208,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":236409,"byte_end":236412,"line_start":1209,"line_end":1209,"column_start":2,"column_end":5}},{"value":"/ A view of the entire memory region this slice covers, including the edge","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":236414,"byte_end":236490,"line_start":1210,"line_end":1210,"column_start":2,"column_end":78}},{"value":"/ elements.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":236492,"byte_end":236505,"line_start":1211,"line_end":1211,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":236507,"byte_end":236510,"line_start":1212,"line_end":1212,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":236512,"byte_end":236526,"line_start":1213,"line_end":1213,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":236528,"byte_end":236531,"line_start":1214,"line_end":1214,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":236533,"byte_end":236544,"line_start":1215,"line_end":1215,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":236546,"byte_end":236573,"line_start":1216,"line_end":1216,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":236575,"byte_end":236578,"line_start":1217,"line_end":1217,"column_start":2,"column_end":5}},{"value":"/ let data = 0x3Cu8;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":236580,"byte_end":236602,"line_start":1218,"line_end":1218,"column_start":2,"column_end":24}},{"value":"/ let bits = &data.view_bits::<LocalBits>()[2 .. 6];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":236604,"byte_end":236658,"line_start":1219,"line_end":1219,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":236660,"byte_end":236663,"line_start":1220,"line_end":1220,"column_start":2,"column_end":5}},{"value":"/ assert!(bits.all());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":236665,"byte_end":236689,"line_start":1221,"line_end":1221,"column_start":2,"column_end":26}},{"value":"/ assert_eq!(bits.len(), 4);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":236691,"byte_end":236721,"line_start":1222,"line_end":1222,"column_start":2,"column_end":32}},{"value":"/ assert_eq!(bits.as_slice(), &[0x3Cu8]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":236723,"byte_end":236766,"line_start":1223,"line_end":1223,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":236768,"byte_end":236775,"line_start":1224,"line_end":1224,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":236777,"byte_end":236786,"line_start":1225,"line_end":1225,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":236788,"byte_end":236818,"line_start":1226,"line_end":1226,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1310},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":238143,"byte_end":238155,"line_start":1275,"line_end":1275,"column_start":9,"column_end":21},"name":"as_raw_slice","qualname":"<BitSlice<O, T>>::as_raw_slice","value":"pub fn as_raw_slice(&Self) -> &[T::Mem]","parent":null,"children":[],"decl_id":null,"docs":" Views the wholly-filled elements of the `BitSlice`.","sig":null,"attributes":[{"value":"/ Views the wholly-filled elements of the `BitSlice`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":237006,"byte_end":237061,"line_start":1233,"line_end":1233,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":237063,"byte_end":237066,"line_start":1234,"line_end":1234,"column_start":2,"column_end":5}},{"value":"/ This will not include partially-owned edge elements, as they may be","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":237068,"byte_end":237139,"line_start":1235,"line_end":1235,"column_start":2,"column_end":73}},{"value":"/ aliased by other handles. To gain access to all elements that the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":237141,"byte_end":237210,"line_start":1236,"line_end":1236,"column_start":2,"column_end":71}},{"value":"/ `BitSlice` region covers, use one of the following:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":237212,"byte_end":237267,"line_start":1237,"line_end":1237,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":237269,"byte_end":237272,"line_start":1238,"line_end":1238,"column_start":2,"column_end":5}},{"value":"/ - [`.as_slice`] produces a shared slice over all elements, marked","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":237274,"byte_end":237343,"line_start":1239,"line_end":1239,"column_start":2,"column_end":71}},{"value":"/   aliased as appropriate.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":237345,"byte_end":237374,"line_start":1240,"line_end":1240,"column_start":2,"column_end":31}},{"value":"/ - [`.domain`] produces a view describing each component of the region,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":237376,"byte_end":237450,"line_start":1241,"line_end":1241,"column_start":2,"column_end":76}},{"value":"/   marking only the contended edges as aliased and the uncontended","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":237452,"byte_end":237521,"line_start":1242,"line_end":1242,"column_start":2,"column_end":71}},{"value":"/   interior as unaliased.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":237523,"byte_end":237551,"line_start":1243,"line_end":1243,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":237553,"byte_end":237556,"line_start":1244,"line_end":1244,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":237558,"byte_end":237574,"line_start":1245,"line_end":1245,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":237576,"byte_end":237579,"line_start":1246,"line_end":1246,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":237581,"byte_end":237594,"line_start":1247,"line_end":1247,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":237596,"byte_end":237599,"line_start":1248,"line_end":1248,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":237601,"byte_end":237614,"line_start":1249,"line_end":1249,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":237616,"byte_end":237619,"line_start":1250,"line_end":1250,"column_start":2,"column_end":5}},{"value":"/ A slice of all the wholly-filled elements in the `BitSlice` backing","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":237621,"byte_end":237692,"line_start":1251,"line_end":1251,"column_start":2,"column_end":73}},{"value":"/ storage.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":237694,"byte_end":237706,"line_start":1252,"line_end":1252,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":237708,"byte_end":237711,"line_start":1253,"line_end":1253,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":237713,"byte_end":237727,"line_start":1254,"line_end":1254,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":237729,"byte_end":237732,"line_start":1255,"line_end":1255,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":237734,"byte_end":237745,"line_start":1256,"line_end":1256,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":237747,"byte_end":237774,"line_start":1257,"line_end":1257,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":237776,"byte_end":237779,"line_start":1258,"line_end":1258,"column_start":2,"column_end":5}},{"value":"/ let data = [1u8, 66];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":237781,"byte_end":237806,"line_start":1259,"line_end":1259,"column_start":2,"column_end":27}},{"value":"/ let bits = data.view_bits::<Msb0>();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":237808,"byte_end":237848,"line_start":1260,"line_end":1260,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":237850,"byte_end":237853,"line_start":1261,"line_end":1261,"column_start":2,"column_end":5}},{"value":"/ let accum = bits","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":237855,"byte_end":237875,"line_start":1262,"line_end":1262,"column_start":2,"column_end":22}},{"value":"/   .as_raw_slice()","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":237877,"byte_end":237898,"line_start":1263,"line_end":1263,"column_start":2,"column_end":23}},{"value":"/   .iter()","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":237900,"byte_end":237913,"line_start":1264,"line_end":1264,"column_start":2,"column_end":15}},{"value":"/   .copied()","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":237915,"byte_end":237930,"line_start":1265,"line_end":1265,"column_start":2,"column_end":17}},{"value":"/   .map(u8::count_ones)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":237932,"byte_end":237958,"line_start":1266,"line_end":1266,"column_start":2,"column_end":28}},{"value":"/   .sum::<u32>();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":237960,"byte_end":237980,"line_start":1267,"line_end":1267,"column_start":2,"column_end":22}},{"value":"/ assert_eq!(accum, 3);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":237982,"byte_end":238007,"line_start":1268,"line_end":1268,"column_start":2,"column_end":27}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":238009,"byte_end":238016,"line_start":1269,"line_end":1269,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":238018,"byte_end":238021,"line_start":1270,"line_end":1270,"column_start":2,"column_end":5}},{"value":"/ [`.as_slice`]: #method.as_slice","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":238023,"byte_end":238058,"line_start":1271,"line_end":1271,"column_start":2,"column_end":37}},{"value":"/ [`.domain`]: #method.domain","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":238060,"byte_end":238091,"line_start":1272,"line_end":1272,"column_start":2,"column_end":33}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":238093,"byte_end":238102,"line_start":1273,"line_end":1273,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":238104,"byte_end":238134,"line_start":1274,"line_end":1274,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1312},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":239409,"byte_end":239425,"line_start":1317,"line_end":1317,"column_start":9,"column_end":25},"name":"as_raw_slice_mut","qualname":"<BitSlice<O, T>>::as_raw_slice_mut","value":"pub fn as_raw_slice_mut(&mut Self) -> &mut [T::Mem]","parent":null,"children":[],"decl_id":null,"docs":" Views the wholly-filled elements of the `BitSlice`.","sig":null,"attributes":[{"value":"/ Views the wholly-filled elements of the `BitSlice`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":238235,"byte_end":238290,"line_start":1279,"line_end":1279,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":238292,"byte_end":238295,"line_start":1280,"line_end":1280,"column_start":2,"column_end":5}},{"value":"/ This will not include partially-owned edge elements, as they may be","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":238297,"byte_end":238368,"line_start":1281,"line_end":1281,"column_start":2,"column_end":73}},{"value":"/ aliased by other handles. To gain access to all elements that the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":238370,"byte_end":238439,"line_start":1282,"line_end":1282,"column_start":2,"column_end":71}},{"value":"/ `BitSlice` region covers, use one of the following:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":238441,"byte_end":238496,"line_start":1283,"line_end":1283,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":238498,"byte_end":238501,"line_start":1284,"line_end":1284,"column_start":2,"column_end":5}},{"value":"/ - [`.as_aliased_slice`] produces a shared slice over all elements,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":238503,"byte_end":238573,"line_start":1285,"line_end":1285,"column_start":2,"column_end":72}},{"value":"/   marked as aliased to allow for the possibliity of mutation.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":238575,"byte_end":238640,"line_start":1286,"line_end":1286,"column_start":2,"column_end":67}},{"value":"/ - [`.domain_mut`] produces a view describing each component of the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":238642,"byte_end":238712,"line_start":1287,"line_end":1287,"column_start":2,"column_end":72}},{"value":"/   region, marking only the contended edges as aliased and the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":238714,"byte_end":238779,"line_start":1288,"line_end":1288,"column_start":2,"column_end":67}},{"value":"/   uncontended interior as unaliased.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":238781,"byte_end":238821,"line_start":1289,"line_end":1289,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":238823,"byte_end":238826,"line_start":1290,"line_end":1290,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":238828,"byte_end":238844,"line_start":1291,"line_end":1291,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":238846,"byte_end":238849,"line_start":1292,"line_end":1292,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":238851,"byte_end":238868,"line_start":1293,"line_end":1293,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":238870,"byte_end":238873,"line_start":1294,"line_end":1294,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":238875,"byte_end":238888,"line_start":1295,"line_end":1295,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":238890,"byte_end":238893,"line_start":1296,"line_end":1296,"column_start":2,"column_end":5}},{"value":"/ A mutable slice of all the wholly-filled elements in the `BitSlice`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":238895,"byte_end":238966,"line_start":1297,"line_end":1297,"column_start":2,"column_end":73}},{"value":"/ backing storage.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":238968,"byte_end":238988,"line_start":1298,"line_end":1298,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":238990,"byte_end":238993,"line_start":1299,"line_end":1299,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":238995,"byte_end":239009,"line_start":1300,"line_end":1300,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":239011,"byte_end":239014,"line_start":1301,"line_end":1301,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":239016,"byte_end":239027,"line_start":1302,"line_end":1302,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":239029,"byte_end":239056,"line_start":1303,"line_end":1303,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":239058,"byte_end":239061,"line_start":1304,"line_end":1304,"column_start":2,"column_end":5}},{"value":"/ let mut data = [1u8, 64];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":239063,"byte_end":239092,"line_start":1305,"line_end":1305,"column_start":2,"column_end":31}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":239094,"byte_end":239138,"line_start":1306,"line_end":1306,"column_start":2,"column_end":46}},{"value":"/ for elt in bits.as_raw_slice_mut() {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":239140,"byte_end":239180,"line_start":1307,"line_end":1307,"column_start":2,"column_end":42}},{"value":"/   *elt |= 2;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":239182,"byte_end":239198,"line_start":1308,"line_end":1308,"column_start":2,"column_end":18}},{"value":"/ }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":239200,"byte_end":239205,"line_start":1309,"line_end":1309,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(&[3, 66], bits.as_slice());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":239207,"byte_end":239249,"line_start":1310,"line_end":1310,"column_start":2,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":239251,"byte_end":239258,"line_start":1311,"line_end":1311,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":239260,"byte_end":239263,"line_start":1312,"line_end":1312,"column_start":2,"column_end":5}},{"value":"/ [`.as_aliased_slice`]: #method.as_aliased_slice","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":239265,"byte_end":239316,"line_start":1313,"line_end":1313,"column_start":2,"column_end":53}},{"value":"/ [`.domain_mut`]: #method.domain_mut","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":239318,"byte_end":239357,"line_start":1314,"line_end":1314,"column_start":2,"column_end":41}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":239359,"byte_end":239368,"line_start":1315,"line_end":1315,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":239370,"byte_end":239400,"line_start":1316,"line_end":1316,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1314},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":242646,"byte_end":242656,"line_start":1404,"line_end":1404,"column_start":9,"column_end":19},"name":"bit_domain","qualname":"<BitSlice<O, T>>::bit_domain","value":"pub fn bit_domain(&Self) -> BitDomain<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Splits the slice into the logical components of its memory domain.","sig":null,"attributes":[{"value":"/ Splits the slice into the logical components of its memory domain.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":239521,"byte_end":239591,"line_start":1321,"line_end":1321,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":239593,"byte_end":239596,"line_start":1322,"line_end":1322,"column_start":2,"column_end":5}},{"value":"/ This produces a set of read-only subslices, marking as much as possible","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":239598,"byte_end":239673,"line_start":1323,"line_end":1323,"column_start":2,"column_end":77}},{"value":"/ as affirmatively lacking any write-capable view (`T::NoAlias`). The","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":239675,"byte_end":239746,"line_start":1324,"line_end":1324,"column_start":2,"column_end":73}},{"value":"/ unaliased view is able to safely perform unsynchronized reads from","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":239748,"byte_end":239818,"line_start":1325,"line_end":1325,"column_start":2,"column_end":72}},{"value":"/ memory without causing undefined behavior, as the type system is able to","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":239820,"byte_end":239896,"line_start":1326,"line_end":1326,"column_start":2,"column_end":78}},{"value":"/ statically prove that no other write-capable views exist.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":239898,"byte_end":239959,"line_start":1327,"line_end":1327,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":239961,"byte_end":239964,"line_start":1328,"line_end":1328,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":239966,"byte_end":239982,"line_start":1329,"line_end":1329,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":239984,"byte_end":239987,"line_start":1330,"line_end":1330,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":239989,"byte_end":240002,"line_start":1331,"line_end":1331,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":240004,"byte_end":240007,"line_start":1332,"line_end":1332,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":240009,"byte_end":240022,"line_start":1333,"line_end":1333,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":240024,"byte_end":240027,"line_start":1334,"line_end":1334,"column_start":2,"column_end":5}},{"value":"/ A `BitDomain` structure representing the logical components of the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":240029,"byte_end":240099,"line_start":1335,"line_end":1335,"column_start":2,"column_end":72}},{"value":"/ memory region.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":240101,"byte_end":240119,"line_start":1336,"line_end":1336,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":240121,"byte_end":240124,"line_start":1337,"line_end":1337,"column_start":2,"column_end":5}},{"value":"/ # Safety Exception","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":240126,"byte_end":240148,"line_start":1338,"line_end":1338,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":240150,"byte_end":240153,"line_start":1339,"line_end":1339,"column_start":2,"column_end":5}},{"value":"/ The following snippet describes a means of constructing a `T::NoAlias`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":240155,"byte_end":240229,"line_start":1340,"line_end":1340,"column_start":2,"column_end":76}},{"value":"/ view into memory that is, in fact, aliased:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":240231,"byte_end":240278,"line_start":1341,"line_end":1341,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":240280,"byte_end":240283,"line_start":1342,"line_end":1342,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":240285,"byte_end":240296,"line_start":1343,"line_end":1343,"column_start":2,"column_end":13}},{"value":"/ # #[cfg(feature = \"atomic\")] {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":240298,"byte_end":240332,"line_start":1344,"line_end":1344,"column_start":2,"column_end":36}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":240334,"byte_end":240361,"line_start":1345,"line_end":1345,"column_start":2,"column_end":29}},{"value":"/ use core::sync::atomic::AtomicU8;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":240363,"byte_end":240400,"line_start":1346,"line_end":1346,"column_start":2,"column_end":39}},{"value":"/ type Bs<T> = BitSlice<LocalBits, T>;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":240402,"byte_end":240442,"line_start":1347,"line_end":1347,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":240444,"byte_end":240447,"line_start":1348,"line_end":1348,"column_start":2,"column_end":5}},{"value":"/ let data = [AtomicU8::new(0), AtomicU8::new(0), AtomicU8::new(0)];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":240449,"byte_end":240519,"line_start":1349,"line_end":1349,"column_start":2,"column_end":72}},{"value":"/ let bits: &Bs<AtomicU8> = data.view_bits::<LocalBits>();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":240521,"byte_end":240581,"line_start":1350,"line_end":1350,"column_start":2,"column_end":62}},{"value":"/ let subslice: &Bs<AtomicU8> = &bits[4 .. 20];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":240583,"byte_end":240632,"line_start":1351,"line_end":1351,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":240634,"byte_end":240637,"line_start":1352,"line_end":1352,"column_start":2,"column_end":5}},{"value":"/ let (_, noalias, _): (_, &Bs<u8>, _) =","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":240639,"byte_end":240681,"line_start":1353,"line_end":1353,"column_start":2,"column_end":44}},{"value":"/   subslice.bit_domain().region().unwrap();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":240683,"byte_end":240729,"line_start":1354,"line_end":1354,"column_start":2,"column_end":48}},{"value":"/ # }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":240731,"byte_end":240738,"line_start":1355,"line_end":1355,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":240740,"byte_end":240747,"line_start":1356,"line_end":1356,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":240749,"byte_end":240752,"line_start":1357,"line_end":1357,"column_start":2,"column_end":5}},{"value":"/ The `noalias` reference, which has memory type `u8`, assumes that it can","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":240754,"byte_end":240830,"line_start":1358,"line_end":1358,"column_start":2,"column_end":78}},{"value":"/ act as an `&u8` reference: unsynchronized loads are permitted, as no","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":240832,"byte_end":240904,"line_start":1359,"line_end":1359,"column_start":2,"column_end":74}},{"value":"/ handle exists which is capable of modifying the middle bit of `data`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":240906,"byte_end":240979,"line_start":1360,"line_end":1360,"column_start":2,"column_end":75}},{"value":"/ This means that LLVM is permitted to issue loads from memory *wherever*","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":240981,"byte_end":241056,"line_start":1361,"line_end":1361,"column_start":2,"column_end":77}},{"value":"/ it wants in the block during which `noalias` is live, as all loads are","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":241058,"byte_end":241132,"line_start":1362,"line_end":1362,"column_start":2,"column_end":76}},{"value":"/ equivalent.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":241134,"byte_end":241149,"line_start":1363,"line_end":1363,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":241151,"byte_end":241154,"line_start":1364,"line_end":1364,"column_start":2,"column_end":5}},{"value":"/ Use of the `bits` or `subslice` handles, which are still live for the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":241156,"byte_end":241229,"line_start":1365,"line_end":1365,"column_start":2,"column_end":75}},{"value":"/ lifetime of `noalias`, to issue [`.set_aliased`] calls into the middle","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":241231,"byte_end":241305,"line_start":1366,"line_end":1366,"column_start":2,"column_end":76}},{"value":"/ element introduce **undefined behavior**. `bitvec` permits safe code to","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":241307,"byte_end":241382,"line_start":1367,"line_end":1367,"column_start":2,"column_end":77}},{"value":"/ introduce this undefined behavior solely because it requires deliberate","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":241384,"byte_end":241459,"line_start":1368,"line_end":1368,"column_start":2,"column_end":77}},{"value":"/ opt-in – you must start from atomic data; this cannot occur when `data`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":241461,"byte_end":241538,"line_start":1369,"line_end":1369,"column_start":2,"column_end":77}},{"value":"/ is non-atomic – and use of the shared-mutation facility simultaneously","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":241540,"byte_end":241616,"line_start":1370,"line_end":1370,"column_start":2,"column_end":76}},{"value":"/ with the unaliasing view.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":241618,"byte_end":241647,"line_start":1371,"line_end":1371,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":241649,"byte_end":241652,"line_start":1372,"line_end":1372,"column_start":2,"column_end":5}},{"value":"/ The [`.set_aliased`] method is speculative, and will be marked as","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":241654,"byte_end":241723,"line_start":1373,"line_end":1373,"column_start":2,"column_end":71}},{"value":"/ `unsafe` or removed at any suspicion that its presence in the library","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":241725,"byte_end":241798,"line_start":1374,"line_end":1374,"column_start":2,"column_end":75}},{"value":"/ has any costs.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":241800,"byte_end":241818,"line_start":1375,"line_end":1375,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":241820,"byte_end":241823,"line_start":1376,"line_end":1376,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":241825,"byte_end":241839,"line_start":1377,"line_end":1377,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":241841,"byte_end":241844,"line_start":1378,"line_end":1378,"column_start":2,"column_end":5}},{"value":"/ This method can be used to accelerate reads from a slice that is marked","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":241846,"byte_end":241921,"line_start":1379,"line_end":1379,"column_start":2,"column_end":77}},{"value":"/ as aliased.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":241923,"byte_end":241938,"line_start":1380,"line_end":1380,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":241940,"byte_end":241943,"line_start":1381,"line_end":1381,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":241945,"byte_end":241956,"line_start":1382,"line_end":1382,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":241958,"byte_end":241985,"line_start":1383,"line_end":1383,"column_start":2,"column_end":29}},{"value":"/ type Bs<T> = BitSlice<LocalBits, T>;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":241987,"byte_end":242027,"line_start":1384,"line_end":1384,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":242029,"byte_end":242032,"line_start":1385,"line_end":1385,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut LocalBits, u8; 0; 24];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":242034,"byte_end":242081,"line_start":1386,"line_end":1386,"column_start":2,"column_end":49}},{"value":"/ let (a, b): (","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":242083,"byte_end":242100,"line_start":1387,"line_end":1387,"column_start":2,"column_end":19}},{"value":"/   &mut Bs<<u8 as BitStore>::Alias>,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":242102,"byte_end":242141,"line_start":1388,"line_end":1388,"column_start":2,"column_end":41}},{"value":"/   &mut Bs<<u8 as BitStore>::Alias>,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":242143,"byte_end":242182,"line_start":1389,"line_end":1389,"column_start":2,"column_end":41}},{"value":"/ ) = bits.split_at_mut(4);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":242184,"byte_end":242213,"line_start":1390,"line_end":1390,"column_start":2,"column_end":31}},{"value":"/ let (partial, full, _): (","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":242215,"byte_end":242244,"line_start":1391,"line_end":1391,"column_start":2,"column_end":31}},{"value":"/   &Bs<<u8 as BitStore>::Alias>,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":242246,"byte_end":242281,"line_start":1392,"line_end":1392,"column_start":2,"column_end":37}},{"value":"/   &Bs<<u8 as BitStore>::Mem>,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":242283,"byte_end":242316,"line_start":1393,"line_end":1393,"column_start":2,"column_end":35}},{"value":"/   _,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":242318,"byte_end":242326,"line_start":1394,"line_end":1394,"column_start":2,"column_end":10}},{"value":"/ ) = b.bit_domain().region().unwrap();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":242328,"byte_end":242369,"line_start":1395,"line_end":1395,"column_start":2,"column_end":43}},{"value":"/ read_from(partial); // uses alias-aware reads","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":242371,"byte_end":242420,"line_start":1396,"line_end":1396,"column_start":2,"column_end":51}},{"value":"/ read_from(full); // uses ordinary reads","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":242422,"byte_end":242465,"line_start":1397,"line_end":1397,"column_start":2,"column_end":45}},{"value":"/ # fn read_from<T: BitStore>(_: &BitSlice<LocalBits, T>) {}","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":242467,"byte_end":242529,"line_start":1398,"line_end":1398,"column_start":2,"column_end":64}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":242531,"byte_end":242538,"line_start":1399,"line_end":1399,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":242540,"byte_end":242543,"line_start":1400,"line_end":1400,"column_start":2,"column_end":5}},{"value":"/ [`.set_aliased`]: #method.set_aliased","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":242545,"byte_end":242586,"line_start":1401,"line_end":1401,"column_start":2,"column_end":43}},{"value":"inline(always)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":242588,"byte_end":242605,"line_start":1402,"line_end":1402,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":242607,"byte_end":242637,"line_start":1403,"line_end":1403,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1315},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":243893,"byte_end":243907,"line_start":1431,"line_end":1431,"column_start":9,"column_end":23},"name":"bit_domain_mut","qualname":"<BitSlice<O, T>>::bit_domain_mut","value":"pub fn bit_domain_mut(&mut Self) -> BitDomainMut<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Splits the slice into the logical components of its memory domain.","sig":null,"attributes":[{"value":"/ Splits the slice into the logical components of its memory domain.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":242713,"byte_end":242783,"line_start":1408,"line_end":1408,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":242785,"byte_end":242788,"line_start":1409,"line_end":1409,"column_start":2,"column_end":5}},{"value":"/ This produces a set of mutable subslices, marking as much as possible as","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":242790,"byte_end":242866,"line_start":1410,"line_end":1410,"column_start":2,"column_end":78}},{"value":"/ affirmatively lacking any other view (`T::Mem`). The bare view is able","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":242868,"byte_end":242942,"line_start":1411,"line_end":1411,"column_start":2,"column_end":76}},{"value":"/ to safely perform unsynchronized reads from and writes to memory without","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":242944,"byte_end":243020,"line_start":1412,"line_end":1412,"column_start":2,"column_end":78}},{"value":"/ causing undefined behavior, as the type system is able to statically","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":243022,"byte_end":243094,"line_start":1413,"line_end":1413,"column_start":2,"column_end":74}},{"value":"/ prove that no other views exist.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":243096,"byte_end":243132,"line_start":1414,"line_end":1414,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":243134,"byte_end":243137,"line_start":1415,"line_end":1415,"column_start":2,"column_end":5}},{"value":"/ # Why This Is More Sound Than `.bit_domain`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":243139,"byte_end":243186,"line_start":1416,"line_end":1416,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":243188,"byte_end":243191,"line_start":1417,"line_end":1417,"column_start":2,"column_end":5}},{"value":"/ The `&mut` exclusion rule makes it impossible to construct two","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":243193,"byte_end":243259,"line_start":1418,"line_end":1418,"column_start":2,"column_end":68}},{"value":"/ references over the same memory where one of them is marked `&mut`. This","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":243261,"byte_end":243337,"line_start":1419,"line_end":1419,"column_start":2,"column_end":78}},{"value":"/ makes it impossible to hold a live reference to memory *separately* from","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":243339,"byte_end":243415,"line_start":1420,"line_end":1420,"column_start":2,"column_end":78}},{"value":"/ any references produced from this method. For the duration of all","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":243417,"byte_end":243486,"line_start":1421,"line_end":1421,"column_start":2,"column_end":71}},{"value":"/ references produced by this method, all ancestor references used to","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":243488,"byte_end":243559,"line_start":1422,"line_end":1422,"column_start":2,"column_end":73}},{"value":"/ reach this method call are either suspended or dead, and the compiler","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":243561,"byte_end":243634,"line_start":1423,"line_end":1423,"column_start":2,"column_end":75}},{"value":"/ will not allow you to use them.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":243636,"byte_end":243671,"line_start":1424,"line_end":1424,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":243673,"byte_end":243676,"line_start":1425,"line_end":1425,"column_start":2,"column_end":5}},{"value":"/ As such, this method cannot introduce undefined behavior where a","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":243678,"byte_end":243746,"line_start":1426,"line_end":1426,"column_start":2,"column_end":70}},{"value":"/ reference incorrectly believes that the referent memory region is","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":243748,"byte_end":243817,"line_start":1427,"line_end":1427,"column_start":2,"column_end":71}},{"value":"/ immutable.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":243819,"byte_end":243833,"line_start":1428,"line_end":1428,"column_start":2,"column_end":16}},{"value":"inline(always)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":243835,"byte_end":243852,"line_start":1429,"line_end":1429,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":243854,"byte_end":243884,"line_start":1430,"line_end":1430,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1316},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":245572,"byte_end":245578,"line_start":1474,"line_end":1474,"column_start":9,"column_end":15},"name":"domain","qualname":"<BitSlice<O, T>>::domain","value":"pub fn domain(&Self) -> Domain<, T>","parent":null,"children":[],"decl_id":null,"docs":" Splits the slice into immutable references to its underlying memory\n components.","sig":null,"attributes":[{"value":"/ Splits the slice into immutable references to its underlying memory","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":243974,"byte_end":244045,"line_start":1435,"line_end":1435,"column_start":2,"column_end":73}},{"value":"/ components.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":244047,"byte_end":244062,"line_start":1436,"line_end":1436,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":244064,"byte_end":244067,"line_start":1437,"line_end":1437,"column_start":2,"column_end":5}},{"value":"/ Unlike [`.bit_domain`] and [`.bit_domain_mut`], this does not return","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":244069,"byte_end":244141,"line_start":1438,"line_end":1438,"column_start":2,"column_end":74}},{"value":"/ smaller `BitSlice` handles but rather appropriately-marked references to","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":244143,"byte_end":244219,"line_start":1439,"line_end":1439,"column_start":2,"column_end":78}},{"value":"/ the underlying memory elements.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":244221,"byte_end":244256,"line_start":1440,"line_end":1440,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":244258,"byte_end":244261,"line_start":1441,"line_end":1441,"column_start":2,"column_end":5}},{"value":"/ The aliased references allow mutation of these elements. You are","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":244263,"byte_end":244331,"line_start":1442,"line_end":1442,"column_start":2,"column_end":70}},{"value":"/ required to not use mutating methods on these references *at all*. This","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":244333,"byte_end":244408,"line_start":1443,"line_end":1443,"column_start":2,"column_end":77}},{"value":"/ function is not marked `unsafe`, but this is a contract you must uphold.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":244410,"byte_end":244486,"line_start":1444,"line_end":1444,"column_start":2,"column_end":78}},{"value":"/ Use [`.domain_mut`] to modify the underlying elements.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":244488,"byte_end":244546,"line_start":1445,"line_end":1445,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":244548,"byte_end":244551,"line_start":1446,"line_end":1446,"column_start":2,"column_end":5}},{"value":"/ > It is not currently possible to forbid mutation through these","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":244553,"byte_end":244620,"line_start":1447,"line_end":1447,"column_start":2,"column_end":69}},{"value":"/ > references. This may change in the future.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":244622,"byte_end":244670,"line_start":1448,"line_end":1448,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":244672,"byte_end":244675,"line_start":1449,"line_end":1449,"column_start":2,"column_end":5}},{"value":"/ # Safety Exception","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":244677,"byte_end":244699,"line_start":1450,"line_end":1450,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":244701,"byte_end":244704,"line_start":1451,"line_end":1451,"column_start":2,"column_end":5}},{"value":"/ As with [`.bit_domain`], this produces unsynchronized immutable","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":244706,"byte_end":244773,"line_start":1452,"line_end":1452,"column_start":2,"column_end":69}},{"value":"/ references over the fully-populated interior elements. If this view is","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":244775,"byte_end":244849,"line_start":1453,"line_end":1453,"column_start":2,"column_end":76}},{"value":"/ constructed from a `BitSlice` handle over atomic memory, then it will","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":244851,"byte_end":244924,"line_start":1454,"line_end":1454,"column_start":2,"column_end":75}},{"value":"/ remove the atomic access behavior for the interior elements. This *by","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":244926,"byte_end":244999,"line_start":1455,"line_end":1455,"column_start":2,"column_end":75}},{"value":"/ itself* is safe, as long as no contemporaneous atomic writes to that","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":245001,"byte_end":245073,"line_start":1456,"line_end":1456,"column_start":2,"column_end":74}},{"value":"/ memory can occur. You must not retain and use an atomic reference to the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":245075,"byte_end":245151,"line_start":1457,"line_end":1457,"column_start":2,"column_end":78}},{"value":"/ memory region marked as `NoAlias` for the duration of this view’s","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":245153,"byte_end":245224,"line_start":1458,"line_end":1458,"column_start":2,"column_end":71}},{"value":"/ existence.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":245226,"byte_end":245240,"line_start":1459,"line_end":1459,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":245242,"byte_end":245245,"line_start":1460,"line_end":1460,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":245247,"byte_end":245263,"line_start":1461,"line_end":1461,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":245265,"byte_end":245268,"line_start":1462,"line_end":1462,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":245270,"byte_end":245283,"line_start":1463,"line_end":1463,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":245285,"byte_end":245288,"line_start":1464,"line_end":1464,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":245290,"byte_end":245303,"line_start":1465,"line_end":1465,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":245305,"byte_end":245308,"line_start":1466,"line_end":1466,"column_start":2,"column_end":5}},{"value":"/ A read-only descriptor of the memory elements backing `*self`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":245310,"byte_end":245376,"line_start":1467,"line_end":1467,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":245378,"byte_end":245381,"line_start":1468,"line_end":1468,"column_start":2,"column_end":5}},{"value":"/ [`.bit_domain`]: #method.bit_domain","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":245383,"byte_end":245422,"line_start":1469,"line_end":1469,"column_start":2,"column_end":41}},{"value":"/ [`.bit_domain_mut`]: #method.bit_domain_mut","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":245424,"byte_end":245471,"line_start":1470,"line_end":1470,"column_start":2,"column_end":49}},{"value":"/ [`.domain_mut`]: #method.domain_mut","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":245473,"byte_end":245512,"line_start":1471,"line_end":1471,"column_start":2,"column_end":41}},{"value":"inline(always)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":245514,"byte_end":245531,"line_start":1472,"line_end":1472,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":245533,"byte_end":245563,"line_start":1473,"line_end":1473,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1317},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":246518,"byte_end":246528,"line_start":1504,"line_end":1504,"column_start":9,"column_end":19},"name":"domain_mut","qualname":"<BitSlice<O, T>>::domain_mut","value":"pub fn domain_mut(&mut Self) -> DomainMut<, T>","parent":null,"children":[],"decl_id":null,"docs":" Splits the slice into mutable references to its underlying memory\n elements.","sig":null,"attributes":[{"value":"/ Splits the slice into mutable references to its underlying memory","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":245626,"byte_end":245695,"line_start":1478,"line_end":1478,"column_start":2,"column_end":71}},{"value":"/ elements.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":245697,"byte_end":245710,"line_start":1479,"line_end":1479,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":245712,"byte_end":245715,"line_start":1480,"line_end":1480,"column_start":2,"column_end":5}},{"value":"/ Like [`.domain`], this returns appropriately-marked references to the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":245717,"byte_end":245790,"line_start":1481,"line_end":1481,"column_start":2,"column_end":75}},{"value":"/ underlying memory elements. These references are all writable.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":245792,"byte_end":245858,"line_start":1482,"line_end":1482,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":245860,"byte_end":245863,"line_start":1483,"line_end":1483,"column_start":2,"column_end":5}},{"value":"/ The aliased edge references permit modifying memory beyond their bit","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":245865,"byte_end":245937,"line_start":1484,"line_end":1484,"column_start":2,"column_end":74}},{"value":"/ marker. You are required to only mutate the region of these edge","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":245939,"byte_end":246007,"line_start":1485,"line_end":1485,"column_start":2,"column_end":70}},{"value":"/ elements that you currently govern. This function is not marked","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":246009,"byte_end":246076,"line_start":1486,"line_end":1486,"column_start":2,"column_end":69}},{"value":"/ `unsafe`, but this is a contract you must uphold.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":246078,"byte_end":246131,"line_start":1487,"line_end":1487,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":246133,"byte_end":246136,"line_start":1488,"line_end":1488,"column_start":2,"column_end":5}},{"value":"/ > It is not currently possible to forbid out-of-bounds mutation through","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":246138,"byte_end":246213,"line_start":1489,"line_end":1489,"column_start":2,"column_end":77}},{"value":"/ > these references. This may change in the future.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":246215,"byte_end":246269,"line_start":1490,"line_end":1490,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":246271,"byte_end":246274,"line_start":1491,"line_end":1491,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":246276,"byte_end":246292,"line_start":1492,"line_end":1492,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":246294,"byte_end":246297,"line_start":1493,"line_end":1493,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":246299,"byte_end":246316,"line_start":1494,"line_end":1494,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":246318,"byte_end":246321,"line_start":1495,"line_end":1495,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":246323,"byte_end":246336,"line_start":1496,"line_end":1496,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":246338,"byte_end":246341,"line_start":1497,"line_end":1497,"column_start":2,"column_end":5}},{"value":"/ A descriptor of the memory elements underneath `*self`, permitting","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":246343,"byte_end":246413,"line_start":1498,"line_end":1498,"column_start":2,"column_end":72}},{"value":"/ mutation.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":246415,"byte_end":246428,"line_start":1499,"line_end":1499,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":246430,"byte_end":246433,"line_start":1500,"line_end":1500,"column_start":2,"column_end":5}},{"value":"/ [`.domain`]: #method.domain","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":246435,"byte_end":246466,"line_start":1501,"line_end":1501,"column_start":2,"column_end":33}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":246468,"byte_end":246477,"line_start":1502,"line_end":1502,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":246479,"byte_end":246509,"line_start":1503,"line_end":1503,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1318},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":247702,"byte_end":247720,"line_start":1547,"line_end":1547,"column_start":16,"column_end":34},"name":"split_at_unchecked","qualname":"<BitSlice<O, T>>::split_at_unchecked","value":"pub unsafe fn split_at_unchecked(&Self, usize) -> (&Self, &Self)","parent":null,"children":[],"decl_id":null,"docs":" Splits a slice at some mid-point, without checking boundary conditions.","sig":null,"attributes":[{"value":"/ Splits a slice at some mid-point, without checking boundary conditions.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":246586,"byte_end":246661,"line_start":1508,"line_end":1508,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":246663,"byte_end":246666,"line_start":1509,"line_end":1509,"column_start":2,"column_end":5}},{"value":"/ This is generally not recommended; use with caution! For a safe","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":246668,"byte_end":246735,"line_start":1510,"line_end":1510,"column_start":2,"column_end":69}},{"value":"/ alternative, see [`split_at`].","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":246737,"byte_end":246771,"line_start":1511,"line_end":1511,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":246773,"byte_end":246776,"line_start":1512,"line_end":1512,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":246778,"byte_end":246794,"line_start":1513,"line_end":1513,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":246796,"byte_end":246799,"line_start":1514,"line_end":1514,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":246801,"byte_end":246814,"line_start":1515,"line_end":1515,"column_start":2,"column_end":15}},{"value":"/ - `mid`: The index at which to split the slice. This must be in the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":246816,"byte_end":246887,"line_start":1516,"line_end":1516,"column_start":2,"column_end":73}},{"value":"/   range `0 .. self.len()`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":246889,"byte_end":246919,"line_start":1517,"line_end":1517,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":246921,"byte_end":246924,"line_start":1518,"line_end":1518,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":246926,"byte_end":246939,"line_start":1519,"line_end":1519,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":246941,"byte_end":246944,"line_start":1520,"line_end":1520,"column_start":2,"column_end":5}},{"value":"/ - `.0`: `&self[.. mid]`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":246946,"byte_end":246973,"line_start":1521,"line_end":1521,"column_start":2,"column_end":29}},{"value":"/ - `.1`: `&self[mid ..]`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":246975,"byte_end":247002,"line_start":1522,"line_end":1522,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":247004,"byte_end":247007,"line_start":1523,"line_end":1523,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":247009,"byte_end":247021,"line_start":1524,"line_end":1524,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":247023,"byte_end":247026,"line_start":1525,"line_end":1525,"column_start":2,"column_end":5}},{"value":"/ This function is **not** safe. It performs raw pointer arithmetic to","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":247028,"byte_end":247100,"line_start":1526,"line_end":1526,"column_start":2,"column_end":74}},{"value":"/ construct two new references. If `mid` is out of bounds, then the first","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":247102,"byte_end":247177,"line_start":1527,"line_end":1527,"column_start":2,"column_end":77}},{"value":"/ slice will be too large, and the second will be *catastrophically*","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":247179,"byte_end":247249,"line_start":1528,"line_end":1528,"column_start":2,"column_end":72}},{"value":"/ incorrect. As both are references to invalid memory, they are undefined","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":247251,"byte_end":247326,"line_start":1529,"line_end":1529,"column_start":2,"column_end":77}},{"value":"/ to *construct*, and may not ever be used.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":247328,"byte_end":247373,"line_start":1530,"line_end":1530,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":247375,"byte_end":247378,"line_start":1531,"line_end":1531,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":247380,"byte_end":247394,"line_start":1532,"line_end":1532,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":247396,"byte_end":247399,"line_start":1533,"line_end":1533,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":247401,"byte_end":247412,"line_start":1534,"line_end":1534,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":247414,"byte_end":247441,"line_start":1535,"line_end":1535,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":247443,"byte_end":247446,"line_start":1536,"line_end":1536,"column_start":2,"column_end":5}},{"value":"/ let data = 0x0180u16;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":247448,"byte_end":247473,"line_start":1537,"line_end":1537,"column_start":2,"column_end":27}},{"value":"/ let bits = data.view_bits::<Msb0>();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":247475,"byte_end":247515,"line_start":1538,"line_end":1538,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":247517,"byte_end":247520,"line_start":1539,"line_end":1539,"column_start":2,"column_end":5}},{"value":"/ let (one, two) = unsafe { bits.split_at_unchecked(8) };","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":247522,"byte_end":247581,"line_start":1540,"line_end":1540,"column_start":2,"column_end":61}},{"value":"/ assert!(one[7]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":247583,"byte_end":247603,"line_start":1541,"line_end":1541,"column_start":2,"column_end":22}},{"value":"/ assert!(two[0]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":247605,"byte_end":247625,"line_start":1542,"line_end":1542,"column_start":2,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":247627,"byte_end":247634,"line_start":1543,"line_end":1543,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":247636,"byte_end":247639,"line_start":1544,"line_end":1544,"column_start":2,"column_end":5}},{"value":"/ [`split_at`]: #method.split_at","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":247641,"byte_end":247675,"line_start":1545,"line_end":1545,"column_start":2,"column_end":36}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":247677,"byte_end":247686,"line_start":1546,"line_end":1546,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1319},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":249055,"byte_end":249077,"line_start":1593,"line_end":1593,"column_start":16,"column_end":38},"name":"split_at_unchecked_mut","qualname":"<BitSlice<O, T>>::split_at_unchecked_mut","value":"pub unsafe fn split_at_unchecked_mut(&mut Self, usize)\n-> (&mut BitSlice<O, T::Alias>, &mut BitSlice<O, T::Alias>)","parent":null,"children":[],"decl_id":null,"docs":" Splits a mutable slice at some mid-point, without checking boundary\n conditions.","sig":null,"attributes":[{"value":"/ Splits a mutable slice at some mid-point, without checking boundary","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":247824,"byte_end":247895,"line_start":1551,"line_end":1551,"column_start":2,"column_end":73}},{"value":"/ conditions.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":247897,"byte_end":247912,"line_start":1552,"line_end":1552,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":247914,"byte_end":247917,"line_start":1553,"line_end":1553,"column_start":2,"column_end":5}},{"value":"/ This is generally not recommended; use with caution! For a safe","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":247919,"byte_end":247986,"line_start":1554,"line_end":1554,"column_start":2,"column_end":69}},{"value":"/ alternative, see [`split_at_mut`].","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":247988,"byte_end":248026,"line_start":1555,"line_end":1555,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":248028,"byte_end":248031,"line_start":1556,"line_end":1556,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":248033,"byte_end":248049,"line_start":1557,"line_end":1557,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":248051,"byte_end":248054,"line_start":1558,"line_end":1558,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":248056,"byte_end":248073,"line_start":1559,"line_end":1559,"column_start":2,"column_end":19}},{"value":"/ - `mid`: The index at which to split the slice. This must be in the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":248075,"byte_end":248146,"line_start":1560,"line_end":1560,"column_start":2,"column_end":73}},{"value":"/   range `0 .. self.len()`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":248148,"byte_end":248178,"line_start":1561,"line_end":1561,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":248180,"byte_end":248183,"line_start":1562,"line_end":1562,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":248185,"byte_end":248198,"line_start":1563,"line_end":1563,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":248200,"byte_end":248203,"line_start":1564,"line_end":1564,"column_start":2,"column_end":5}},{"value":"/ - `.0`: `&mut self[.. mid]`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":248205,"byte_end":248236,"line_start":1565,"line_end":1565,"column_start":2,"column_end":33}},{"value":"/ - `.1`: `&mut self[mid ..]`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":248238,"byte_end":248269,"line_start":1566,"line_end":1566,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":248271,"byte_end":248274,"line_start":1567,"line_end":1567,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":248276,"byte_end":248288,"line_start":1568,"line_end":1568,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":248290,"byte_end":248293,"line_start":1569,"line_end":1569,"column_start":2,"column_end":5}},{"value":"/ This function is **not** safe. It performs raw pointer arithmetic to","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":248295,"byte_end":248367,"line_start":1570,"line_end":1570,"column_start":2,"column_end":74}},{"value":"/ construct two new references. If `mid` is out of bounds, then the first","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":248369,"byte_end":248444,"line_start":1571,"line_end":1571,"column_start":2,"column_end":77}},{"value":"/ slice will be too large, and the second will be *catastrophically*","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":248446,"byte_end":248516,"line_start":1572,"line_end":1572,"column_start":2,"column_end":72}},{"value":"/ incorrect. As both are references to invalid memory, they are undefined","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":248518,"byte_end":248593,"line_start":1573,"line_end":1573,"column_start":2,"column_end":77}},{"value":"/ to *construct*, and may not ever be used.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":248595,"byte_end":248640,"line_start":1574,"line_end":1574,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":248642,"byte_end":248645,"line_start":1575,"line_end":1575,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":248647,"byte_end":248661,"line_start":1576,"line_end":1576,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":248663,"byte_end":248666,"line_start":1577,"line_end":1577,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":248668,"byte_end":248679,"line_start":1578,"line_end":1578,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":248681,"byte_end":248708,"line_start":1579,"line_end":1579,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":248710,"byte_end":248713,"line_start":1580,"line_end":1580,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0u16;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":248715,"byte_end":248739,"line_start":1581,"line_end":1581,"column_start":2,"column_end":26}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":248741,"byte_end":248785,"line_start":1582,"line_end":1582,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":248787,"byte_end":248790,"line_start":1583,"line_end":1583,"column_start":2,"column_end":5}},{"value":"/ let (one, two) = unsafe { bits.split_at_unchecked_mut(8) };","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":248792,"byte_end":248855,"line_start":1584,"line_end":1584,"column_start":2,"column_end":65}},{"value":"/ one.set(7, true);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":248857,"byte_end":248878,"line_start":1585,"line_end":1585,"column_start":2,"column_end":23}},{"value":"/ two.set(0, true);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":248880,"byte_end":248901,"line_start":1586,"line_end":1586,"column_start":2,"column_end":23}},{"value":"/ assert_eq!(data, 0x0180u16);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":248903,"byte_end":248935,"line_start":1587,"line_end":1587,"column_start":2,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":248937,"byte_end":248944,"line_start":1588,"line_end":1588,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":248946,"byte_end":248949,"line_start":1589,"line_end":1589,"column_start":2,"column_end":5}},{"value":"/ [`split_at_mut`]: #method.split_at_mut","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":248951,"byte_end":248993,"line_start":1590,"line_end":1590,"column_start":2,"column_end":44}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":248995,"byte_end":249004,"line_start":1591,"line_end":1591,"column_start":2,"column_end":11}},{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":249006,"byte_end":249039,"line_start":1592,"line_end":1592,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1321},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":251089,"byte_end":251103,"line_start":1665,"line_end":1665,"column_start":16,"column_end":30},"name":"swap_unchecked","qualname":"<BitSlice<O, T>>::swap_unchecked","value":"pub unsafe fn swap_unchecked(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Swaps the bits at two indices without checking boundary conditions.","sig":null,"attributes":[{"value":"/ Swaps the bits at two indices without checking boundary conditions.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":250159,"byte_end":250230,"line_start":1628,"line_end":1628,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":250232,"byte_end":250235,"line_start":1629,"line_end":1629,"column_start":2,"column_end":5}},{"value":"/ This is generally not recommended; use with caution! For a safe","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":250237,"byte_end":250304,"line_start":1630,"line_end":1630,"column_start":2,"column_end":69}},{"value":"/ alternative, see [`swap`].","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":250306,"byte_end":250336,"line_start":1631,"line_end":1631,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":250338,"byte_end":250341,"line_start":1632,"line_end":1632,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":250343,"byte_end":250359,"line_start":1633,"line_end":1633,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":250361,"byte_end":250364,"line_start":1634,"line_end":1634,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":250366,"byte_end":250383,"line_start":1635,"line_end":1635,"column_start":2,"column_end":19}},{"value":"/ - `a`: One index to swap.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":250385,"byte_end":250414,"line_start":1636,"line_end":1636,"column_start":2,"column_end":31}},{"value":"/ - `b`: The other index to swap.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":250416,"byte_end":250451,"line_start":1637,"line_end":1637,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":250453,"byte_end":250456,"line_start":1638,"line_end":1638,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":250458,"byte_end":250471,"line_start":1639,"line_end":1639,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":250473,"byte_end":250476,"line_start":1640,"line_end":1640,"column_start":2,"column_end":5}},{"value":"/ The bit at index `a` is written into index `b`, and the bit at index `b`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":250478,"byte_end":250554,"line_start":1641,"line_end":1641,"column_start":2,"column_end":78}},{"value":"/ is written into `a`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":250556,"byte_end":250580,"line_start":1642,"line_end":1642,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":250582,"byte_end":250585,"line_start":1643,"line_end":1643,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":250587,"byte_end":250599,"line_start":1644,"line_end":1644,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":250601,"byte_end":250604,"line_start":1645,"line_end":1645,"column_start":2,"column_end":5}},{"value":"/ Both `a` and `b` must be less than `self.len()`. Indices greater than","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":250606,"byte_end":250679,"line_start":1646,"line_end":1646,"column_start":2,"column_end":75}},{"value":"/ the length will cause out-of-bounds memory access, which can lead to","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":250681,"byte_end":250753,"line_start":1647,"line_end":1647,"column_start":2,"column_end":74}},{"value":"/ memory unsafety and a program crash.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":250755,"byte_end":250795,"line_start":1648,"line_end":1648,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":250797,"byte_end":250800,"line_start":1649,"line_end":1649,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":250802,"byte_end":250816,"line_start":1650,"line_end":1650,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":250818,"byte_end":250821,"line_start":1651,"line_end":1651,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":250823,"byte_end":250834,"line_start":1652,"line_end":1652,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":250836,"byte_end":250863,"line_start":1653,"line_end":1653,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":250865,"byte_end":250868,"line_start":1654,"line_end":1654,"column_start":2,"column_end":5}},{"value":"/ let mut data = 8u8;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":250870,"byte_end":250893,"line_start":1655,"line_end":1655,"column_start":2,"column_end":25}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":250895,"byte_end":250939,"line_start":1656,"line_end":1656,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":250941,"byte_end":250944,"line_start":1657,"line_end":1657,"column_start":2,"column_end":5}},{"value":"/ unsafe { bits.swap_unchecked(0, 4); }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":250946,"byte_end":250987,"line_start":1658,"line_end":1658,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":250989,"byte_end":250992,"line_start":1659,"line_end":1659,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(data, 128);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":250994,"byte_end":251020,"line_start":1660,"line_end":1660,"column_start":2,"column_end":28}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":251022,"byte_end":251029,"line_start":1661,"line_end":1661,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":251031,"byte_end":251034,"line_start":1662,"line_end":1662,"column_start":2,"column_end":5}},{"value":"/ [`swap`]: #method.swap","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":251036,"byte_end":251062,"line_start":1663,"line_end":1663,"column_start":2,"column_end":28}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":251064,"byte_end":251073,"line_start":1664,"line_end":1664,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1322},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":252396,"byte_end":252410,"line_start":1709,"line_end":1709,"column_start":16,"column_end":30},"name":"copy_unchecked","qualname":"<BitSlice<O, T>>::copy_unchecked","value":"pub unsafe fn copy_unchecked(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Copies a bit from one index to another without checking boundary\n conditions.","sig":null,"attributes":[{"value":"/ Copies a bit from one index to another without checking boundary","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":251282,"byte_end":251350,"line_start":1672,"line_end":1672,"column_start":2,"column_end":70}},{"value":"/ conditions.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":251352,"byte_end":251367,"line_start":1673,"line_end":1673,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":251369,"byte_end":251372,"line_start":1674,"line_end":1674,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":251374,"byte_end":251390,"line_start":1675,"line_end":1675,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":251392,"byte_end":251395,"line_start":1676,"line_end":1676,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":251397,"byte_end":251414,"line_start":1677,"line_end":1677,"column_start":2,"column_end":19}},{"value":"/ - `from`: The index whose bit is to be copied","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":251416,"byte_end":251465,"line_start":1678,"line_end":1678,"column_start":2,"column_end":51}},{"value":"/ - `to`: The index into which the copied bit is written.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":251467,"byte_end":251526,"line_start":1679,"line_end":1679,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":251528,"byte_end":251531,"line_start":1680,"line_end":1680,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":251533,"byte_end":251546,"line_start":1681,"line_end":1681,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":251548,"byte_end":251551,"line_start":1682,"line_end":1682,"column_start":2,"column_end":5}},{"value":"/ The bit at `from` is written into `to`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":251553,"byte_end":251596,"line_start":1683,"line_end":1683,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":251598,"byte_end":251601,"line_start":1684,"line_end":1684,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":251603,"byte_end":251615,"line_start":1685,"line_end":1685,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":251617,"byte_end":251620,"line_start":1686,"line_end":1686,"column_start":2,"column_end":5}},{"value":"/ Both `from` and `to` must be less than `self.len()`, in order for","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":251622,"byte_end":251691,"line_start":1687,"line_end":1687,"column_start":2,"column_end":71}},{"value":"/ `self` to legally read from and write to them, respectively.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":251693,"byte_end":251757,"line_start":1688,"line_end":1688,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":251759,"byte_end":251762,"line_start":1689,"line_end":1689,"column_start":2,"column_end":5}},{"value":"/ If `self` had been split from a larger slice, reading from `from` or","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":251764,"byte_end":251836,"line_start":1690,"line_end":1690,"column_start":2,"column_end":74}},{"value":"/ writing to `to` may not *necessarily* cause a memory-safety violation in","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":251838,"byte_end":251914,"line_start":1691,"line_end":1691,"column_start":2,"column_end":78}},{"value":"/ the Rust model, due to the aliasing system `bitvec` employs. However,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":251916,"byte_end":251989,"line_start":1692,"line_end":1692,"column_start":2,"column_end":75}},{"value":"/ writing outside the bounds of a slice reference is *always* a logical","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":251991,"byte_end":252064,"line_start":1693,"line_end":1693,"column_start":2,"column_end":75}},{"value":"/ error, as it causes changes observable by another reference handle.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":252066,"byte_end":252137,"line_start":1694,"line_end":1694,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":252139,"byte_end":252142,"line_start":1695,"line_end":1695,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":252144,"byte_end":252158,"line_start":1696,"line_end":1696,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":252160,"byte_end":252163,"line_start":1697,"line_end":1697,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":252165,"byte_end":252176,"line_start":1698,"line_end":1698,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":252178,"byte_end":252205,"line_start":1699,"line_end":1699,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":252207,"byte_end":252210,"line_start":1700,"line_end":1700,"column_start":2,"column_end":5}},{"value":"/ let mut data = 1u8;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":252212,"byte_end":252235,"line_start":1701,"line_end":1701,"column_start":2,"column_end":25}},{"value":"/ let bits = data.view_bits_mut::<Lsb0>();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":252237,"byte_end":252281,"line_start":1702,"line_end":1702,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":252283,"byte_end":252286,"line_start":1703,"line_end":1703,"column_start":2,"column_end":5}},{"value":"/ unsafe { bits.copy_unchecked(0, 2) };","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":252288,"byte_end":252329,"line_start":1704,"line_end":1704,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":252331,"byte_end":252334,"line_start":1705,"line_end":1705,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(data, 5);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":252336,"byte_end":252360,"line_start":1706,"line_end":1706,"column_start":2,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":252362,"byte_end":252369,"line_start":1707,"line_end":1707,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":252371,"byte_end":252380,"line_start":1708,"line_end":1708,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1323},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":253549,"byte_end":253570,"line_start":1748,"line_end":1748,"column_start":16,"column_end":37},"name":"copy_within_unchecked","qualname":"<BitSlice<O, T>>::copy_within_unchecked","value":"pub unsafe fn copy_within_unchecked<R>(&mut Self, R, usize) where\nR: RangeBounds<usize>","parent":null,"children":[],"decl_id":null,"docs":" Copies bits from one part of the slice to another part of itself.","sig":null,"attributes":[{"value":"/ Copies bits from one part of the slice to another part of itself.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":252523,"byte_end":252592,"line_start":1714,"line_end":1714,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":252594,"byte_end":252597,"line_start":1715,"line_end":1715,"column_start":2,"column_end":5}},{"value":"/ `src` is the range within `self` to copy from. `dest` is the starting","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":252599,"byte_end":252672,"line_start":1716,"line_end":1716,"column_start":2,"column_end":75}},{"value":"/ index of the range within `self` to copy to, which will have the same","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":252674,"byte_end":252747,"line_start":1717,"line_end":1717,"column_start":2,"column_end":75}},{"value":"/ length as `src`. The two ranges may overlap. The ends of the two ranges","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":252749,"byte_end":252824,"line_start":1718,"line_end":1718,"column_start":2,"column_end":77}},{"value":"/ must be less than or equal to `self.len()`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":252826,"byte_end":252873,"line_start":1719,"line_end":1719,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":252875,"byte_end":252878,"line_start":1720,"line_end":1720,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":252880,"byte_end":252893,"line_start":1721,"line_end":1721,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":252895,"byte_end":252898,"line_start":1722,"line_end":1722,"column_start":2,"column_end":5}},{"value":"/ `self[src]` is copied to `self[dest .. dest + src.end() - src.start()]`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":252900,"byte_end":252976,"line_start":1723,"line_end":1723,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":252978,"byte_end":252981,"line_start":1724,"line_end":1724,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":252983,"byte_end":252995,"line_start":1725,"line_end":1725,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":252997,"byte_end":253000,"line_start":1726,"line_end":1726,"column_start":2,"column_end":5}},{"value":"/ This function will panic if either range exceeds the end of the slice,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":253002,"byte_end":253076,"line_start":1727,"line_end":1727,"column_start":2,"column_end":76}},{"value":"/ or if the end of `src` is before the start.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":253078,"byte_end":253125,"line_start":1728,"line_end":1728,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":253127,"byte_end":253130,"line_start":1729,"line_end":1729,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":253132,"byte_end":253144,"line_start":1730,"line_end":1730,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":253146,"byte_end":253149,"line_start":1731,"line_end":1731,"column_start":2,"column_end":5}},{"value":"/ Both the `src` range and the target range `dest .. dest + src.len()`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":253151,"byte_end":253223,"line_start":1732,"line_end":1732,"column_start":2,"column_end":74}},{"value":"/ must not exceed the `self.len()` slice range.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":253225,"byte_end":253274,"line_start":1733,"line_end":1733,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":253276,"byte_end":253279,"line_start":1734,"line_end":1734,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":253281,"byte_end":253295,"line_start":1735,"line_end":1735,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":253297,"byte_end":253300,"line_start":1736,"line_end":1736,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":253302,"byte_end":253313,"line_start":1737,"line_end":1737,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":253315,"byte_end":253342,"line_start":1738,"line_end":1738,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":253344,"byte_end":253347,"line_start":1739,"line_end":1739,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0x07u8;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":253349,"byte_end":253375,"line_start":1740,"line_end":1740,"column_start":2,"column_end":28}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":253377,"byte_end":253421,"line_start":1741,"line_end":1741,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":253423,"byte_end":253426,"line_start":1742,"line_end":1742,"column_start":2,"column_end":5}},{"value":"/ unsafe { bits.copy_within_unchecked(5 .., 0); }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":253428,"byte_end":253479,"line_start":1743,"line_end":1743,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":253481,"byte_end":253484,"line_start":1744,"line_end":1744,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(data, 0xE7);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":253486,"byte_end":253513,"line_start":1745,"line_end":1745,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":253515,"byte_end":253522,"line_start":1746,"line_end":1746,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":253524,"byte_end":253533,"line_start":1747,"line_end":1747,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1325},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":255787,"byte_end":255798,"line_start":1816,"line_end":1816,"column_start":9,"column_end":20},"name":"offset_from","qualname":"<BitSlice<O, T>>::offset_from","value":"pub fn offset_from(&Self, &Self) -> isize","parent":null,"children":[],"decl_id":null,"docs":" Produces the absolute offset in bits between two slice heads.","sig":null,"attributes":[{"value":"/ Produces the absolute offset in bits between two slice heads.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":253954,"byte_end":254019,"line_start":1766,"line_end":1766,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":254021,"byte_end":254024,"line_start":1767,"line_end":1767,"column_start":2,"column_end":5}},{"value":"/ While this method is sound for any two arbitrary bit slices, the answer","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":254026,"byte_end":254101,"line_start":1768,"line_end":1768,"column_start":2,"column_end":77}},{"value":"/ it produces is meaningful *only* when one argument is a strict subslice","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":254103,"byte_end":254178,"line_start":1769,"line_end":1769,"column_start":2,"column_end":77}},{"value":"/ of the other. If the two slices are created from different buffers","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":254180,"byte_end":254250,"line_start":1770,"line_end":1770,"column_start":2,"column_end":72}},{"value":"/ entirely, a comparison is undefined; if the two slices are disjoint","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":254252,"byte_end":254323,"line_start":1771,"line_end":1771,"column_start":2,"column_end":73}},{"value":"/ regions of the same buffer, then the semantically correct distance is","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":254325,"byte_end":254398,"line_start":1772,"line_end":1772,"column_start":2,"column_end":75}},{"value":"/ between the tail of the lower and the head of the upper, which this","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":254400,"byte_end":254471,"line_start":1773,"line_end":1773,"column_start":2,"column_end":73}},{"value":"/ does not measure.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":254473,"byte_end":254494,"line_start":1774,"line_end":1774,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":254496,"byte_end":254499,"line_start":1775,"line_end":1775,"column_start":2,"column_end":5}},{"value":"/ # Visual Description","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":254501,"byte_end":254525,"line_start":1776,"line_end":1776,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":254527,"byte_end":254530,"line_start":1777,"line_end":1777,"column_start":2,"column_end":5}},{"value":"/ Consider the following sequence of bits:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":254532,"byte_end":254576,"line_start":1778,"line_end":1778,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":254578,"byte_end":254581,"line_start":1779,"line_end":1779,"column_start":2,"column_end":5}},{"value":"/ ```text","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":254583,"byte_end":254594,"line_start":1780,"line_end":1780,"column_start":2,"column_end":13}},{"value":"/ [ 0 1 2 3 4 5 6 7 8 9 a b ]","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":254596,"byte_end":254627,"line_start":1781,"line_end":1781,"column_start":2,"column_end":33}},{"value":"/   |       ^^^^^^^       |","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":254629,"byte_end":254658,"line_start":1782,"line_end":1782,"column_start":2,"column_end":31}},{"value":"/   ^^^^^^^^^^^^^^^^^^^^^^^","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":254660,"byte_end":254689,"line_start":1783,"line_end":1783,"column_start":2,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":254691,"byte_end":254698,"line_start":1784,"line_end":1784,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":254700,"byte_end":254703,"line_start":1785,"line_end":1785,"column_start":2,"column_end":5}},{"value":"/ It does not matter whether there are bits between the tail of the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":254705,"byte_end":254774,"line_start":1786,"line_end":1786,"column_start":2,"column_end":71}},{"value":"/ smaller and the larger slices. The offset is computed from the bit","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":254776,"byte_end":254846,"line_start":1787,"line_end":1787,"column_start":2,"column_end":72}},{"value":"/ distance between the two heads.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":254848,"byte_end":254883,"line_start":1788,"line_end":1788,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":254885,"byte_end":254888,"line_start":1789,"line_end":1789,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":254890,"byte_end":254904,"line_start":1790,"line_end":1790,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":254906,"byte_end":254909,"line_start":1791,"line_end":1791,"column_start":2,"column_end":5}},{"value":"/ This function computes the *semantic* distance between the heads, rather","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":254911,"byte_end":254987,"line_start":1792,"line_end":1792,"column_start":2,"column_end":78}},{"value":"/ than the *electrical. It does not take into account the `BitOrder`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":254989,"byte_end":255059,"line_start":1793,"line_end":1793,"column_start":2,"column_end":72}},{"value":"/ implementation of the slice. See the [`::electrical_distance`] method","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":255061,"byte_end":255134,"line_start":1794,"line_end":1794,"column_start":2,"column_end":75}},{"value":"/ for that comparison.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":255136,"byte_end":255160,"line_start":1795,"line_end":1795,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":255162,"byte_end":255165,"line_start":1796,"line_end":1796,"column_start":2,"column_end":5}},{"value":"/ # Safety and Soundness","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":255167,"byte_end":255193,"line_start":1797,"line_end":1797,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":255195,"byte_end":255198,"line_start":1798,"line_end":1798,"column_start":2,"column_end":5}},{"value":"/ One of `self` or `other` must contain the other for this comparison to","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":255200,"byte_end":255274,"line_start":1799,"line_end":1799,"column_start":2,"column_end":76}},{"value":"/ be meaningful.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":255276,"byte_end":255294,"line_start":1800,"line_end":1800,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":255296,"byte_end":255299,"line_start":1801,"line_end":1801,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":255301,"byte_end":255317,"line_start":1802,"line_end":1802,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":255319,"byte_end":255322,"line_start":1803,"line_end":1803,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":255324,"byte_end":255337,"line_start":1804,"line_end":1804,"column_start":2,"column_end":15}},{"value":"/ - `other`: Another bit slice. This must be either a strict subregion or","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":255339,"byte_end":255414,"line_start":1805,"line_end":1805,"column_start":2,"column_end":77}},{"value":"/   a strict superregion of `self`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":255416,"byte_end":255453,"line_start":1806,"line_end":1806,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":255455,"byte_end":255458,"line_start":1807,"line_end":1807,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":255460,"byte_end":255473,"line_start":1808,"line_end":1808,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":255475,"byte_end":255478,"line_start":1809,"line_end":1809,"column_start":2,"column_end":5}},{"value":"/ The distance in (semantic) bits betwen the heads of each region. The","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":255480,"byte_end":255552,"line_start":1810,"line_end":1810,"column_start":2,"column_end":74}},{"value":"/ value is positive when `other` is higher in the address space than","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":255554,"byte_end":255624,"line_start":1811,"line_end":1811,"column_start":2,"column_end":72}},{"value":"/ `self`, and negative when `other` is lower in the address space than","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":255626,"byte_end":255698,"line_start":1812,"line_end":1812,"column_start":2,"column_end":74}},{"value":"/ `self`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":255700,"byte_end":255711,"line_start":1813,"line_end":1813,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":255713,"byte_end":255716,"line_start":1814,"line_end":1814,"column_start":2,"column_end":5}},{"value":"/ [`::electrical_distance]`: #method.electrical_comparison","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":255718,"byte_end":255778,"line_start":1815,"line_end":1815,"column_start":2,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1326},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":256631,"byte_end":256650,"line_start":1840,"line_end":1840,"column_start":9,"column_end":28},"name":"electrical_distance","qualname":"<BitSlice<O, T>>::electrical_distance","value":"pub fn electrical_distance(&Self, &Self) -> isize","parent":null,"children":[],"decl_id":null,"docs":" Computes the electrical distance between the heads of two slices.","sig":null,"attributes":[{"value":"/ Computes the electrical distance between the heads of two slices.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":255987,"byte_end":256056,"line_start":1822,"line_end":1822,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":256058,"byte_end":256061,"line_start":1823,"line_end":1823,"column_start":2,"column_end":5}},{"value":"/ This method uses the slices’ `BitOrder` implementation to compute the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":256063,"byte_end":256138,"line_start":1824,"line_end":1824,"column_start":2,"column_end":75}},{"value":"/ bit position of their heads, then computes the shift distance, in bits,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":256140,"byte_end":256215,"line_start":1825,"line_end":1825,"column_start":2,"column_end":77}},{"value":"/ between them.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":256217,"byte_end":256234,"line_start":1826,"line_end":1826,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":256236,"byte_end":256239,"line_start":1827,"line_end":1827,"column_start":2,"column_end":5}},{"value":"/ This computation presumes that the bits are counted in the same","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":256241,"byte_end":256308,"line_start":1828,"line_end":1828,"column_start":2,"column_end":69}},{"value":"/ direction as are bytes in the abstract memory map.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":256310,"byte_end":256364,"line_start":1829,"line_end":1829,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":256366,"byte_end":256369,"line_start":1830,"line_end":1830,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":256371,"byte_end":256387,"line_start":1831,"line_end":1831,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":256389,"byte_end":256392,"line_start":1832,"line_end":1832,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":256394,"byte_end":256407,"line_start":1833,"line_end":1833,"column_start":2,"column_end":15}},{"value":"/ - `other`: Another bit slice. This must be either a strict subregion or","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":256409,"byte_end":256484,"line_start":1834,"line_end":1834,"column_start":2,"column_end":77}},{"value":"/   a strict superregion of `self`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":256486,"byte_end":256523,"line_start":1835,"line_end":1835,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":256525,"byte_end":256528,"line_start":1836,"line_end":1836,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":256530,"byte_end":256543,"line_start":1837,"line_end":1837,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":256545,"byte_end":256548,"line_start":1838,"line_end":1838,"column_start":2,"column_end":5}},{"value":"/ The electrical bit distance between the heads of `self` and `other`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":256550,"byte_end":256622,"line_start":1839,"line_end":1839,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1335},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":259525,"byte_end":259545,"line_start":1933,"line_end":1933,"column_start":9,"column_end":29},"name":"split_at_aliased_mut","qualname":"<BitSlice<O, T>>::split_at_aliased_mut","value":"pub fn split_at_aliased_mut(&mut Self, usize) -> (&mut Self, &mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Splits a mutable slice at some mid-point.","sig":null,"attributes":[{"value":"/ Splits a mutable slice at some mid-point.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":258990,"byte_end":259035,"line_start":1919,"line_end":1919,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":259037,"byte_end":259040,"line_start":1920,"line_end":1920,"column_start":2,"column_end":5}},{"value":"/ This method has the same behavior as [`split_at_mut`], except that it","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":259042,"byte_end":259115,"line_start":1921,"line_end":1921,"column_start":2,"column_end":75}},{"value":"/ does not apply an aliasing marker to the partitioned subslices.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":259117,"byte_end":259184,"line_start":1922,"line_end":1922,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":259186,"byte_end":259189,"line_start":1923,"line_end":1923,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":259191,"byte_end":259203,"line_start":1924,"line_end":1924,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":259205,"byte_end":259208,"line_start":1925,"line_end":1925,"column_start":2,"column_end":5}},{"value":"/ Because this method is defined only on `BitSlice`s whose `T` type is","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":259210,"byte_end":259282,"line_start":1926,"line_end":1926,"column_start":2,"column_end":74}},{"value":"/ alias-safe, the subslices do not need to be additionally marked.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":259284,"byte_end":259352,"line_start":1927,"line_end":1927,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":259354,"byte_end":259357,"line_start":1928,"line_end":1928,"column_start":2,"column_end":5}},{"value":"/ [`split_at_mut`]: #method.split_at_mut","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":259359,"byte_end":259401,"line_start":1929,"line_end":1929,"column_start":2,"column_end":44}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":259403,"byte_end":259412,"line_start":1930,"line_end":1930,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":259486,"byte_end":259516,"line_start":1932,"line_end":1932,"column_start":2,"column_end":32}}]},{"kind":"Const","id":{"krate":0,"index":1339},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":260172,"byte_end":260180,"line_start":1957,"line_end":1957,"column_start":12,"column_end":20},"name":"MAX_BITS","qualname":"::slice::BitSlice::<O, T>::MAX_BITS","value":"usize","parent":{"krate":0,"index":1336},"children":[],"decl_id":null,"docs":" The inclusive maximum length of a `BitSlice<_, T>`.","sig":null,"attributes":[{"value":"/ The inclusive maximum length of a `BitSlice<_, T>`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":259814,"byte_end":259869,"line_start":1948,"line_end":1948,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":259871,"byte_end":259874,"line_start":1949,"line_end":1949,"column_start":2,"column_end":5}},{"value":"/ As `BitSlice` is zero-indexed, the largest possible index is one less","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":259876,"byte_end":259949,"line_start":1950,"line_end":1950,"column_start":2,"column_end":75}},{"value":"/ than this value.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":259951,"byte_end":259971,"line_start":1951,"line_end":1951,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":259973,"byte_end":259976,"line_start":1952,"line_end":1952,"column_start":2,"column_end":5}},{"value":"/ |CPU word width|         Value         |","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":259978,"byte_end":260022,"line_start":1953,"line_end":1953,"column_start":2,"column_end":46}},{"value":"/ |-------------:|----------------------:|","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":260024,"byte_end":260068,"line_start":1954,"line_end":1954,"column_start":2,"column_end":46}},{"value":"/ |32 bits       |     `0x1fff_ffff`     |","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":260070,"byte_end":260114,"line_start":1955,"line_end":1955,"column_start":2,"column_end":46}},{"value":"/ |64 bits       |`0x1fff_ffff_ffff_ffff`|","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":260116,"byte_end":260160,"line_start":1956,"line_end":1956,"column_start":2,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":1340},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":261006,"byte_end":261014,"line_start":1972,"line_end":1972,"column_start":12,"column_end":20},"name":"MAX_ELTS","qualname":"::slice::BitSlice::<O, T>::MAX_ELTS","value":"usize","parent":{"krate":0,"index":1336},"children":[],"decl_id":null,"docs":" The inclusive maximum length that a slice `[T]` can be for\n `BitSlice<_, T>` to cover it.","sig":null,"attributes":[{"value":"/ The inclusive maximum length that a slice `[T]` can be for","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":260221,"byte_end":260283,"line_start":1958,"line_end":1958,"column_start":2,"column_end":64}},{"value":"/ `BitSlice<_, T>` to cover it.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":260285,"byte_end":260318,"line_start":1959,"line_end":1959,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":260320,"byte_end":260323,"line_start":1960,"line_end":1960,"column_start":2,"column_end":5}},{"value":"/ A `BitSlice<_, T>` that begins in the interior of an element and","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":260325,"byte_end":260393,"line_start":1961,"line_end":1961,"column_start":2,"column_end":70}},{"value":"/ contains the maximum number of bits will extend one element past the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":260395,"byte_end":260467,"line_start":1962,"line_end":1962,"column_start":2,"column_end":74}},{"value":"/ cutoff that would occur if the slice began at the zeroth bit. Such a","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":260469,"byte_end":260541,"line_start":1963,"line_end":1963,"column_start":2,"column_end":74}},{"value":"/ slice must be manually constructed, but will not otherwise fail.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":260543,"byte_end":260611,"line_start":1964,"line_end":1964,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":260613,"byte_end":260616,"line_start":1965,"line_end":1965,"column_start":2,"column_end":5}},{"value":"/ |Type Bits|Max Elements (32-bit)| Max Elements (64-bit) |","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":260618,"byte_end":260679,"line_start":1966,"line_end":1966,"column_start":2,"column_end":63}},{"value":"/ |--------:|--------------------:|----------------------:|","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":260681,"byte_end":260742,"line_start":1967,"line_end":1967,"column_start":2,"column_end":63}},{"value":"/ |        8|    `0x0400_0001`    |`0x0400_0000_0000_0001`|","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":260744,"byte_end":260805,"line_start":1968,"line_end":1968,"column_start":2,"column_end":63}},{"value":"/ |       16|    `0x0200_0001`    |`0x0200_0000_0000_0001`|","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":260807,"byte_end":260868,"line_start":1969,"line_end":1969,"column_start":2,"column_end":63}},{"value":"/ |       32|    `0x0100_0001`    |`0x0100_0000_0000_0001`|","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":260870,"byte_end":260931,"line_start":1970,"line_end":1970,"column_start":2,"column_end":63}},{"value":"/ |       64|    `0x0080_0001`    |`0x0080_0000_0000_0001`|","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":260933,"byte_end":260994,"line_start":1971,"line_end":1971,"column_start":2,"column_end":63}}]},{"kind":"Function","id":{"krate":0,"index":1341},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":262828,"byte_end":262847,"line_start":2021,"line_end":2021,"column_start":15,"column_end":34},"name":"bits_from_raw_parts","qualname":"::slice::bits_from_raw_parts","value":"pub unsafe fn bits_from_raw_parts<'a, O, T>(*const T, u8, usize)\n-> Option<&'a BitSlice<O, T>> where O: BitOrder, T: 'a + BitStore + BitMemory","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `&BitSlice` reference from its component data.","sig":null,"attributes":[{"value":"* Constructs a `&BitSlice` reference from its component data.\n\nThis is logically equivalent to [`slice::from_raw_parts`] for `[T]`.\n\n# Lifetimes\n\n- `'a`: The lifetime of the returned bitslice handle. This must be no longer\n  than the duration of the referent region, as it is illegal for references to\n  dangle.\n\n# Type Parameters\n\n- `O`: The ordering of bits within elements `T`.\n- `T`: The type of each memory element in the backing storage region.\n\n# Parameters\n\n- `addr`: The base address of the memory region that the `BitSlice` covers.\n- `head`: The index of the first live bit in `*addr`, at which the `BitSlice`\n  begins. This is required to be in the range `0 .. T::Mem::BITS`.\n- `bits`: The number of live bits, beginning at `head` in `*addr`, that the\n  `BitSlice` contains. This must be no greater than `BitSlice::MAX_BITS`.\n\n# Returns\n\nIf the input parameters are valid, this returns `Some` shared reference to a\n`BitSlice`. The failure conditions causing this to return `None` are:\n\n- `head` is not less than [`T::Mem::BITS`]\n- `bits` is greater than [`BitSlice::<O, T>::MAX_BITS`]\n- `addr` is not adequately aligned to `T`\n- `addr` is so high in the memory space that the region wraps to the base of the\n  memory space\n\n# Safety\n\nThe memory region described by the returned `BitSlice` must be validly allocated\nwithin the caller’s memory management system. It must also not be modified for\nthe duration of the lifetime `'a`, unless the `T` type parameter permits safe\nshared mutation.\n\n[`BitSlice::<O, T>::MAX_BITS`]: struct.BitSlice.html#associatedconstant.MAX_BITS\n[`T::Mem::BITS`]: ../mem/trait.BitMemory.html#associatedconstant.BITS\n[`slice::from_raw_parts`]: https://doc.rust-lang.org/core/slice/fn.from_raw_parts.html\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":261057,"byte_end":262803,"line_start":1975,"line_end":2019,"column_start":1,"column_end":4}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":262804,"byte_end":262813,"line_start":2020,"line_end":2020,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1345},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":264871,"byte_end":264894,"line_start":2080,"line_end":2080,"column_start":15,"column_end":38},"name":"bits_from_raw_parts_mut","qualname":"::slice::bits_from_raw_parts_mut","value":"pub unsafe fn bits_from_raw_parts_mut<'a, O, T>(*mut T, u8, usize)\n-> Option<&'a mut BitSlice<O, T>> where O: BitOrder, T: 'a + BitStore +\nBitMemory","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `&mut BitSlice` reference from its component data.","sig":null,"attributes":[{"value":"* Constructs a `&mut BitSlice` reference from its component data.\n\nThis is logically equivalent to [`slice::from_raw_parts_mut`] for `[T]`.\n\n# Lifetimes\n\n- `'a`: The lifetime of the returned bitslice handle. This must be no longer\n  than the duration of the referent region, as it is illegal for references to\n  dangle.\n\n# Type Parameters\n\n- `O`: The ordering of bits within elements `T`.\n- `T`: The type of each memory element in the backing storage region.\n\n# Parameters\n\n- `addr`: The base address of the memory region that the `BitSlice` covers.\n- `head`: The index of the first live bit in `*addr`, at which the `BitSlice`\n  begins. This is required to be in the range `0 .. T::Mem::BITS`.\n- `bits`: The number of live bits, beginning at `head` in `*addr`, that the\n  `BitSlice` contains. This must be no greater than `BitSlice::MAX_BITS`.\n\n# Returns\n\nIf the input parameters are valid, this returns `Some` shared reference to a\n`BitSlice`. The failure conditions causing this to return `None` are:\n\n- `head` is not less than [`T::Mem::BITS`]\n- `bits` is greater than [`BitSlice::<O, T>::MAX_BITS`]\n- `addr` is not adequately aligned to `T`\n- `addr` is so high in the memory space that the region wraps to the base of the\n  memory space\n\n# Safety\n\nThe memory region described by the returned `BitSlice` must be validly allocated\nwithin the caller’s memory management system. It must also not be reachable for\nthe lifetime `'a` by any path other than references derived from the return\nvalue.\n\n[`BitSlice::<O, T>::MAX_BITS`]: struct.BitSlice.html#associatedconstant.MAX_BITS\n[`T::Mem::BITS`]: ../mem/trait.BitMemory.html#associatedconstant.BITS\n[`slice::from_raw_parts_mut`]: https://doc.rust-lang.org/core/slice/fn.from_raw_parts_mut.html\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":263095,"byte_end":264846,"line_start":2034,"line_end":2078,"column_start":1,"column_end":4}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":264847,"byte_end":264856,"line_start":2079,"line_end":2079,"column_start":1,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":1486},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":266809,"byte_end":266812,"line_start":84,"line_end":84,"column_start":9,"column_end":12},"name":"len","qualname":"<BitSlice<O, T>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bits in the slice.","sig":null,"attributes":[{"value":"/ Returns the number of bits in the slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":266518,"byte_end":266562,"line_start":70,"line_end":70,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":266564,"byte_end":266567,"line_start":71,"line_end":71,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":266569,"byte_end":266583,"line_start":72,"line_end":72,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":266585,"byte_end":266588,"line_start":73,"line_end":73,"column_start":2,"column_end":5}},{"value":"/ [`slice::len`](https://doc.rust-lang.org/std/primitive.slice.html#method.len)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":266590,"byte_end":266671,"line_start":74,"line_end":74,"column_start":2,"column_end":83}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":266673,"byte_end":266676,"line_start":75,"line_end":75,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":266678,"byte_end":266692,"line_start":76,"line_end":76,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":266694,"byte_end":266697,"line_start":77,"line_end":77,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":266699,"byte_end":266710,"line_start":78,"line_end":78,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":266712,"byte_end":266739,"line_start":79,"line_end":79,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":266741,"byte_end":266744,"line_start":80,"line_end":80,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits![0].len(), 1);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":266746,"byte_end":266780,"line_start":81,"line_end":81,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":266782,"byte_end":266789,"line_start":82,"line_end":82,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":266791,"byte_end":266800,"line_start":83,"line_end":83,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1487},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":267199,"byte_end":267207,"line_start":103,"line_end":103,"column_start":9,"column_end":17},"name":"is_empty","qualname":"<BitSlice<O, T>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the slice has a length of 0.","sig":null,"attributes":[{"value":"/ Returns `true` if the slice has a length of 0.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":266858,"byte_end":266908,"line_start":88,"line_end":88,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":266910,"byte_end":266913,"line_start":89,"line_end":89,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":266915,"byte_end":266929,"line_start":90,"line_end":90,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":266931,"byte_end":266934,"line_start":91,"line_end":91,"column_start":2,"column_end":5}},{"value":"/ [`slice::is_empty`](https://doc.rust-lang.org/std/primitive.slice.html#method.is_empty)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":266936,"byte_end":267027,"line_start":92,"line_end":92,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":267029,"byte_end":267032,"line_start":93,"line_end":93,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":267034,"byte_end":267048,"line_start":94,"line_end":94,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":267050,"byte_end":267053,"line_start":95,"line_end":95,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":267055,"byte_end":267066,"line_start":96,"line_end":96,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":267068,"byte_end":267095,"line_start":97,"line_end":97,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":267097,"byte_end":267100,"line_start":98,"line_end":98,"column_start":2,"column_end":5}},{"value":"/ assert!(bits![].is_empty());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":267102,"byte_end":267134,"line_start":99,"line_end":99,"column_start":2,"column_end":34}},{"value":"/ assert!(!bits![0].is_empty());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":267136,"byte_end":267170,"line_start":100,"line_end":100,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":267172,"byte_end":267179,"line_start":101,"line_end":101,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":267181,"byte_end":267190,"line_start":102,"line_end":102,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1488},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":267991,"byte_end":267996,"line_start":129,"line_end":129,"column_start":9,"column_end":14},"name":"first","qualname":"<BitSlice<O, T>>::first","value":"pub fn first(&Self) -> Option<&bool>","parent":null,"children":[],"decl_id":null,"docs":" Returns the first bit of the slice, or `None` if it is empty.","sig":null,"attributes":[{"value":"/ Returns the first bit of the slice, or `None` if it is empty.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":267619,"byte_end":267684,"line_start":114,"line_end":114,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":267686,"byte_end":267689,"line_start":115,"line_end":115,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":267691,"byte_end":267705,"line_start":116,"line_end":116,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":267707,"byte_end":267710,"line_start":117,"line_end":117,"column_start":2,"column_end":5}},{"value":"/ [`slice::first`](https://doc.rust-lang.org/std/primitive.slice.html#method.first)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":267712,"byte_end":267797,"line_start":118,"line_end":118,"column_start":2,"column_end":87}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":267799,"byte_end":267802,"line_start":119,"line_end":119,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":267804,"byte_end":267818,"line_start":120,"line_end":120,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":267820,"byte_end":267823,"line_start":121,"line_end":121,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":267825,"byte_end":267836,"line_start":122,"line_end":122,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":267838,"byte_end":267865,"line_start":123,"line_end":123,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":267867,"byte_end":267870,"line_start":124,"line_end":124,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(Some(&true), bits![1, 0].first());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":267872,"byte_end":267921,"line_start":125,"line_end":125,"column_start":2,"column_end":51}},{"value":"/ assert!(bits![].first().is_none());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":267923,"byte_end":267962,"line_start":126,"line_end":126,"column_start":2,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":267964,"byte_end":267971,"line_start":127,"line_end":127,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":267973,"byte_end":267982,"line_start":128,"line_end":128,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1489},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":268775,"byte_end":268784,"line_start":160,"line_end":160,"column_start":9,"column_end":18},"name":"first_mut","qualname":"<BitSlice<O, T>>::first_mut","value":"pub fn first_mut(&mut Self) -> Option<BitMut<, O, T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable pointer to the first bit of the slice, or `None` if it\n is empty.","sig":null,"attributes":[{"value":"/ Returns a mutable pointer to the first bit of the slice, or `None` if it","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":268042,"byte_end":268118,"line_start":133,"line_end":133,"column_start":2,"column_end":78}},{"value":"/ is empty.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":268120,"byte_end":268133,"line_start":134,"line_end":134,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":268135,"byte_end":268138,"line_start":135,"line_end":135,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":268140,"byte_end":268154,"line_start":136,"line_end":136,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":268156,"byte_end":268159,"line_start":137,"line_end":137,"column_start":2,"column_end":5}},{"value":"/ [`slice::first_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.first_mut)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":268161,"byte_end":268254,"line_start":138,"line_end":138,"column_start":2,"column_end":95}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":268256,"byte_end":268259,"line_start":139,"line_end":139,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":268261,"byte_end":268282,"line_start":140,"line_end":140,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":268284,"byte_end":268287,"line_start":141,"line_end":141,"column_start":2,"column_end":5}},{"value":"/ This crate cannot manifest `&mut bool` references, and must use the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":268289,"byte_end":268360,"line_start":142,"line_end":142,"column_start":2,"column_end":73}},{"value":"/ `BitMut` proxy type where `&mut bool` exists in the standard library","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":268362,"byte_end":268434,"line_start":143,"line_end":143,"column_start":2,"column_end":74}},{"value":"/ API. The proxy value must be bound as `mut` in order to write through","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":268436,"byte_end":268509,"line_start":144,"line_end":144,"column_start":2,"column_end":75}},{"value":"/ it.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":268511,"byte_end":268518,"line_start":145,"line_end":145,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":268520,"byte_end":268523,"line_start":146,"line_end":146,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":268525,"byte_end":268539,"line_start":147,"line_end":147,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":268541,"byte_end":268544,"line_start":148,"line_end":148,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":268546,"byte_end":268557,"line_start":149,"line_end":149,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":268559,"byte_end":268586,"line_start":150,"line_end":150,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":268588,"byte_end":268591,"line_start":151,"line_end":151,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":268593,"byte_end":268621,"line_start":152,"line_end":152,"column_start":2,"column_end":30}},{"value":"/ assert!(!bits[0]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":268623,"byte_end":268645,"line_start":153,"line_end":153,"column_start":2,"column_end":24}},{"value":"/ if let Some(mut first) = bits.first_mut() {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":268647,"byte_end":268694,"line_start":154,"line_end":154,"column_start":2,"column_end":49}},{"value":"/   *first = true;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":268696,"byte_end":268716,"line_start":155,"line_end":155,"column_start":2,"column_end":22}},{"value":"/ }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":268718,"byte_end":268723,"line_start":156,"line_end":156,"column_start":2,"column_end":7}},{"value":"/ assert!(bits[0]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":268725,"byte_end":268746,"line_start":157,"line_end":157,"column_start":2,"column_end":23}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":268748,"byte_end":268755,"line_start":158,"line_end":158,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":268757,"byte_end":268766,"line_start":159,"line_end":159,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1490},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":269283,"byte_end":269294,"line_start":182,"line_end":182,"column_start":9,"column_end":20},"name":"split_first","qualname":"<BitSlice<O, T>>::split_first","value":"pub fn split_first(&Self) -> Option<(&bool, &Self)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the first and all the rest of the bits of the slice, or `None`\n if it is empty.","sig":null,"attributes":[{"value":"/ Returns the first and all the rest of the bits of the slice, or `None`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":268845,"byte_end":268919,"line_start":164,"line_end":164,"column_start":2,"column_end":76}},{"value":"/ if it is empty.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":268921,"byte_end":268940,"line_start":165,"line_end":165,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":268942,"byte_end":268945,"line_start":166,"line_end":166,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":268947,"byte_end":268961,"line_start":167,"line_end":167,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":268963,"byte_end":268966,"line_start":168,"line_end":168,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_first`](https://doc.rust-lang.org/std/primitive.slice.html#split_first)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":268968,"byte_end":269058,"line_start":169,"line_end":169,"column_start":2,"column_end":92}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":269060,"byte_end":269063,"line_start":170,"line_end":170,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":269065,"byte_end":269079,"line_start":171,"line_end":171,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":269081,"byte_end":269084,"line_start":172,"line_end":172,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":269086,"byte_end":269097,"line_start":173,"line_end":173,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":269099,"byte_end":269126,"line_start":174,"line_end":174,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":269128,"byte_end":269131,"line_start":175,"line_end":175,"column_start":2,"column_end":5}},{"value":"/ if let Some((first, rest)) = bits![1].split_first() {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":269133,"byte_end":269190,"line_start":176,"line_end":176,"column_start":2,"column_end":59}},{"value":"/   assert!(*first);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":269192,"byte_end":269214,"line_start":177,"line_end":177,"column_start":2,"column_end":24}},{"value":"/   assert!(rest.is_empty());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":269216,"byte_end":269247,"line_start":178,"line_end":178,"column_start":2,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":269249,"byte_end":269254,"line_start":179,"line_end":179,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":269256,"byte_end":269263,"line_start":180,"line_end":180,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":269265,"byte_end":269274,"line_start":181,"line_end":181,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1491},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":270671,"byte_end":270686,"line_start":227,"line_end":227,"column_start":9,"column_end":24},"name":"split_first_mut","qualname":"<BitSlice<O, T>>::split_first_mut","value":"pub fn split_first_mut(&mut Self)\n-> Option<(BitMut<, O, T::Alias>, &mut BitSlice<O, T::Alias>)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the first and all the rest of the bits of the slice, or `None`\n if it is empty.","sig":null,"attributes":[{"value":"/ Returns the first and all the rest of the bits of the slice, or `None`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":269488,"byte_end":269562,"line_start":192,"line_end":192,"column_start":2,"column_end":76}},{"value":"/ if it is empty.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":269564,"byte_end":269583,"line_start":193,"line_end":193,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":269585,"byte_end":269588,"line_start":194,"line_end":194,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":269590,"byte_end":269604,"line_start":195,"line_end":195,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":269606,"byte_end":269609,"line_start":196,"line_end":196,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_first_mut`](https://doc.rust-lang.org/std/primitive.slice.html#split_first_mut)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":269611,"byte_end":269709,"line_start":197,"line_end":197,"column_start":2,"column_end":100}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":269711,"byte_end":269714,"line_start":198,"line_end":198,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":269716,"byte_end":269737,"line_start":199,"line_end":199,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":269739,"byte_end":269742,"line_start":200,"line_end":200,"column_start":2,"column_end":5}},{"value":"/ This crate cannot manifest `&mut bool` references, and must use the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":269744,"byte_end":269815,"line_start":201,"line_end":201,"column_start":2,"column_end":73}},{"value":"/ `BitMut` proxy type where `&mut bool` exists in the standard library","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":269817,"byte_end":269889,"line_start":202,"line_end":202,"column_start":2,"column_end":74}},{"value":"/ API. The proxy value must be bound as `mut` in order to write through","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":269891,"byte_end":269964,"line_start":203,"line_end":203,"column_start":2,"column_end":75}},{"value":"/ it.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":269966,"byte_end":269973,"line_start":204,"line_end":204,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":269975,"byte_end":269978,"line_start":205,"line_end":205,"column_start":2,"column_end":5}},{"value":"/ Because the references are permitted to use the same memory address,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":269980,"byte_end":270052,"line_start":206,"line_end":206,"column_start":2,"column_end":74}},{"value":"/ they are marked as aliasing in order to satisfy Rust’s requirements","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":270054,"byte_end":270127,"line_start":207,"line_end":207,"column_start":2,"column_end":73}},{"value":"/ about freedom from data races.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":270129,"byte_end":270163,"line_start":208,"line_end":208,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":270165,"byte_end":270168,"line_start":209,"line_end":209,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":270170,"byte_end":270184,"line_start":210,"line_end":210,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":270186,"byte_end":270189,"line_start":211,"line_end":211,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":270191,"byte_end":270202,"line_start":212,"line_end":212,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":270204,"byte_end":270231,"line_start":213,"line_end":213,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":270233,"byte_end":270236,"line_start":214,"line_end":214,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0; 3];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":270238,"byte_end":270269,"line_start":215,"line_end":215,"column_start":2,"column_end":33}},{"value":"/ if let Some((mut first, rest)) = bits.split_first_mut() {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":270271,"byte_end":270332,"line_start":216,"line_end":216,"column_start":2,"column_end":63}},{"value":"/   *first = true;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":270334,"byte_end":270354,"line_start":217,"line_end":217,"column_start":2,"column_end":22}},{"value":"/   *rest.get_mut(1).unwrap() = true;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":270356,"byte_end":270395,"line_start":218,"line_end":218,"column_start":2,"column_end":41}},{"value":"/ }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":270397,"byte_end":270402,"line_start":219,"line_end":219,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bits.count_ones(), 2);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":270404,"byte_end":270441,"line_start":220,"line_end":220,"column_start":2,"column_end":39}},{"value":"/ assert!(bits![mut].split_first_mut().is_none());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":270443,"byte_end":270495,"line_start":221,"line_end":221,"column_start":2,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":270497,"byte_end":270504,"line_start":222,"line_end":222,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":270506,"byte_end":270515,"line_start":223,"line_end":223,"column_start":2,"column_end":11}},{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":270629,"byte_end":270662,"line_start":226,"line_end":226,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1492},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":271394,"byte_end":271404,"line_start":258,"line_end":258,"column_start":9,"column_end":19},"name":"split_last","qualname":"<BitSlice<O, T>>::split_last","value":"pub fn split_last(&Self) -> Option<(&bool, &Self)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the last and all the rest of the bits of the slice, or `None` if\n it is empty.","sig":null,"attributes":[{"value":"/ Returns the last and all the rest of the bits of the slice, or `None` if","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":270933,"byte_end":271009,"line_start":239,"line_end":239,"column_start":2,"column_end":78}},{"value":"/ it is empty.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":271011,"byte_end":271027,"line_start":240,"line_end":240,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":271029,"byte_end":271032,"line_start":241,"line_end":241,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":271034,"byte_end":271048,"line_start":242,"line_end":242,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":271050,"byte_end":271053,"line_start":243,"line_end":243,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_last`](https://doc.rust-lang.org/std/primitive.slice.html#method.split_last)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":271055,"byte_end":271150,"line_start":244,"line_end":244,"column_start":2,"column_end":97}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":271152,"byte_end":271155,"line_start":245,"line_end":245,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":271157,"byte_end":271171,"line_start":246,"line_end":246,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":271173,"byte_end":271176,"line_start":247,"line_end":247,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":271178,"byte_end":271189,"line_start":248,"line_end":248,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":271191,"byte_end":271218,"line_start":249,"line_end":249,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":271220,"byte_end":271223,"line_start":250,"line_end":250,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":271225,"byte_end":271249,"line_start":251,"line_end":251,"column_start":2,"column_end":26}},{"value":"/ if let Some((last, rest)) = bits.split_last() {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":271251,"byte_end":271302,"line_start":252,"line_end":252,"column_start":2,"column_end":53}},{"value":"/   assert!(*last);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":271304,"byte_end":271325,"line_start":253,"line_end":253,"column_start":2,"column_end":23}},{"value":"/   assert!(rest.is_empty());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":271327,"byte_end":271358,"line_start":254,"line_end":254,"column_start":2,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":271360,"byte_end":271365,"line_start":255,"line_end":255,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":271367,"byte_end":271374,"line_start":256,"line_end":256,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":271376,"byte_end":271385,"line_start":257,"line_end":257,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1493},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":272806,"byte_end":272820,"line_start":304,"line_end":304,"column_start":9,"column_end":23},"name":"split_last_mut","qualname":"<BitSlice<O, T>>::split_last_mut","value":"pub fn split_last_mut(&mut Self)\n-> Option<(BitMut<, O, T::Alias>, &mut BitSlice<O, T::Alias>)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the last and all the rest of the bits of the slice, or `None` if\n it is empty.","sig":null,"attributes":[{"value":"/ Returns the last and all the rest of the bits of the slice, or `None` if","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":271618,"byte_end":271694,"line_start":268,"line_end":268,"column_start":2,"column_end":78}},{"value":"/ it is empty.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":271696,"byte_end":271712,"line_start":269,"line_end":269,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":271714,"byte_end":271717,"line_start":270,"line_end":270,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":271719,"byte_end":271733,"line_start":271,"line_end":271,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":271735,"byte_end":271738,"line_start":272,"line_end":272,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_last_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.split_last_mut)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":271740,"byte_end":271843,"line_start":273,"line_end":273,"column_start":2,"column_end":105}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":271845,"byte_end":271848,"line_start":274,"line_end":274,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":271850,"byte_end":271871,"line_start":275,"line_end":275,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":271873,"byte_end":271876,"line_start":276,"line_end":276,"column_start":2,"column_end":5}},{"value":"/ This crate cannot manifest `&mut bool` references, and must use the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":271878,"byte_end":271949,"line_start":277,"line_end":277,"column_start":2,"column_end":73}},{"value":"/ `BitMut` proxy type where `&mut bool` exists in the standard library","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":271951,"byte_end":272023,"line_start":278,"line_end":278,"column_start":2,"column_end":74}},{"value":"/ API. The proxy value must be bound as `mut` in order to write through","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":272025,"byte_end":272098,"line_start":279,"line_end":279,"column_start":2,"column_end":75}},{"value":"/ it.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":272100,"byte_end":272107,"line_start":280,"line_end":280,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":272109,"byte_end":272112,"line_start":281,"line_end":281,"column_start":2,"column_end":5}},{"value":"/ Because the references are permitted to use the same memory address,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":272114,"byte_end":272186,"line_start":282,"line_end":282,"column_start":2,"column_end":74}},{"value":"/ they are marked as aliasing in order to satisfy Rust’s requirements","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":272188,"byte_end":272261,"line_start":283,"line_end":283,"column_start":2,"column_end":73}},{"value":"/ about freedom from data races.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":272263,"byte_end":272297,"line_start":284,"line_end":284,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":272299,"byte_end":272302,"line_start":285,"line_end":285,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":272304,"byte_end":272318,"line_start":286,"line_end":286,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":272320,"byte_end":272323,"line_start":287,"line_end":287,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":272325,"byte_end":272336,"line_start":288,"line_end":288,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":272338,"byte_end":272365,"line_start":289,"line_end":289,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":272367,"byte_end":272370,"line_start":290,"line_end":290,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0; 3];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":272372,"byte_end":272403,"line_start":291,"line_end":291,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":272405,"byte_end":272408,"line_start":292,"line_end":292,"column_start":2,"column_end":5}},{"value":"/ if let Some((mut last, rest)) = bits.split_last_mut() {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":272410,"byte_end":272469,"line_start":293,"line_end":293,"column_start":2,"column_end":61}},{"value":"/   *last = true;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":272471,"byte_end":272490,"line_start":294,"line_end":294,"column_start":2,"column_end":21}},{"value":"/   *rest.get_mut(1).unwrap() = true;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":272492,"byte_end":272531,"line_start":295,"line_end":295,"column_start":2,"column_end":41}},{"value":"/ }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":272533,"byte_end":272538,"line_start":296,"line_end":296,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bits.count_ones(), 2);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":272540,"byte_end":272577,"line_start":297,"line_end":297,"column_start":2,"column_end":39}},{"value":"/ assert!(bits![mut].split_last_mut().is_none());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":272579,"byte_end":272630,"line_start":298,"line_end":298,"column_start":2,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":272632,"byte_end":272639,"line_start":299,"line_end":299,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":272641,"byte_end":272650,"line_start":300,"line_end":300,"column_start":2,"column_end":11}},{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":272764,"byte_end":272797,"line_start":303,"line_end":303,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1494},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":273442,"byte_end":273446,"line_start":331,"line_end":331,"column_start":9,"column_end":13},"name":"last","qualname":"<BitSlice<O, T>>::last","value":"pub fn last(&Self) -> Option<&bool>","parent":null,"children":[],"decl_id":null,"docs":" Returns the last bit of the slice, or `None` if it is empty.","sig":null,"attributes":[{"value":"/ Returns the last bit of the slice, or `None` if it is empty.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":273075,"byte_end":273139,"line_start":316,"line_end":316,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":273141,"byte_end":273144,"line_start":317,"line_end":317,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":273146,"byte_end":273160,"line_start":318,"line_end":318,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":273162,"byte_end":273165,"line_start":319,"line_end":319,"column_start":2,"column_end":5}},{"value":"/ [`slice::last`](https://doc.rust-lang.org/std/primitive.slice.html#method.last)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":273167,"byte_end":273250,"line_start":320,"line_end":320,"column_start":2,"column_end":85}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":273252,"byte_end":273255,"line_start":321,"line_end":321,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":273257,"byte_end":273271,"line_start":322,"line_end":322,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":273273,"byte_end":273276,"line_start":323,"line_end":323,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":273278,"byte_end":273289,"line_start":324,"line_end":324,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":273291,"byte_end":273318,"line_start":325,"line_end":325,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":273320,"byte_end":273323,"line_start":326,"line_end":326,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(Some(&true), bits![0, 1].last());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":273325,"byte_end":273373,"line_start":327,"line_end":327,"column_start":2,"column_end":50}},{"value":"/ assert!(bits![].last().is_none());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":273375,"byte_end":273413,"line_start":328,"line_end":328,"column_start":2,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":273415,"byte_end":273422,"line_start":329,"line_end":329,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":273424,"byte_end":273433,"line_start":330,"line_end":330,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1495},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":274276,"byte_end":274284,"line_start":364,"line_end":364,"column_start":9,"column_end":17},"name":"last_mut","qualname":"<BitSlice<O, T>>::last_mut","value":"pub fn last_mut(&mut Self) -> Option<BitMut<, O, T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable pointer to the last bit of the slice, or `None` if it\n is empty.","sig":null,"attributes":[{"value":"/ Returns a mutable pointer to the last bit of the slice, or `None` if it","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":273573,"byte_end":273648,"line_start":338,"line_end":338,"column_start":2,"column_end":77}},{"value":"/ is empty.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":273650,"byte_end":273663,"line_start":339,"line_end":339,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":273665,"byte_end":273668,"line_start":340,"line_end":340,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":273670,"byte_end":273684,"line_start":341,"line_end":341,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":273686,"byte_end":273689,"line_start":342,"line_end":342,"column_start":2,"column_end":5}},{"value":"/ [`slice::last_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.last_mut)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":273691,"byte_end":273782,"line_start":343,"line_end":343,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":273784,"byte_end":273787,"line_start":344,"line_end":344,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":273789,"byte_end":273810,"line_start":345,"line_end":345,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":273812,"byte_end":273815,"line_start":346,"line_end":346,"column_start":2,"column_end":5}},{"value":"/ This crate cannot manifest `&mut bool` references, and must use the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":273817,"byte_end":273888,"line_start":347,"line_end":347,"column_start":2,"column_end":73}},{"value":"/ `BitMut` proxy type where `&mut bool` exists in the standard library","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":273890,"byte_end":273962,"line_start":348,"line_end":348,"column_start":2,"column_end":74}},{"value":"/ API. The proxy value must be bound as `mut` in order to write through","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":273964,"byte_end":274037,"line_start":349,"line_end":349,"column_start":2,"column_end":75}},{"value":"/ it.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":274039,"byte_end":274046,"line_start":350,"line_end":350,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":274048,"byte_end":274051,"line_start":351,"line_end":351,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":274053,"byte_end":274067,"line_start":352,"line_end":352,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":274069,"byte_end":274072,"line_start":353,"line_end":353,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":274074,"byte_end":274085,"line_start":354,"line_end":354,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":274087,"byte_end":274114,"line_start":355,"line_end":355,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":274116,"byte_end":274119,"line_start":356,"line_end":356,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":274121,"byte_end":274149,"line_start":357,"line_end":357,"column_start":2,"column_end":30}},{"value":"/ if let Some(mut last) = bits.last_mut() {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":274151,"byte_end":274196,"line_start":358,"line_end":358,"column_start":2,"column_end":47}},{"value":"/   *last = true;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":274198,"byte_end":274217,"line_start":359,"line_end":359,"column_start":2,"column_end":21}},{"value":"/ }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":274219,"byte_end":274224,"line_start":360,"line_end":360,"column_start":2,"column_end":7}},{"value":"/ assert!(bits[0]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":274226,"byte_end":274247,"line_start":361,"line_end":361,"column_start":2,"column_end":23}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":274249,"byte_end":274256,"line_start":362,"line_end":362,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":274258,"byte_end":274267,"line_start":363,"line_end":363,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1496},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":275172,"byte_end":275175,"line_start":396,"line_end":396,"column_start":9,"column_end":12},"name":"get","qualname":"<BitSlice<O, T>>::get","value":"pub fn get<'a, I>(&'a Self, I) -> Option<I::Immut> where I: BitSliceIndex","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to an element or subslice depending on the type of\n index.","sig":null,"attributes":[{"value":"/ Returns a reference to an element or subslice depending on the type of","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":274426,"byte_end":274500,"line_start":371,"line_end":371,"column_start":2,"column_end":76}},{"value":"/ index.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":274502,"byte_end":274512,"line_start":372,"line_end":372,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":274514,"byte_end":274517,"line_start":373,"line_end":373,"column_start":2,"column_end":5}},{"value":"/ - If given a position, returns a reference to the element at that","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":274519,"byte_end":274588,"line_start":374,"line_end":374,"column_start":2,"column_end":71}},{"value":"/   position or `None` if out of bounds.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":274590,"byte_end":274632,"line_start":375,"line_end":375,"column_start":2,"column_end":44}},{"value":"/ - If given a range, returns the subslice corresponding to that range, or","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":274634,"byte_end":274710,"line_start":376,"line_end":376,"column_start":2,"column_end":78}},{"value":"/   `None` if out of bounds.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":274712,"byte_end":274742,"line_start":377,"line_end":377,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":274744,"byte_end":274747,"line_start":378,"line_end":378,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":274749,"byte_end":274763,"line_start":379,"line_end":379,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":274765,"byte_end":274768,"line_start":380,"line_end":380,"column_start":2,"column_end":5}},{"value":"/ [`slice::get`](https://doc.rust-lang.org/std/primitive.slice.html#method.get)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":274770,"byte_end":274851,"line_start":381,"line_end":381,"column_start":2,"column_end":83}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":274853,"byte_end":274856,"line_start":382,"line_end":382,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":274858,"byte_end":274872,"line_start":383,"line_end":383,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":274874,"byte_end":274877,"line_start":384,"line_end":384,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":274879,"byte_end":274890,"line_start":385,"line_end":385,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":274892,"byte_end":274919,"line_start":386,"line_end":386,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":274921,"byte_end":274924,"line_start":387,"line_end":387,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 0];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":274926,"byte_end":274959,"line_start":388,"line_end":388,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":274961,"byte_end":274964,"line_start":389,"line_end":389,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(Some(&true), bits.get(1));","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":274966,"byte_end":275007,"line_start":390,"line_end":390,"column_start":2,"column_end":43}},{"value":"/ assert_eq!(Some(&bits[1 .. 3]), bits.get(1 .. 3));","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":275009,"byte_end":275063,"line_start":391,"line_end":391,"column_start":2,"column_end":56}},{"value":"/ assert!(bits.get(9).is_none());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":275065,"byte_end":275100,"line_start":392,"line_end":392,"column_start":2,"column_end":37}},{"value":"/ assert!(bits.get(8 .. 10).is_none());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":275102,"byte_end":275143,"line_start":393,"line_end":393,"column_start":2,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":275145,"byte_end":275152,"line_start":394,"line_end":394,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":275154,"byte_end":275163,"line_start":395,"line_end":395,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1499},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":275938,"byte_end":275945,"line_start":425,"line_end":425,"column_start":9,"column_end":16},"name":"get_mut","qualname":"<BitSlice<O, T>>::get_mut","value":"pub fn get_mut<'a, I>(&'a mut Self, I) -> Option<I::Mut> where\nI: BitSliceIndex","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to an element or subslice depending on the\n type of index (see [`get`]) or `None` if the index is out of bounds.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to an element or subslice depending on the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":275282,"byte_end":275356,"line_start":401,"line_end":401,"column_start":2,"column_end":76}},{"value":"/ type of index (see [`get`]) or `None` if the index is out of bounds.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":275358,"byte_end":275430,"line_start":402,"line_end":402,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":275432,"byte_end":275435,"line_start":403,"line_end":403,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":275437,"byte_end":275451,"line_start":404,"line_end":404,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":275453,"byte_end":275456,"line_start":405,"line_end":405,"column_start":2,"column_end":5}},{"value":"/ [`slice::get_mut`](https://doc.rust-lang.org/core/slice/trait.SliceIndex.html#method.get_mut)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":275458,"byte_end":275555,"line_start":406,"line_end":406,"column_start":2,"column_end":99}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":275557,"byte_end":275560,"line_start":407,"line_end":407,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":275562,"byte_end":275583,"line_start":408,"line_end":408,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":275585,"byte_end":275588,"line_start":409,"line_end":409,"column_start":2,"column_end":5}},{"value":"/ When `I` is `usize`, this returns `BitMut` instead of `&mut bool`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":275590,"byte_end":275660,"line_start":410,"line_end":410,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":275662,"byte_end":275665,"line_start":411,"line_end":411,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":275667,"byte_end":275681,"line_start":412,"line_end":412,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":275683,"byte_end":275686,"line_start":413,"line_end":413,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":275688,"byte_end":275699,"line_start":414,"line_end":414,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":275701,"byte_end":275728,"line_start":415,"line_end":415,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":275730,"byte_end":275733,"line_start":416,"line_end":416,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0; 2];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":275735,"byte_end":275766,"line_start":417,"line_end":417,"column_start":2,"column_end":33}},{"value":"/ assert!(!bits.get(1).unwrap());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":275768,"byte_end":275803,"line_start":418,"line_end":418,"column_start":2,"column_end":37}},{"value":"/ *bits.get_mut(1).unwrap() = true;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":275805,"byte_end":275842,"line_start":419,"line_end":419,"column_start":2,"column_end":39}},{"value":"/ assert!(bits.get(1).unwrap());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":275844,"byte_end":275878,"line_start":420,"line_end":420,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":275880,"byte_end":275887,"line_start":421,"line_end":421,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":275889,"byte_end":275892,"line_start":422,"line_end":422,"column_start":2,"column_end":5}},{"value":"/ [`get`]: #method.get","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":275894,"byte_end":275918,"line_start":423,"line_end":423,"column_start":2,"column_end":26}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":275920,"byte_end":275929,"line_start":424,"line_end":424,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1502},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":277104,"byte_end":277117,"line_start":461,"line_end":461,"column_start":16,"column_end":29},"name":"get_unchecked","qualname":"<BitSlice<O, T>>::get_unchecked","value":"pub unsafe fn get_unchecked<'a, I>(&'a Self, I) -> I::Immut where\nI: BitSliceIndex","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to an element or subslice, without doing bounds\n checking.","sig":null,"attributes":[{"value":"/ Returns a reference to an element or subslice, without doing bounds","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":276058,"byte_end":276129,"line_start":430,"line_end":430,"column_start":2,"column_end":73}},{"value":"/ checking.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":276131,"byte_end":276144,"line_start":431,"line_end":431,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":276146,"byte_end":276149,"line_start":432,"line_end":432,"column_start":2,"column_end":5}},{"value":"/ This is generally not recommended; use with caution!","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":276151,"byte_end":276207,"line_start":433,"line_end":433,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":276209,"byte_end":276212,"line_start":434,"line_end":434,"column_start":2,"column_end":5}},{"value":"/ Unlike the original slice function, calling this with an out-of-bounds","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":276214,"byte_end":276288,"line_start":435,"line_end":435,"column_start":2,"column_end":76}},{"value":"/ index is not *technically* compile-time [undefined behavior], as the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":276290,"byte_end":276362,"line_start":436,"line_end":436,"column_start":2,"column_end":74}},{"value":"/ references produced do not actually describe local memory. However, the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":276364,"byte_end":276439,"line_start":437,"line_end":437,"column_start":2,"column_end":77}},{"value":"/ use of an out-of-bounds index will eventually cause an out-of-bounds","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":276441,"byte_end":276513,"line_start":438,"line_end":438,"column_start":2,"column_end":74}},{"value":"/ memory read, which is a runtime safety violation. For a safe alternative","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":276515,"byte_end":276591,"line_start":439,"line_end":439,"column_start":2,"column_end":78}},{"value":"/ see [`get`].","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":276593,"byte_end":276609,"line_start":440,"line_end":440,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":276611,"byte_end":276614,"line_start":441,"line_end":441,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":276616,"byte_end":276630,"line_start":442,"line_end":442,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":276632,"byte_end":276635,"line_start":443,"line_end":443,"column_start":2,"column_end":5}},{"value":"/ [`slice::get_unchecked`](https://doc.rust-lang.org/std/primitive.slice.html#method.get_unchecked)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":276637,"byte_end":276738,"line_start":444,"line_end":444,"column_start":2,"column_end":103}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":276740,"byte_end":276743,"line_start":445,"line_end":445,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":276745,"byte_end":276759,"line_start":446,"line_end":446,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":276761,"byte_end":276764,"line_start":447,"line_end":447,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":276766,"byte_end":276777,"line_start":448,"line_end":448,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":276779,"byte_end":276806,"line_start":449,"line_end":449,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":276808,"byte_end":276811,"line_start":450,"line_end":450,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":276813,"byte_end":276840,"line_start":451,"line_end":451,"column_start":2,"column_end":29}},{"value":"/ unsafe {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":276842,"byte_end":276854,"line_start":452,"line_end":452,"column_start":2,"column_end":14}},{"value":"/   assert!(*bits.get_unchecked(1));","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":276856,"byte_end":276894,"line_start":453,"line_end":453,"column_start":2,"column_end":40}},{"value":"/ }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":276896,"byte_end":276901,"line_start":454,"line_end":454,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":276903,"byte_end":276910,"line_start":455,"line_end":455,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":276912,"byte_end":276915,"line_start":456,"line_end":456,"column_start":2,"column_end":5}},{"value":"/ [`get`]: #method.get","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":276917,"byte_end":276941,"line_start":457,"line_end":457,"column_start":2,"column_end":26}},{"value":"/ [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":276943,"byte_end":277039,"line_start":458,"line_end":458,"column_start":2,"column_end":98}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":277041,"byte_end":277050,"line_start":459,"line_end":459,"column_start":2,"column_end":11}},{"value":"allow(clippy :: missing_safety_doc)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":277052,"byte_end":277088,"line_start":460,"line_end":460,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1505},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":278341,"byte_end":278358,"line_start":499,"line_end":499,"column_start":16,"column_end":33},"name":"get_unchecked_mut","qualname":"<BitSlice<O, T>>::get_unchecked_mut","value":"pub unsafe fn get_unchecked_mut<'a, I>(&'a mut Self, I) -> I::Mut where\nI: BitSliceIndex","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the output at this location, without\n doing bounds checking.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the output at this location, without","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":277226,"byte_end":277297,"line_start":466,"line_end":466,"column_start":2,"column_end":73}},{"value":"/ doing bounds checking.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":277299,"byte_end":277325,"line_start":467,"line_end":467,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":277327,"byte_end":277330,"line_start":468,"line_end":468,"column_start":2,"column_end":5}},{"value":"/ This is generally not recommended; use with caution!","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":277332,"byte_end":277388,"line_start":469,"line_end":469,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":277390,"byte_end":277393,"line_start":470,"line_end":470,"column_start":2,"column_end":5}},{"value":"/ Unlike the original slice function, calling this with an out-of-bounds","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":277395,"byte_end":277469,"line_start":471,"line_end":471,"column_start":2,"column_end":76}},{"value":"/ index is not *technically* compile-time [undefined behavior], as the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":277471,"byte_end":277543,"line_start":472,"line_end":472,"column_start":2,"column_end":74}},{"value":"/ references produced do not actually describe local memory. However, the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":277545,"byte_end":277620,"line_start":473,"line_end":473,"column_start":2,"column_end":77}},{"value":"/ use of an out-of-bounds index will eventually cause an out-of-bounds","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":277622,"byte_end":277694,"line_start":474,"line_end":474,"column_start":2,"column_end":74}},{"value":"/ memory write, which is a runtime safety violation. For a safe","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":277696,"byte_end":277761,"line_start":475,"line_end":475,"column_start":2,"column_end":67}},{"value":"/ alternative see [`get_mut`].","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":277763,"byte_end":277795,"line_start":476,"line_end":476,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":277797,"byte_end":277800,"line_start":477,"line_end":477,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":277802,"byte_end":277816,"line_start":478,"line_end":478,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":277818,"byte_end":277821,"line_start":479,"line_end":479,"column_start":2,"column_end":5}},{"value":"/ [`slice::get_unchecked_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.get_unchecked_mut)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":277823,"byte_end":277932,"line_start":480,"line_end":480,"column_start":2,"column_end":111}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":277934,"byte_end":277937,"line_start":481,"line_end":481,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":277939,"byte_end":277953,"line_start":482,"line_end":482,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":277955,"byte_end":277958,"line_start":483,"line_end":483,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":277960,"byte_end":277971,"line_start":484,"line_end":484,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":277973,"byte_end":278000,"line_start":485,"line_end":485,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":278002,"byte_end":278005,"line_start":486,"line_end":486,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0; 2];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":278007,"byte_end":278038,"line_start":487,"line_end":487,"column_start":2,"column_end":33}},{"value":"/ unsafe {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":278040,"byte_end":278052,"line_start":488,"line_end":488,"column_start":2,"column_end":14}},{"value":"/   let mut bit = bits.get_unchecked_mut(1);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":278054,"byte_end":278100,"line_start":489,"line_end":489,"column_start":2,"column_end":48}},{"value":"/   *bit = true;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":278102,"byte_end":278120,"line_start":490,"line_end":490,"column_start":2,"column_end":20}},{"value":"/ }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":278122,"byte_end":278127,"line_start":491,"line_end":491,"column_start":2,"column_end":7}},{"value":"/ assert!(bits[1]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":278129,"byte_end":278150,"line_start":492,"line_end":492,"column_start":2,"column_end":23}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":278152,"byte_end":278159,"line_start":493,"line_end":493,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":278161,"byte_end":278164,"line_start":494,"line_end":494,"column_start":2,"column_end":5}},{"value":"/ [`get_mut`]: #method.get_mut","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":278166,"byte_end":278198,"line_start":495,"line_end":495,"column_start":2,"column_end":34}},{"value":"/ [undefined behavior]: ../../reference/behavior-considered-undefined.html","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":278200,"byte_end":278276,"line_start":496,"line_end":496,"column_start":2,"column_end":78}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":278278,"byte_end":278287,"line_start":497,"line_end":497,"column_start":2,"column_end":11}},{"value":"allow(clippy :: missing_safety_doc)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":278289,"byte_end":278325,"line_start":498,"line_end":498,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1508},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":280297,"byte_end":280303,"line_start":556,"line_end":556,"column_start":9,"column_end":15},"name":"as_ptr","qualname":"<BitSlice<O, T>>::as_ptr","value":"pub fn as_ptr(&Self) -> *const Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw bit-slice pointer to the region.","sig":null,"attributes":[{"value":"/ Returns a raw bit-slice pointer to the region.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":278473,"byte_end":278523,"line_start":504,"line_end":504,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":278525,"byte_end":278528,"line_start":505,"line_end":505,"column_start":2,"column_end":5}},{"value":"/ The caller must ensure that the slice outlives the pointer this function","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":278530,"byte_end":278606,"line_start":506,"line_end":506,"column_start":2,"column_end":78}},{"value":"/ returns, or else it will end up pointing to garbage.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":278608,"byte_end":278664,"line_start":507,"line_end":507,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":278666,"byte_end":278669,"line_start":508,"line_end":508,"column_start":2,"column_end":5}},{"value":"/ The caller must also ensure that the memory the pointer","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":278671,"byte_end":278730,"line_start":509,"line_end":509,"column_start":2,"column_end":61}},{"value":"/ (non-transitively) points to is only written to if `T` allows shared","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":278732,"byte_end":278804,"line_start":510,"line_end":510,"column_start":2,"column_end":74}},{"value":"/ mutation, using this pointer or any pointer derived from it. If you need","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":278806,"byte_end":278882,"line_start":511,"line_end":511,"column_start":2,"column_end":78}},{"value":"/ to mutate the contents of the slice, use [`as_mut_ptr`].","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":278884,"byte_end":278944,"line_start":512,"line_end":512,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":278946,"byte_end":278949,"line_start":513,"line_end":513,"column_start":2,"column_end":5}},{"value":"/ Modifying the container (such as `BitVec`) referenced by this slice may","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":278951,"byte_end":279026,"line_start":514,"line_end":514,"column_start":2,"column_end":77}},{"value":"/ cause its buffer to be reällocated, which would also make any pointers","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":279028,"byte_end":279103,"line_start":515,"line_end":515,"column_start":2,"column_end":76}},{"value":"/ to it invalid.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":279105,"byte_end":279123,"line_start":516,"line_end":516,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":279125,"byte_end":279128,"line_start":517,"line_end":517,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":279130,"byte_end":279144,"line_start":518,"line_end":518,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":279146,"byte_end":279149,"line_start":519,"line_end":519,"column_start":2,"column_end":5}},{"value":"/ [`slice::as_ptr`](https://doc.rust-lang.org/std/primitive.slice.html#method.as_ptr)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":279151,"byte_end":279238,"line_start":520,"line_end":520,"column_start":2,"column_end":89}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":279240,"byte_end":279243,"line_start":521,"line_end":521,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":279245,"byte_end":279266,"line_start":522,"line_end":522,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":279268,"byte_end":279271,"line_start":523,"line_end":523,"column_start":2,"column_end":5}},{"value":"/ This returns `*const BitSlice`, which is the equivalent of `*const [T]`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":279273,"byte_end":279348,"line_start":524,"line_end":524,"column_start":2,"column_end":77}},{"value":"/ instead of `*const T`. The pointer encoding used requires more than one","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":279350,"byte_end":279425,"line_start":525,"line_end":525,"column_start":2,"column_end":77}},{"value":"/ CPU word of space to address a single bit, so there is no advantage to","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":279427,"byte_end":279501,"line_start":526,"line_end":526,"column_start":2,"column_end":76}},{"value":"/ removing the length information from the encoded pointer value.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":279503,"byte_end":279570,"line_start":527,"line_end":527,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":279572,"byte_end":279575,"line_start":528,"line_end":528,"column_start":2,"column_end":5}},{"value":"/ # Notes","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":279577,"byte_end":279588,"line_start":529,"line_end":529,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":279590,"byte_end":279593,"line_start":530,"line_end":530,"column_start":2,"column_end":5}},{"value":"/ You **cannot** use any of the methods in the `pointer` fundamental type","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":279595,"byte_end":279670,"line_start":531,"line_end":531,"column_start":2,"column_end":77}},{"value":"/ or the `core::ptr` module on the `*_ BitSlice` type. This pointer","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":279672,"byte_end":279741,"line_start":532,"line_end":532,"column_start":2,"column_end":71}},{"value":"/ retains the `bitvec`-specific value encoding, and is incomprehensible by","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":279743,"byte_end":279819,"line_start":533,"line_end":533,"column_start":2,"column_end":78}},{"value":"/ the Rust standard library.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":279821,"byte_end":279851,"line_start":534,"line_end":534,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":279853,"byte_end":279856,"line_start":535,"line_end":535,"column_start":2,"column_end":5}},{"value":"/ The only thing you can do with this pointer is dereference it.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":279858,"byte_end":279924,"line_start":536,"line_end":536,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":279926,"byte_end":279929,"line_start":537,"line_end":537,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":279931,"byte_end":279945,"line_start":538,"line_end":538,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":279947,"byte_end":279950,"line_start":539,"line_end":539,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":279952,"byte_end":279963,"line_start":540,"line_end":540,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":279965,"byte_end":279992,"line_start":541,"line_end":541,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":279994,"byte_end":279997,"line_start":542,"line_end":542,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 1, 0];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":279999,"byte_end":280032,"line_start":543,"line_end":543,"column_start":2,"column_end":35}},{"value":"/ let bits_ptr = bits.as_ptr();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":280034,"byte_end":280067,"line_start":544,"line_end":544,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":280069,"byte_end":280072,"line_start":545,"line_end":545,"column_start":2,"column_end":5}},{"value":"/ for i in 0 .. bits.len() {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":280074,"byte_end":280104,"line_start":546,"line_end":546,"column_start":2,"column_end":32}},{"value":"/   assert_eq!(bits[i], unsafe {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":280106,"byte_end":280140,"line_start":547,"line_end":547,"column_start":2,"column_end":36}},{"value":"/     (&*bits_ptr)[i]","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":280142,"byte_end":280165,"line_start":548,"line_end":548,"column_start":2,"column_end":25}},{"value":"/   });","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":280167,"byte_end":280176,"line_start":549,"line_end":549,"column_start":2,"column_end":11}},{"value":"/ }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":280178,"byte_end":280183,"line_start":550,"line_end":550,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":280185,"byte_end":280192,"line_start":551,"line_end":551,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":280194,"byte_end":280197,"line_start":552,"line_end":552,"column_start":2,"column_end":5}},{"value":"/ [`as_mut_ptr`]: #method.as_mut_ptr","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":280199,"byte_end":280237,"line_start":553,"line_end":553,"column_start":2,"column_end":40}},{"value":"inline(always)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":280239,"byte_end":280256,"line_start":554,"line_end":554,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":280258,"byte_end":280288,"line_start":555,"line_end":555,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1509},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":281838,"byte_end":281848,"line_start":602,"line_end":602,"column_start":9,"column_end":19},"name":"as_mut_ptr","qualname":"<BitSlice<O, T>>::as_mut_ptr","value":"pub fn as_mut_ptr(&mut Self) -> *mut Self","parent":null,"children":[],"decl_id":null,"docs":" Returns an unsafe mutable bit-slice pointer to the region.","sig":null,"attributes":[{"value":"/ Returns an unsafe mutable bit-slice pointer to the region.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":280355,"byte_end":280417,"line_start":560,"line_end":560,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":280419,"byte_end":280422,"line_start":561,"line_end":561,"column_start":2,"column_end":5}},{"value":"/ The caller must ensure that the slice outlives the pointer this function","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":280424,"byte_end":280500,"line_start":562,"line_end":562,"column_start":2,"column_end":78}},{"value":"/ returns, or else it will end up pointing to garbage.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":280502,"byte_end":280558,"line_start":563,"line_end":563,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":280560,"byte_end":280563,"line_start":564,"line_end":564,"column_start":2,"column_end":5}},{"value":"/ Modifying the container (such as `BitVec`) referenced by this slice may","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":280565,"byte_end":280640,"line_start":565,"line_end":565,"column_start":2,"column_end":77}},{"value":"/ cause its buffer to be reällocated, which would also make any pointers","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":280642,"byte_end":280717,"line_start":566,"line_end":566,"column_start":2,"column_end":76}},{"value":"/ to it invalid.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":280719,"byte_end":280737,"line_start":567,"line_end":567,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":280739,"byte_end":280742,"line_start":568,"line_end":568,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":280744,"byte_end":280758,"line_start":569,"line_end":569,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":280760,"byte_end":280763,"line_start":570,"line_end":570,"column_start":2,"column_end":5}},{"value":"/ [`slice::as_mut_ptr`](https://doc.rust-lang.org/std/primitive.slice.html#method.as_mut_ptr)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":280765,"byte_end":280860,"line_start":571,"line_end":571,"column_start":2,"column_end":97}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":280862,"byte_end":280865,"line_start":572,"line_end":572,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":280867,"byte_end":280888,"line_start":573,"line_end":573,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":280890,"byte_end":280893,"line_start":574,"line_end":574,"column_start":2,"column_end":5}},{"value":"/ This returns `*mut BitSlice`, which is the equivalont of `*mut [T]`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":280895,"byte_end":280966,"line_start":575,"line_end":575,"column_start":2,"column_end":73}},{"value":"/ instead of `*mut T`. The pointer encoding used requires more than one","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":280968,"byte_end":281041,"line_start":576,"line_end":576,"column_start":2,"column_end":75}},{"value":"/ CPU word of space to address a single bit, so there is no advantage to","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":281043,"byte_end":281117,"line_start":577,"line_end":577,"column_start":2,"column_end":76}},{"value":"/ removing the length information from the encoded pointer value.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":281119,"byte_end":281186,"line_start":578,"line_end":578,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":281188,"byte_end":281191,"line_start":579,"line_end":579,"column_start":2,"column_end":5}},{"value":"/ # Notes","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":281193,"byte_end":281204,"line_start":580,"line_end":580,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":281206,"byte_end":281209,"line_start":581,"line_end":581,"column_start":2,"column_end":5}},{"value":"/ You **cannot** use any of the methods in the `pointer` fundamental type","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":281211,"byte_end":281286,"line_start":582,"line_end":582,"column_start":2,"column_end":77}},{"value":"/ or the `core::ptr` module on the `*_ BitSlice` type. This pointer","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":281288,"byte_end":281357,"line_start":583,"line_end":583,"column_start":2,"column_end":71}},{"value":"/ retains the `bitvec`-specific value encoding, and is incomprehensible by","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":281359,"byte_end":281435,"line_start":584,"line_end":584,"column_start":2,"column_end":78}},{"value":"/ the Rust standard library.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":281437,"byte_end":281467,"line_start":585,"line_end":585,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":281469,"byte_end":281472,"line_start":586,"line_end":586,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":281474,"byte_end":281488,"line_start":587,"line_end":587,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":281490,"byte_end":281493,"line_start":588,"line_end":588,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":281495,"byte_end":281506,"line_start":589,"line_end":589,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":281508,"byte_end":281535,"line_start":590,"line_end":590,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":281537,"byte_end":281540,"line_start":591,"line_end":591,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut Lsb0, u8; 0; 8];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":281542,"byte_end":281583,"line_start":592,"line_end":592,"column_start":2,"column_end":43}},{"value":"/ let bits_ptr = bits.as_mut_ptr();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":281585,"byte_end":281622,"line_start":593,"line_end":593,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":281624,"byte_end":281627,"line_start":594,"line_end":594,"column_start":2,"column_end":5}},{"value":"/ for i in 0 .. bits.len() {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":281629,"byte_end":281659,"line_start":595,"line_end":595,"column_start":2,"column_end":32}},{"value":"/   unsafe { &mut *bits_ptr }.set(i, i % 3 == 0);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":281661,"byte_end":281712,"line_start":596,"line_end":596,"column_start":2,"column_end":53}},{"value":"/ }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":281714,"byte_end":281719,"line_start":597,"line_end":597,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bits.as_slice()[0], 0b0100_1001);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":281721,"byte_end":281769,"line_start":598,"line_end":598,"column_start":2,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":281771,"byte_end":281778,"line_start":599,"line_end":599,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":281780,"byte_end":281797,"line_start":600,"line_end":600,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":281799,"byte_end":281829,"line_start":601,"line_end":601,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1510},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":282411,"byte_end":282415,"line_start":631,"line_end":631,"column_start":9,"column_end":13},"name":"swap","qualname":"<BitSlice<O, T>>::swap","value":"pub fn swap(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Swaps two bits in the slice.","sig":null,"attributes":[{"value":"/ Swaps two bits in the slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":281900,"byte_end":281932,"line_start":606,"line_end":606,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":281934,"byte_end":281937,"line_start":607,"line_end":607,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":281939,"byte_end":281953,"line_start":608,"line_end":608,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":281955,"byte_end":281958,"line_start":609,"line_end":609,"column_start":2,"column_end":5}},{"value":"/ [`slice::swap`](https://doc.rust-lang.org/std/primitive.slice.html#method.swap)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":281960,"byte_end":282043,"line_start":610,"line_end":610,"column_start":2,"column_end":85}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":282045,"byte_end":282048,"line_start":611,"line_end":611,"column_start":2,"column_end":5}},{"value":"/ # Arguments","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":282050,"byte_end":282065,"line_start":612,"line_end":612,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":282067,"byte_end":282070,"line_start":613,"line_end":613,"column_start":2,"column_end":5}},{"value":"/ - `a`: The index of the first bit","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":282072,"byte_end":282109,"line_start":614,"line_end":614,"column_start":2,"column_end":39}},{"value":"/ - `b`: The index of the second bit","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":282111,"byte_end":282149,"line_start":615,"line_end":615,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":282151,"byte_end":282154,"line_start":616,"line_end":616,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":282156,"byte_end":282168,"line_start":617,"line_end":617,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":282170,"byte_end":282173,"line_start":618,"line_end":618,"column_start":2,"column_end":5}},{"value":"/ Panics if `a` or `b` are out of bounds.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":282175,"byte_end":282218,"line_start":619,"line_end":619,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":282220,"byte_end":282223,"line_start":620,"line_end":620,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":282225,"byte_end":282239,"line_start":621,"line_end":621,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":282241,"byte_end":282244,"line_start":622,"line_end":622,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":282246,"byte_end":282257,"line_start":623,"line_end":623,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":282259,"byte_end":282286,"line_start":624,"line_end":624,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":282288,"byte_end":282291,"line_start":625,"line_end":625,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0, 1];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":282293,"byte_end":282324,"line_start":626,"line_end":626,"column_start":2,"column_end":33}},{"value":"/ bits.swap(0, 1);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":282326,"byte_end":282346,"line_start":627,"line_end":627,"column_start":2,"column_end":22}},{"value":"/ assert_eq!(bits, bits![1, 0]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":282348,"byte_end":282382,"line_start":628,"line_end":628,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":282384,"byte_end":282391,"line_start":629,"line_end":629,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":282393,"byte_end":282402,"line_start":630,"line_end":630,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1511},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":283056,"byte_end":283063,"line_start":657,"line_end":657,"column_start":9,"column_end":16},"name":"reverse","qualname":"<BitSlice<O, T>>::reverse","value":"pub fn reverse(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reverses the order of bits in the slice, in place.","sig":null,"attributes":[{"value":"/ Reverses the order of bits in the slice, in place.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":282639,"byte_end":282693,"line_start":640,"line_end":640,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":282695,"byte_end":282698,"line_start":641,"line_end":641,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":282700,"byte_end":282714,"line_start":642,"line_end":642,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":282716,"byte_end":282719,"line_start":643,"line_end":643,"column_start":2,"column_end":5}},{"value":"/ [`slice::reverse`](https://doc.rust-lang.org/std/primitive.slice.html#method.reverse)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":282721,"byte_end":282810,"line_start":644,"line_end":644,"column_start":2,"column_end":91}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":282812,"byte_end":282815,"line_start":645,"line_end":645,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":282817,"byte_end":282831,"line_start":646,"line_end":646,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":282833,"byte_end":282836,"line_start":647,"line_end":647,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":282838,"byte_end":282849,"line_start":648,"line_end":648,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":282851,"byte_end":282878,"line_start":649,"line_end":649,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":282880,"byte_end":282883,"line_start":650,"line_end":650,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0b1_1001100u8;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":282885,"byte_end":282918,"line_start":651,"line_end":651,"column_start":2,"column_end":35}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":282920,"byte_end":282964,"line_start":652,"line_end":652,"column_start":2,"column_end":46}},{"value":"/ bits[1 ..].reverse();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":282966,"byte_end":282991,"line_start":653,"line_end":653,"column_start":2,"column_end":27}},{"value":"/ assert_eq!(data, 0b1_0011001);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":282993,"byte_end":283027,"line_start":654,"line_end":654,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":283029,"byte_end":283036,"line_start":655,"line_end":655,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":283038,"byte_end":283047,"line_start":656,"line_end":656,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1512},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":284671,"byte_end":284675,"line_start":709,"line_end":709,"column_start":9,"column_end":13},"name":"iter","qualname":"<BitSlice<O, T>>::iter","value":"pub fn iter(&Self) -> Iter<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over the slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":284148,"byte_end":284187,"line_start":689,"line_end":689,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":284189,"byte_end":284192,"line_start":690,"line_end":690,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":284194,"byte_end":284208,"line_start":691,"line_end":691,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":284210,"byte_end":284213,"line_start":692,"line_end":692,"column_start":2,"column_end":5}},{"value":"/ [`slice::iter`](https://doc.rust-lang.org/std/primitive.slice.html#method.iter)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":284215,"byte_end":284298,"line_start":693,"line_end":693,"column_start":2,"column_end":85}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":284300,"byte_end":284303,"line_start":694,"line_end":694,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":284305,"byte_end":284319,"line_start":695,"line_end":695,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":284321,"byte_end":284324,"line_start":696,"line_end":696,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":284326,"byte_end":284337,"line_start":697,"line_end":697,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":284339,"byte_end":284366,"line_start":698,"line_end":698,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":284368,"byte_end":284371,"line_start":699,"line_end":699,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 0, 0, 0, 0, 1];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":284373,"byte_end":284418,"line_start":700,"line_end":700,"column_start":2,"column_end":47}},{"value":"/ let mut iterator = bits.iter();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":284420,"byte_end":284455,"line_start":701,"line_end":701,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":284457,"byte_end":284460,"line_start":702,"line_end":702,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iterator.next(), Some(&false));","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":284462,"byte_end":284508,"line_start":703,"line_end":703,"column_start":2,"column_end":48}},{"value":"/ assert_eq!(iterator.next(), Some(&true));","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":284510,"byte_end":284555,"line_start":704,"line_end":704,"column_start":2,"column_end":47}},{"value":"/ assert_eq!(iterator.nth(5), Some(&true));","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":284557,"byte_end":284602,"line_start":705,"line_end":705,"column_start":2,"column_end":47}},{"value":"/ assert_eq!(iterator.next(), None);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":284604,"byte_end":284642,"line_start":706,"line_end":706,"column_start":2,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":284644,"byte_end":284651,"line_start":707,"line_end":707,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":284653,"byte_end":284662,"line_start":708,"line_end":708,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1513},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":285187,"byte_end":285195,"line_start":731,"line_end":731,"column_start":9,"column_end":17},"name":"iter_mut","qualname":"<BitSlice<O, T>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that allows modifying each bit.","sig":null,"attributes":[{"value":"/ Returns an iterator that allows modifying each bit.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":284723,"byte_end":284778,"line_start":713,"line_end":713,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":284780,"byte_end":284783,"line_start":714,"line_end":714,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":284785,"byte_end":284799,"line_start":715,"line_end":715,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":284801,"byte_end":284804,"line_start":716,"line_end":716,"column_start":2,"column_end":5}},{"value":"/ [`slice::iter_mut`](https://doc.rust-lang.org/std/primitive.slice.html#Method.iter_mut)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":284806,"byte_end":284897,"line_start":717,"line_end":717,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":284899,"byte_end":284902,"line_start":718,"line_end":718,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":284904,"byte_end":284918,"line_start":719,"line_end":719,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":284920,"byte_end":284923,"line_start":720,"line_end":720,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":284925,"byte_end":284936,"line_start":721,"line_end":721,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":284938,"byte_end":284965,"line_start":722,"line_end":722,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":284967,"byte_end":284970,"line_start":723,"line_end":723,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut Msb0, u8; 0; 8];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":284972,"byte_end":285013,"line_start":724,"line_end":724,"column_start":2,"column_end":43}},{"value":"/ for (idx, mut elem) in bits.iter_mut().enumerate() {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":285015,"byte_end":285071,"line_start":725,"line_end":725,"column_start":2,"column_end":58}},{"value":"/   *elem = idx % 3 == 0;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":285073,"byte_end":285100,"line_start":726,"line_end":726,"column_start":2,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":285102,"byte_end":285107,"line_start":727,"line_end":727,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bits.as_slice()[0], 0b100_100_10);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":285109,"byte_end":285158,"line_start":728,"line_end":728,"column_start":2,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":285160,"byte_end":285167,"line_start":729,"line_end":729,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":285169,"byte_end":285178,"line_start":730,"line_end":730,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1514},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":286211,"byte_end":286218,"line_start":771,"line_end":771,"column_start":9,"column_end":16},"name":"windows","qualname":"<BitSlice<O, T>>::windows","value":"pub fn windows(&Self, usize) -> Windows<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all contiguous windows of length `size`. The\n windows overlap. If the slice is shorter than `size`, the iterator\n returns no values.","sig":null,"attributes":[{"value":"/ Returns an iterator over all contiguous windows of length `size`. The","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":285250,"byte_end":285323,"line_start":735,"line_end":735,"column_start":2,"column_end":75}},{"value":"/ windows overlap. If the slice is shorter than `size`, the iterator","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":285325,"byte_end":285395,"line_start":736,"line_end":736,"column_start":2,"column_end":72}},{"value":"/ returns no values.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":285397,"byte_end":285419,"line_start":737,"line_end":737,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":285421,"byte_end":285424,"line_start":738,"line_end":738,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":285426,"byte_end":285440,"line_start":739,"line_end":739,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":285442,"byte_end":285445,"line_start":740,"line_end":740,"column_start":2,"column_end":5}},{"value":"/ [`slice::windows`](https://doc.rust-lang.org/std/primitive.slice.html#method.windows)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":285447,"byte_end":285536,"line_start":741,"line_end":741,"column_start":2,"column_end":91}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":285538,"byte_end":285541,"line_start":742,"line_end":742,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":285543,"byte_end":285555,"line_start":743,"line_end":743,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":285557,"byte_end":285560,"line_start":744,"line_end":744,"column_start":2,"column_end":5}},{"value":"/ Panics if `size` is 0.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":285562,"byte_end":285588,"line_start":745,"line_end":745,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":285590,"byte_end":285593,"line_start":746,"line_end":746,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":285595,"byte_end":285609,"line_start":747,"line_end":747,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":285611,"byte_end":285614,"line_start":748,"line_end":748,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":285616,"byte_end":285627,"line_start":749,"line_end":749,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":285629,"byte_end":285656,"line_start":750,"line_end":750,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":285658,"byte_end":285661,"line_start":751,"line_end":751,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1, 0, 1, 0, 0, 1, 0, 1];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":285663,"byte_end":285708,"line_start":752,"line_end":752,"column_start":2,"column_end":47}},{"value":"/ let mut iter = bits.windows(6);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":285710,"byte_end":285745,"line_start":753,"line_end":753,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":285747,"byte_end":285750,"line_start":754,"line_end":754,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[.. 6]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":285752,"byte_end":285802,"line_start":755,"line_end":755,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[1 .. 7]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":285804,"byte_end":285856,"line_start":756,"line_end":756,"column_start":2,"column_end":54}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[2 ..]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":285858,"byte_end":285908,"line_start":757,"line_end":757,"column_start":2,"column_end":52}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":285910,"byte_end":285945,"line_start":758,"line_end":758,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":285947,"byte_end":285954,"line_start":759,"line_end":759,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":285956,"byte_end":285959,"line_start":760,"line_end":760,"column_start":2,"column_end":5}},{"value":"/ If the slice is shorter than `size`:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":285961,"byte_end":286001,"line_start":761,"line_end":761,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":286003,"byte_end":286006,"line_start":762,"line_end":762,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":286008,"byte_end":286019,"line_start":763,"line_end":763,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":286021,"byte_end":286048,"line_start":764,"line_end":764,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":286050,"byte_end":286053,"line_start":765,"line_end":765,"column_start":2,"column_end":5}},{"value":"/ let bits = BitSlice::<LocalBits, usize>::empty();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":286055,"byte_end":286108,"line_start":766,"line_end":766,"column_start":2,"column_end":55}},{"value":"/ let mut iter = bits.windows(1);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":286110,"byte_end":286145,"line_start":767,"line_end":767,"column_start":2,"column_end":37}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":286147,"byte_end":286182,"line_start":768,"line_end":768,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":286184,"byte_end":286191,"line_start":769,"line_end":769,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":286193,"byte_end":286202,"line_start":770,"line_end":770,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1515},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":287476,"byte_end":287482,"line_start":812,"line_end":812,"column_start":9,"column_end":15},"name":"chunks","qualname":"<BitSlice<O, T>>::chunks","value":"pub fn chunks(&Self, usize) -> Chunks<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the beginning of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":286341,"byte_end":286411,"line_start":776,"line_end":776,"column_start":2,"column_end":72}},{"value":"/ starting at the beginning of the slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":286413,"byte_end":286456,"line_start":777,"line_end":777,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":286458,"byte_end":286461,"line_start":778,"line_end":778,"column_start":2,"column_end":5}},{"value":"/ The chunks are slices and do not overlap. If `chunk_size` does not","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":286463,"byte_end":286533,"line_start":779,"line_end":779,"column_start":2,"column_end":72}},{"value":"/ divide the length of the slice, then the last chunk will not have length","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":286535,"byte_end":286611,"line_start":780,"line_end":780,"column_start":2,"column_end":78}},{"value":"/ `chunk_size`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":286613,"byte_end":286630,"line_start":781,"line_end":781,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":286632,"byte_end":286635,"line_start":782,"line_end":782,"column_start":2,"column_end":5}},{"value":"/ See [`chunks_exact`] for a variant of this iterator that returns chunks","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":286637,"byte_end":286712,"line_start":783,"line_end":783,"column_start":2,"column_end":77}},{"value":"/ of always exactly `chunk_size` bits, and [`rchunks`] for the same","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":286714,"byte_end":286783,"line_start":784,"line_end":784,"column_start":2,"column_end":71}},{"value":"/ iterator but starting at the end of the slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":286785,"byte_end":286835,"line_start":785,"line_end":785,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":286837,"byte_end":286840,"line_start":786,"line_end":786,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":286842,"byte_end":286856,"line_start":787,"line_end":787,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":286858,"byte_end":286861,"line_start":788,"line_end":788,"column_start":2,"column_end":5}},{"value":"/ [`slice::chunks`](https://doc.rust-lang.org/std/primitive.slice.html#method.chunks)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":286863,"byte_end":286950,"line_start":789,"line_end":789,"column_start":2,"column_end":89}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":286952,"byte_end":286955,"line_start":790,"line_end":790,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":286957,"byte_end":286969,"line_start":791,"line_end":791,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":286971,"byte_end":286974,"line_start":792,"line_end":792,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":286976,"byte_end":287008,"line_start":793,"line_end":793,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":287010,"byte_end":287013,"line_start":794,"line_end":794,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":287015,"byte_end":287029,"line_start":795,"line_end":795,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":287031,"byte_end":287034,"line_start":796,"line_end":796,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":287036,"byte_end":287047,"line_start":797,"line_end":797,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":287049,"byte_end":287076,"line_start":798,"line_end":798,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":287078,"byte_end":287081,"line_start":799,"line_end":799,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 0, 1, 1, 1, 1, 0, 0];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":287083,"byte_end":287128,"line_start":800,"line_end":800,"column_start":2,"column_end":47}},{"value":"/ let mut iter = bits.chunks(3);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":287130,"byte_end":287164,"line_start":801,"line_end":801,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":287166,"byte_end":287169,"line_start":802,"line_end":802,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[.. 3]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":287171,"byte_end":287221,"line_start":803,"line_end":803,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[3 .. 6]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":287223,"byte_end":287275,"line_start":804,"line_end":804,"column_start":2,"column_end":54}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[6 ..]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":287277,"byte_end":287327,"line_start":805,"line_end":805,"column_start":2,"column_end":52}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":287329,"byte_end":287364,"line_start":806,"line_end":806,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":287366,"byte_end":287373,"line_start":807,"line_end":807,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":287375,"byte_end":287378,"line_start":808,"line_end":808,"column_start":2,"column_end":5}},{"value":"/ [`chunks_exact`]: #method.chunks_exact","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":287380,"byte_end":287422,"line_start":809,"line_end":809,"column_start":2,"column_end":44}},{"value":"/ [`rchunks`]: #method.rchunks","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":287424,"byte_end":287456,"line_start":810,"line_end":810,"column_start":2,"column_end":34}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":287458,"byte_end":287467,"line_start":811,"line_end":811,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1516},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":288705,"byte_end":288715,"line_start":851,"line_end":851,"column_start":9,"column_end":19},"name":"chunks_mut","qualname":"<BitSlice<O, T>>::chunks_mut","value":"pub fn chunks_mut(&mut Self, usize) -> ChunksMut<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the beginning of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":287620,"byte_end":287690,"line_start":817,"line_end":817,"column_start":2,"column_end":72}},{"value":"/ starting at the beginning of the slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":287692,"byte_end":287735,"line_start":818,"line_end":818,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":287737,"byte_end":287740,"line_start":819,"line_end":819,"column_start":2,"column_end":5}},{"value":"/ The chunks are mutable slices, and do not overlap. If `chunk_size` does","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":287742,"byte_end":287817,"line_start":820,"line_end":820,"column_start":2,"column_end":77}},{"value":"/ not divide the length of the slice, then the last chunk will not have","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":287819,"byte_end":287892,"line_start":821,"line_end":821,"column_start":2,"column_end":75}},{"value":"/ length `chunk_size`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":287894,"byte_end":287918,"line_start":822,"line_end":822,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":287920,"byte_end":287923,"line_start":823,"line_end":823,"column_start":2,"column_end":5}},{"value":"/ See [`chunks_exact_mut`] for a variant of this iterator that returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":287925,"byte_end":287997,"line_start":824,"line_end":824,"column_start":2,"column_end":74}},{"value":"/ chunks of always exactly `chunk_size` bits, and [`rchunks_mut`] for the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":287999,"byte_end":288074,"line_start":825,"line_end":825,"column_start":2,"column_end":77}},{"value":"/ same iterator but starting at the end of the slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":288076,"byte_end":288131,"line_start":826,"line_end":826,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":288133,"byte_end":288136,"line_start":827,"line_end":827,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":288138,"byte_end":288152,"line_start":828,"line_end":828,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":288154,"byte_end":288157,"line_start":829,"line_end":829,"column_start":2,"column_end":5}},{"value":"/ [`slice::chunks_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.chunks_mut)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":288159,"byte_end":288254,"line_start":830,"line_end":830,"column_start":2,"column_end":97}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":288256,"byte_end":288259,"line_start":831,"line_end":831,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":288261,"byte_end":288273,"line_start":832,"line_end":832,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":288275,"byte_end":288278,"line_start":833,"line_end":833,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":288280,"byte_end":288312,"line_start":834,"line_end":834,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":288314,"byte_end":288317,"line_start":835,"line_end":835,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":288319,"byte_end":288333,"line_start":836,"line_end":836,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":288335,"byte_end":288338,"line_start":837,"line_end":837,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":288340,"byte_end":288351,"line_start":838,"line_end":838,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":288353,"byte_end":288380,"line_start":839,"line_end":839,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":288382,"byte_end":288385,"line_start":840,"line_end":840,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut Lsb0, u8; 0; 8];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":288387,"byte_end":288428,"line_start":841,"line_end":841,"column_start":2,"column_end":43}},{"value":"/ for (idx, chunk) in bits.chunks_mut(3).enumerate() {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":288430,"byte_end":288486,"line_start":842,"line_end":842,"column_start":2,"column_end":58}},{"value":"/   chunk.set(2 - idx, true);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":288488,"byte_end":288519,"line_start":843,"line_end":843,"column_start":2,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":288521,"byte_end":288526,"line_start":844,"line_end":844,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bits.as_slice()[0], 0b01_010_100);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":288528,"byte_end":288577,"line_start":845,"line_end":845,"column_start":2,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":288579,"byte_end":288586,"line_start":846,"line_end":846,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":288588,"byte_end":288591,"line_start":847,"line_end":847,"column_start":2,"column_end":5}},{"value":"/ [`chunks_exact_mut`]: #method.chunks_exact_mut","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":288593,"byte_end":288643,"line_start":848,"line_end":848,"column_start":2,"column_end":52}},{"value":"/ [`rchunks_mut`]: #method.rchunks_mut","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":288645,"byte_end":288685,"line_start":849,"line_end":849,"column_start":2,"column_end":42}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":288687,"byte_end":288696,"line_start":850,"line_end":850,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1517},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":290232,"byte_end":290244,"line_start":896,"line_end":896,"column_start":9,"column_end":21},"name":"chunks_exact","qualname":"<BitSlice<O, T>>::chunks_exact","value":"pub fn chunks_exact(&Self, usize) -> ChunksExact<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the beginning of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":288863,"byte_end":288933,"line_start":856,"line_end":856,"column_start":2,"column_end":72}},{"value":"/ starting at the beginning of the slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":288935,"byte_end":288978,"line_start":857,"line_end":857,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":288980,"byte_end":288983,"line_start":858,"line_end":858,"column_start":2,"column_end":5}},{"value":"/ The chunks are slices and do not overlap. If `chunk_size` does not","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":288985,"byte_end":289055,"line_start":859,"line_end":859,"column_start":2,"column_end":72}},{"value":"/ divide the length of the slice, then the last up to `chunk_size-1` bits","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":289057,"byte_end":289132,"line_start":860,"line_end":860,"column_start":2,"column_end":77}},{"value":"/ will be omitted and can be retrieved from the `remainder` function of","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":289134,"byte_end":289207,"line_start":861,"line_end":861,"column_start":2,"column_end":75}},{"value":"/ the iterator.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":289209,"byte_end":289226,"line_start":862,"line_end":862,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":289228,"byte_end":289231,"line_start":863,"line_end":863,"column_start":2,"column_end":5}},{"value":"/ Due to each chunk having exactly `chunk_size` bits, the compiler may","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":289233,"byte_end":289305,"line_start":864,"line_end":864,"column_start":2,"column_end":74}},{"value":"/ optimize the resulting code better than in the case of [`chunks`].","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":289307,"byte_end":289377,"line_start":865,"line_end":865,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":289379,"byte_end":289382,"line_start":866,"line_end":866,"column_start":2,"column_end":5}},{"value":"/ See [`chunks`] for a variant of this iterator that also returns the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":289384,"byte_end":289455,"line_start":867,"line_end":867,"column_start":2,"column_end":73}},{"value":"/ remainder as a smaller chunk, and [`rchunks_exact`] for the same","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":289457,"byte_end":289525,"line_start":868,"line_end":868,"column_start":2,"column_end":70}},{"value":"/ iterator but starting at the end of the slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":289527,"byte_end":289577,"line_start":869,"line_end":869,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":289579,"byte_end":289582,"line_start":870,"line_end":870,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":289584,"byte_end":289598,"line_start":871,"line_end":871,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":289600,"byte_end":289603,"line_start":872,"line_end":872,"column_start":2,"column_end":5}},{"value":"/ [`slice::chunks_exact`](https://doc.rust-lang.org/std/primitive.slice.html#method.chunks_exact)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":289605,"byte_end":289704,"line_start":873,"line_end":873,"column_start":2,"column_end":101}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":289706,"byte_end":289709,"line_start":874,"line_end":874,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":289711,"byte_end":289723,"line_start":875,"line_end":875,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":289725,"byte_end":289728,"line_start":876,"line_end":876,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":289730,"byte_end":289762,"line_start":877,"line_end":877,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":289764,"byte_end":289767,"line_start":878,"line_end":878,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":289769,"byte_end":289783,"line_start":879,"line_end":879,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":289785,"byte_end":289788,"line_start":880,"line_end":880,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":289790,"byte_end":289801,"line_start":881,"line_end":881,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":289803,"byte_end":289830,"line_start":882,"line_end":882,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":289832,"byte_end":289835,"line_start":883,"line_end":883,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1, 1, 0, 0, 1, 0, 1, 1];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":289837,"byte_end":289882,"line_start":884,"line_end":884,"column_start":2,"column_end":47}},{"value":"/ let mut iter = bits.chunks_exact(3);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":289884,"byte_end":289924,"line_start":885,"line_end":885,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":289926,"byte_end":289929,"line_start":886,"line_end":886,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[.. 3]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":289931,"byte_end":289981,"line_start":887,"line_end":887,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[3 .. 6]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":289983,"byte_end":290035,"line_start":888,"line_end":888,"column_start":2,"column_end":54}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":290037,"byte_end":290072,"line_start":889,"line_end":889,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(iter.remainder(), &bits[6 ..]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":290074,"byte_end":290120,"line_start":890,"line_end":890,"column_start":2,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":290122,"byte_end":290129,"line_start":891,"line_end":891,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":290131,"byte_end":290134,"line_start":892,"line_end":892,"column_start":2,"column_end":5}},{"value":"/ [`chunks`]: #method.chunks","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":290136,"byte_end":290166,"line_start":893,"line_end":893,"column_start":2,"column_end":32}},{"value":"/ [`rchunks_exact`]: #method.rchunks_exact","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":290168,"byte_end":290212,"line_start":894,"line_end":894,"column_start":2,"column_end":46}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":290214,"byte_end":290223,"line_start":895,"line_end":895,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1518},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":291730,"byte_end":291746,"line_start":939,"line_end":939,"column_start":9,"column_end":25},"name":"chunks_exact_mut","qualname":"<BitSlice<O, T>>::chunks_exact_mut","value":"pub fn chunks_exact_mut(&mut Self, usize) -> ChunksExactMut<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the beginning of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":290392,"byte_end":290462,"line_start":901,"line_end":901,"column_start":2,"column_end":72}},{"value":"/ starting at the beginning of the slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":290464,"byte_end":290507,"line_start":902,"line_end":902,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":290509,"byte_end":290512,"line_start":903,"line_end":903,"column_start":2,"column_end":5}},{"value":"/ The chunks are mutable slices, and do not overlap. If `chunk_size` does","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":290514,"byte_end":290589,"line_start":904,"line_end":904,"column_start":2,"column_end":77}},{"value":"/ not divide the beginning length of the slice, then the last up to","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":290591,"byte_end":290660,"line_start":905,"line_end":905,"column_start":2,"column_end":71}},{"value":"/ `chunk_size-1` bits will be omitted and can be retrieved from the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":290662,"byte_end":290731,"line_start":906,"line_end":906,"column_start":2,"column_end":71}},{"value":"/ `into_remainder` function of the iterator.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":290733,"byte_end":290779,"line_start":907,"line_end":907,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":290781,"byte_end":290784,"line_start":908,"line_end":908,"column_start":2,"column_end":5}},{"value":"/ Due to each chunk having exactly `chunk_size` bits, the compiler may","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":290786,"byte_end":290858,"line_start":909,"line_end":909,"column_start":2,"column_end":74}},{"value":"/ optimize the resulting code better than in the case of [`chunks_mut`].","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":290860,"byte_end":290934,"line_start":910,"line_end":910,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":290936,"byte_end":290939,"line_start":911,"line_end":911,"column_start":2,"column_end":5}},{"value":"/ See [`chunks_mut`] for a variant of this iterator that also returns the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":290941,"byte_end":291016,"line_start":912,"line_end":912,"column_start":2,"column_end":77}},{"value":"/ remainder as a smaller chunk, and [`rchunks_exact_mut`] for the same","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":291018,"byte_end":291090,"line_start":913,"line_end":913,"column_start":2,"column_end":74}},{"value":"/ iterator but starting at the end of the slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":291092,"byte_end":291142,"line_start":914,"line_end":914,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":291144,"byte_end":291147,"line_start":915,"line_end":915,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":291149,"byte_end":291163,"line_start":916,"line_end":916,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":291165,"byte_end":291168,"line_start":917,"line_end":917,"column_start":2,"column_end":5}},{"value":"/ [`slice::chunks_exact_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.chunks_exact_mut)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":291170,"byte_end":291277,"line_start":918,"line_end":918,"column_start":2,"column_end":109}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":291279,"byte_end":291282,"line_start":919,"line_end":919,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":291284,"byte_end":291296,"line_start":920,"line_end":920,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":291298,"byte_end":291301,"line_start":921,"line_end":921,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":291303,"byte_end":291335,"line_start":922,"line_end":922,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":291337,"byte_end":291340,"line_start":923,"line_end":923,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":291342,"byte_end":291356,"line_start":924,"line_end":924,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":291358,"byte_end":291361,"line_start":925,"line_end":925,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":291363,"byte_end":291374,"line_start":926,"line_end":926,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":291376,"byte_end":291403,"line_start":927,"line_end":927,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":291405,"byte_end":291408,"line_start":928,"line_end":928,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut Lsb0, u8; 0; 8];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":291410,"byte_end":291451,"line_start":929,"line_end":929,"column_start":2,"column_end":43}},{"value":"/ for (idx, chunk) in bits.chunks_exact_mut(3).enumerate() {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":291453,"byte_end":291515,"line_start":930,"line_end":930,"column_start":2,"column_end":64}},{"value":"/   chunk.set(idx, true);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":291517,"byte_end":291544,"line_start":931,"line_end":931,"column_start":2,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":291546,"byte_end":291551,"line_start":932,"line_end":932,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bits.as_slice()[0], 0b00_010_001);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":291553,"byte_end":291602,"line_start":933,"line_end":933,"column_start":2,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":291604,"byte_end":291611,"line_start":934,"line_end":934,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":291613,"byte_end":291616,"line_start":935,"line_end":935,"column_start":2,"column_end":5}},{"value":"/ [`chunks_mut`]: #method.chunks_mut","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":291618,"byte_end":291656,"line_start":936,"line_end":936,"column_start":2,"column_end":40}},{"value":"/ [`rchunks_exact_mut`]: #method.rchunks_exact_mut","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":291658,"byte_end":291710,"line_start":937,"line_end":937,"column_start":2,"column_end":54}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":291712,"byte_end":291721,"line_start":938,"line_end":938,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1519},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":293050,"byte_end":293057,"line_start":983,"line_end":983,"column_start":9,"column_end":16},"name":"rchunks","qualname":"<BitSlice<O, T>>::rchunks","value":"pub fn rchunks(&Self, usize) -> RChunks<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the end of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":291912,"byte_end":291982,"line_start":947,"line_end":947,"column_start":2,"column_end":72}},{"value":"/ starting at the end of the slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":291984,"byte_end":292021,"line_start":948,"line_end":948,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":292023,"byte_end":292026,"line_start":949,"line_end":949,"column_start":2,"column_end":5}},{"value":"/ The chunks are slices and do not overlap. If `chunk_size` does not","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":292028,"byte_end":292098,"line_start":950,"line_end":950,"column_start":2,"column_end":72}},{"value":"/ divide the length of the slice, then the last chunk will not have length","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":292100,"byte_end":292176,"line_start":951,"line_end":951,"column_start":2,"column_end":78}},{"value":"/ `chunk_size`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":292178,"byte_end":292195,"line_start":952,"line_end":952,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":292197,"byte_end":292200,"line_start":953,"line_end":953,"column_start":2,"column_end":5}},{"value":"/ See [`rchunks_exact`] for a variant of this iterator that returns chunks","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":292202,"byte_end":292278,"line_start":954,"line_end":954,"column_start":2,"column_end":78}},{"value":"/ of always exactly `chunk_size` bits, and [`chunks`] for the same","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":292280,"byte_end":292348,"line_start":955,"line_end":955,"column_start":2,"column_end":70}},{"value":"/ iterator but starting at the beginning of the slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":292350,"byte_end":292406,"line_start":956,"line_end":956,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":292408,"byte_end":292411,"line_start":957,"line_end":957,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":292413,"byte_end":292427,"line_start":958,"line_end":958,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":292429,"byte_end":292432,"line_start":959,"line_end":959,"column_start":2,"column_end":5}},{"value":"/ [`slice::rchunks`](https://doc.rust-lang.org/std/primitive.slice.html#method.rchunks)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":292434,"byte_end":292523,"line_start":960,"line_end":960,"column_start":2,"column_end":91}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":292525,"byte_end":292528,"line_start":961,"line_end":961,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":292530,"byte_end":292542,"line_start":962,"line_end":962,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":292544,"byte_end":292547,"line_start":963,"line_end":963,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":292549,"byte_end":292581,"line_start":964,"line_end":964,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":292583,"byte_end":292586,"line_start":965,"line_end":965,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":292588,"byte_end":292602,"line_start":966,"line_end":966,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":292604,"byte_end":292607,"line_start":967,"line_end":967,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":292609,"byte_end":292620,"line_start":968,"line_end":968,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":292622,"byte_end":292649,"line_start":969,"line_end":969,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":292651,"byte_end":292654,"line_start":970,"line_end":970,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 0, 1, 1, 0, 1, 1, 0];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":292656,"byte_end":292701,"line_start":971,"line_end":971,"column_start":2,"column_end":47}},{"value":"/ let mut iter = bits.rchunks(3);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":292703,"byte_end":292738,"line_start":972,"line_end":972,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":292740,"byte_end":292743,"line_start":973,"line_end":973,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[5 ..]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":292745,"byte_end":292795,"line_start":974,"line_end":974,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[2 .. 5]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":292797,"byte_end":292849,"line_start":975,"line_end":975,"column_start":2,"column_end":54}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[.. 2]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":292851,"byte_end":292901,"line_start":976,"line_end":976,"column_start":2,"column_end":52}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":292903,"byte_end":292938,"line_start":977,"line_end":977,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":292940,"byte_end":292947,"line_start":978,"line_end":978,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":292949,"byte_end":292952,"line_start":979,"line_end":979,"column_start":2,"column_end":5}},{"value":"/ [`chunks`]: #method.chunks","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":292954,"byte_end":292984,"line_start":980,"line_end":980,"column_start":2,"column_end":32}},{"value":"/ [`rchunks_exact`]: #method.rchunks_exact","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":292986,"byte_end":293030,"line_start":981,"line_end":981,"column_start":2,"column_end":46}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":293032,"byte_end":293041,"line_start":982,"line_end":982,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1520},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":294285,"byte_end":294296,"line_start":1022,"line_end":1022,"column_start":9,"column_end":20},"name":"rchunks_mut","qualname":"<BitSlice<O, T>>::rchunks_mut","value":"pub fn rchunks_mut(&mut Self, usize) -> RChunksMut<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the end of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":293197,"byte_end":293267,"line_start":988,"line_end":988,"column_start":2,"column_end":72}},{"value":"/ starting at the end of the slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":293269,"byte_end":293306,"line_start":989,"line_end":989,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":293308,"byte_end":293311,"line_start":990,"line_end":990,"column_start":2,"column_end":5}},{"value":"/ The chunks are mutable slices, and do not overlap. If `chunk_size` does","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":293313,"byte_end":293388,"line_start":991,"line_end":991,"column_start":2,"column_end":77}},{"value":"/ not divide the length of the slice, then the last chunk will not have","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":293390,"byte_end":293463,"line_start":992,"line_end":992,"column_start":2,"column_end":75}},{"value":"/ length `chunk_size`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":293465,"byte_end":293489,"line_start":993,"line_end":993,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":293491,"byte_end":293494,"line_start":994,"line_end":994,"column_start":2,"column_end":5}},{"value":"/ See [`rchunks_exact_mut`] for a variant of this iterator that returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":293496,"byte_end":293569,"line_start":995,"line_end":995,"column_start":2,"column_end":75}},{"value":"/ chunks of always exactly `chunk_size` bits, and [`chunks_mut`] for the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":293571,"byte_end":293645,"line_start":996,"line_end":996,"column_start":2,"column_end":76}},{"value":"/ same iterator but starting at the beginning of the slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":293647,"byte_end":293708,"line_start":997,"line_end":997,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":293710,"byte_end":293713,"line_start":998,"line_end":998,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":293715,"byte_end":293729,"line_start":999,"line_end":999,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":293731,"byte_end":293734,"line_start":1000,"line_end":1000,"column_start":2,"column_end":5}},{"value":"/ [`slice::rchunks_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.rchunks_mut)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":293736,"byte_end":293833,"line_start":1001,"line_end":1001,"column_start":2,"column_end":99}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":293835,"byte_end":293838,"line_start":1002,"line_end":1002,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":293840,"byte_end":293852,"line_start":1003,"line_end":1003,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":293854,"byte_end":293857,"line_start":1004,"line_end":1004,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":293859,"byte_end":293891,"line_start":1005,"line_end":1005,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":293893,"byte_end":293896,"line_start":1006,"line_end":1006,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":293898,"byte_end":293912,"line_start":1007,"line_end":1007,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":293914,"byte_end":293917,"line_start":1008,"line_end":1008,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":293919,"byte_end":293930,"line_start":1009,"line_end":1009,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":293932,"byte_end":293959,"line_start":1010,"line_end":1010,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":293961,"byte_end":293964,"line_start":1011,"line_end":1011,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut Lsb0, u8; 0; 8];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":293966,"byte_end":294007,"line_start":1012,"line_end":1012,"column_start":2,"column_end":43}},{"value":"/ for (idx, chunk) in bits.rchunks_mut(3).enumerate() {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":294009,"byte_end":294066,"line_start":1013,"line_end":1013,"column_start":2,"column_end":59}},{"value":"/   chunk.set(2 - idx, true);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":294068,"byte_end":294099,"line_start":1014,"line_end":1014,"column_start":2,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":294101,"byte_end":294106,"line_start":1015,"line_end":1015,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bits.as_slice()[0], 0b100_010_01);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":294108,"byte_end":294157,"line_start":1016,"line_end":1016,"column_start":2,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":294159,"byte_end":294166,"line_start":1017,"line_end":1017,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":294168,"byte_end":294171,"line_start":1018,"line_end":1018,"column_start":2,"column_end":5}},{"value":"/ [`chunks_mut`]: #method.chunks_mut","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":294173,"byte_end":294211,"line_start":1019,"line_end":1019,"column_start":2,"column_end":40}},{"value":"/ [`rchunks_exact_mut`]: #method.rchunks_exact_mut","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":294213,"byte_end":294265,"line_start":1020,"line_end":1020,"column_start":2,"column_end":54}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":294267,"byte_end":294276,"line_start":1021,"line_end":1021,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1521},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":295860,"byte_end":295873,"line_start":1068,"line_end":1068,"column_start":9,"column_end":22},"name":"rchunks_exact","qualname":"<BitSlice<O, T>>::rchunks_exact","value":"pub fn rchunks_exact(&Self, usize) -> RChunksExact<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the end of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":294446,"byte_end":294516,"line_start":1027,"line_end":1027,"column_start":2,"column_end":72}},{"value":"/ starting at the end of the slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":294518,"byte_end":294555,"line_start":1028,"line_end":1028,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":294557,"byte_end":294560,"line_start":1029,"line_end":1029,"column_start":2,"column_end":5}},{"value":"/ The chunks are slices and do not overlap. If `chunk_size` does not","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":294562,"byte_end":294632,"line_start":1030,"line_end":1030,"column_start":2,"column_end":72}},{"value":"/ divide the length of the slice, then the last up to `chunk_size-1` bits","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":294634,"byte_end":294709,"line_start":1031,"line_end":1031,"column_start":2,"column_end":77}},{"value":"/ will be omitted and can be retrieved from the `remainder` function of","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":294711,"byte_end":294784,"line_start":1032,"line_end":1032,"column_start":2,"column_end":75}},{"value":"/ the iterator.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":294786,"byte_end":294803,"line_start":1033,"line_end":1033,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":294805,"byte_end":294808,"line_start":1034,"line_end":1034,"column_start":2,"column_end":5}},{"value":"/ Due to each chunk having exactly `chunk_size` bits, the compiler can","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":294810,"byte_end":294882,"line_start":1035,"line_end":1035,"column_start":2,"column_end":74}},{"value":"/ often optimize the resulting code better than in the case of [`chunks`].","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":294884,"byte_end":294960,"line_start":1036,"line_end":1036,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":294962,"byte_end":294965,"line_start":1037,"line_end":1037,"column_start":2,"column_end":5}},{"value":"/ See [`rchunks`] for a variant of this iterator that also returns the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":294967,"byte_end":295039,"line_start":1038,"line_end":1038,"column_start":2,"column_end":74}},{"value":"/ remainder as a smaller chunk, and [`chunks_exact`] for the same iterator","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":295041,"byte_end":295117,"line_start":1039,"line_end":1039,"column_start":2,"column_end":78}},{"value":"/ but starting at the beginning of the slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":295119,"byte_end":295166,"line_start":1040,"line_end":1040,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":295168,"byte_end":295171,"line_start":1041,"line_end":1041,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":295173,"byte_end":295187,"line_start":1042,"line_end":1042,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":295189,"byte_end":295192,"line_start":1043,"line_end":1043,"column_start":2,"column_end":5}},{"value":"/ [`slice::rchunks_exact`](https://doc.rust-lang.org/std/primitive.slice.html#method.rchunks_exact)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":295194,"byte_end":295295,"line_start":1044,"line_end":1044,"column_start":2,"column_end":103}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":295297,"byte_end":295300,"line_start":1045,"line_end":1045,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":295302,"byte_end":295314,"line_start":1046,"line_end":1046,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":295316,"byte_end":295319,"line_start":1047,"line_end":1047,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":295321,"byte_end":295353,"line_start":1048,"line_end":1048,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":295355,"byte_end":295358,"line_start":1049,"line_end":1049,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":295360,"byte_end":295374,"line_start":1050,"line_end":1050,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":295376,"byte_end":295379,"line_start":1051,"line_end":1051,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":295381,"byte_end":295392,"line_start":1052,"line_end":1052,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":295394,"byte_end":295421,"line_start":1053,"line_end":1053,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":295423,"byte_end":295426,"line_start":1054,"line_end":1054,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0, 1, 1, 1, 0, 0, 1, 0];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":295428,"byte_end":295477,"line_start":1055,"line_end":1055,"column_start":2,"column_end":51}},{"value":"/ let mut iter = bits.rchunks_exact(3);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":295479,"byte_end":295520,"line_start":1056,"line_end":1056,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":295522,"byte_end":295525,"line_start":1057,"line_end":1057,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[5 ..]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":295527,"byte_end":295577,"line_start":1058,"line_end":1058,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[2 .. 5]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":295579,"byte_end":295631,"line_start":1059,"line_end":1059,"column_start":2,"column_end":54}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":295633,"byte_end":295668,"line_start":1060,"line_end":1060,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(iter.remainder(), &bits[.. 2]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":295670,"byte_end":295716,"line_start":1061,"line_end":1061,"column_start":2,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":295718,"byte_end":295725,"line_start":1062,"line_end":1062,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":295727,"byte_end":295730,"line_start":1063,"line_end":1063,"column_start":2,"column_end":5}},{"value":"/ [`chunks`]: #method.chunks","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":295732,"byte_end":295762,"line_start":1064,"line_end":1064,"column_start":2,"column_end":32}},{"value":"/ [`rchunks`]: #method.rchunks","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":295764,"byte_end":295796,"line_start":1065,"line_end":1065,"column_start":2,"column_end":34}},{"value":"/ [`chunks_exact`]: #method.chunks_exact","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":295798,"byte_end":295840,"line_start":1066,"line_end":1066,"column_start":2,"column_end":44}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":295842,"byte_end":295851,"line_start":1067,"line_end":1067,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1522},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":297268,"byte_end":297285,"line_start":1109,"line_end":1109,"column_start":9,"column_end":26},"name":"rchunks_exact_mut","qualname":"<BitSlice<O, T>>::rchunks_exact_mut","value":"pub fn rchunks_exact_mut(&mut Self, usize) -> RChunksExactMut<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the end of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":296023,"byte_end":296093,"line_start":1073,"line_end":1073,"column_start":2,"column_end":72}},{"value":"/ starting at the end of the slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":296095,"byte_end":296132,"line_start":1074,"line_end":1074,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":296134,"byte_end":296137,"line_start":1075,"line_end":1075,"column_start":2,"column_end":5}},{"value":"/ The chunks are mutable slices, and do not overlap. If `chunk_size` does","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":296139,"byte_end":296214,"line_start":1076,"line_end":1076,"column_start":2,"column_end":77}},{"value":"/ not divide the length of the slice, then the last up to `chunk_size-1`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":296216,"byte_end":296290,"line_start":1077,"line_end":1077,"column_start":2,"column_end":76}},{"value":"/ bits will be omitted and can be retrieved from the `into_remainder`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":296292,"byte_end":296363,"line_start":1078,"line_end":1078,"column_start":2,"column_end":73}},{"value":"/ function of the iterator.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":296365,"byte_end":296394,"line_start":1079,"line_end":1079,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":296396,"byte_end":296399,"line_start":1080,"line_end":1080,"column_start":2,"column_end":5}},{"value":"/ Due to each chunk having exactly `chunk_size` bits, the compiler can","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":296401,"byte_end":296473,"line_start":1081,"line_end":1081,"column_start":2,"column_end":74}},{"value":"/ often optimize the resulting code better than in the case of","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":296475,"byte_end":296539,"line_start":1082,"line_end":1082,"column_start":2,"column_end":66}},{"value":"/ [`chunks_mut`].","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":296541,"byte_end":296560,"line_start":1083,"line_end":1083,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":296562,"byte_end":296565,"line_start":1084,"line_end":1084,"column_start":2,"column_end":5}},{"value":"/ See [`rchunks_mut`] for a variant of this iterator that also returns the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":296567,"byte_end":296643,"line_start":1085,"line_end":1085,"column_start":2,"column_end":78}},{"value":"/ remainder as a smaller chunk, and [`chunks_exact_mut`] for the same","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":296645,"byte_end":296716,"line_start":1086,"line_end":1086,"column_start":2,"column_end":73}},{"value":"/ iterator but starting at the beginning of the slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":296718,"byte_end":296774,"line_start":1087,"line_end":1087,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":296776,"byte_end":296779,"line_start":1088,"line_end":1088,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":296781,"byte_end":296793,"line_start":1089,"line_end":1089,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":296795,"byte_end":296798,"line_start":1090,"line_end":1090,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":296800,"byte_end":296832,"line_start":1091,"line_end":1091,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":296834,"byte_end":296837,"line_start":1092,"line_end":1092,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":296839,"byte_end":296853,"line_start":1093,"line_end":1093,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":296855,"byte_end":296858,"line_start":1094,"line_end":1094,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":296860,"byte_end":296871,"line_start":1095,"line_end":1095,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":296873,"byte_end":296900,"line_start":1096,"line_end":1096,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":296902,"byte_end":296905,"line_start":1097,"line_end":1097,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut Lsb0, u8; 0; 8];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":296907,"byte_end":296948,"line_start":1098,"line_end":1098,"column_start":2,"column_end":43}},{"value":"/ for (idx, chunk) in bits.rchunks_exact_mut(3).enumerate() {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":296950,"byte_end":297013,"line_start":1099,"line_end":1099,"column_start":2,"column_end":65}},{"value":"/   chunk.set(idx, true);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":297015,"byte_end":297042,"line_start":1100,"line_end":1100,"column_start":2,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":297044,"byte_end":297049,"line_start":1101,"line_end":1101,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bits.as_slice()[0], 0b001_010_00);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":297051,"byte_end":297100,"line_start":1102,"line_end":1102,"column_start":2,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":297102,"byte_end":297109,"line_start":1103,"line_end":1103,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":297111,"byte_end":297114,"line_start":1104,"line_end":1104,"column_start":2,"column_end":5}},{"value":"/ [`chunks_mut`]: #method.chunks_mut","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":297116,"byte_end":297154,"line_start":1105,"line_end":1105,"column_start":2,"column_end":40}},{"value":"/ [`rchunks_mut`]: #method.rchunks_mut","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":297156,"byte_end":297196,"line_start":1106,"line_end":1106,"column_start":2,"column_end":42}},{"value":"/ [`chunks_exact_mut`]: #method.chunks_exact_mut","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":297198,"byte_end":297248,"line_start":1107,"line_end":1107,"column_start":2,"column_end":52}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":297250,"byte_end":297259,"line_start":1108,"line_end":1108,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1523},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":298762,"byte_end":298770,"line_start":1159,"line_end":1159,"column_start":9,"column_end":17},"name":"split_at","qualname":"<BitSlice<O, T>>::split_at","value":"pub fn split_at(&Self, usize) -> (&Self, &Self)","parent":null,"children":[],"decl_id":null,"docs":" Divides one slice into two at an index.","sig":null,"attributes":[{"value":"/ Divides one slice into two at an index.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":297453,"byte_end":297496,"line_start":1117,"line_end":1117,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":297498,"byte_end":297501,"line_start":1118,"line_end":1118,"column_start":2,"column_end":5}},{"value":"/ The first will contain all indices from `[0, mid)` (excluding the index","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":297503,"byte_end":297578,"line_start":1119,"line_end":1119,"column_start":2,"column_end":77}},{"value":"/ `mid` itself) and the second will contain all indices from `[mid, len)`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":297580,"byte_end":297655,"line_start":1120,"line_end":1120,"column_start":2,"column_end":77}},{"value":"/ (excluding the index `len` itself).","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":297657,"byte_end":297696,"line_start":1121,"line_end":1121,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":297698,"byte_end":297701,"line_start":1122,"line_end":1122,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":297703,"byte_end":297717,"line_start":1123,"line_end":1123,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":297719,"byte_end":297722,"line_start":1124,"line_end":1124,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_at`](https://doc.rust-lang.org/std/primitive.slice.html#method.split_at)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":297724,"byte_end":297815,"line_start":1125,"line_end":1125,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":297817,"byte_end":297820,"line_start":1126,"line_end":1126,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":297822,"byte_end":297834,"line_start":1127,"line_end":1127,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":297836,"byte_end":297839,"line_start":1128,"line_end":1128,"column_start":2,"column_end":5}},{"value":"/ Panics if `mid > len`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":297841,"byte_end":297867,"line_start":1129,"line_end":1129,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":297869,"byte_end":297872,"line_start":1130,"line_end":1130,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":297874,"byte_end":297888,"line_start":1131,"line_end":1131,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":297890,"byte_end":297893,"line_start":1132,"line_end":1132,"column_start":2,"column_end":5}},{"value":"/ When `mid` is `0` or `self.len()`, then the left or right return values,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":297895,"byte_end":297971,"line_start":1133,"line_end":1133,"column_start":2,"column_end":78}},{"value":"/ respectively, are empty slices. Empty slice references produced by this","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":297973,"byte_end":298048,"line_start":1134,"line_end":1134,"column_start":2,"column_end":77}},{"value":"/ method are specified to have the address information you would expect:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":298050,"byte_end":298124,"line_start":1135,"line_end":1135,"column_start":2,"column_end":76}},{"value":"/ a left empty slice has the same base address and start bit as `self`,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":298126,"byte_end":298199,"line_start":1136,"line_end":1136,"column_start":2,"column_end":75}},{"value":"/ and a right empty slice will have its address raised by `self.len()`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":298201,"byte_end":298274,"line_start":1137,"line_end":1137,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":298276,"byte_end":298279,"line_start":1138,"line_end":1138,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":298281,"byte_end":298295,"line_start":1139,"line_end":1139,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":298297,"byte_end":298300,"line_start":1140,"line_end":1140,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":298302,"byte_end":298313,"line_start":1141,"line_end":1141,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":298315,"byte_end":298342,"line_start":1142,"line_end":1142,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":298344,"byte_end":298347,"line_start":1143,"line_end":1143,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1, 1, 0, 0, 0, 0, 1, 1];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":298349,"byte_end":298394,"line_start":1144,"line_end":1144,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":298396,"byte_end":298399,"line_start":1145,"line_end":1145,"column_start":2,"column_end":5}},{"value":"/ let (left, right) = bits.split_at(0);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":298401,"byte_end":298442,"line_start":1146,"line_end":1146,"column_start":2,"column_end":43}},{"value":"/ assert!(left.is_empty());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":298444,"byte_end":298473,"line_start":1147,"line_end":1147,"column_start":2,"column_end":31}},{"value":"/ assert_eq!(right, bits);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":298475,"byte_end":298503,"line_start":1148,"line_end":1148,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":298505,"byte_end":298508,"line_start":1149,"line_end":1149,"column_start":2,"column_end":5}},{"value":"/ let (left, right) = bits.split_at(2);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":298510,"byte_end":298551,"line_start":1150,"line_end":1150,"column_start":2,"column_end":43}},{"value":"/ assert_eq!(left, &bits[.. 2]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":298553,"byte_end":298587,"line_start":1151,"line_end":1151,"column_start":2,"column_end":36}},{"value":"/ assert_eq!(right, &bits[2 ..]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":298589,"byte_end":298624,"line_start":1152,"line_end":1152,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":298626,"byte_end":298629,"line_start":1153,"line_end":1153,"column_start":2,"column_end":5}},{"value":"/ let (left, right) = bits.split_at(8);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":298631,"byte_end":298672,"line_start":1154,"line_end":1154,"column_start":2,"column_end":43}},{"value":"/ assert_eq!(left, bits);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":298674,"byte_end":298701,"line_start":1155,"line_end":1155,"column_start":2,"column_end":29}},{"value":"/ assert!(right.is_empty());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":298703,"byte_end":298733,"line_start":1156,"line_end":1156,"column_start":2,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":298735,"byte_end":298742,"line_start":1157,"line_end":1157,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":298744,"byte_end":298753,"line_start":1158,"line_end":1158,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1524},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":300995,"byte_end":301007,"line_start":1219,"line_end":1219,"column_start":9,"column_end":21},"name":"split_at_mut","qualname":"<BitSlice<O, T>>::split_at_mut","value":"pub fn split_at_mut(&mut Self, usize)\n-> (&mut BitSlice<O, T::Alias>, &mut BitSlice<O, T::Alias>)","parent":null,"children":[],"decl_id":null,"docs":" Divides one mutable slice into two at an index.","sig":null,"attributes":[{"value":"/ Divides one mutable slice into two at an index.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":298944,"byte_end":298995,"line_start":1165,"line_end":1165,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":298997,"byte_end":299000,"line_start":1166,"line_end":1166,"column_start":2,"column_end":5}},{"value":"/ The first will contain all indices from `[0, mid)` (excluding the index","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":299002,"byte_end":299077,"line_start":1167,"line_end":1167,"column_start":2,"column_end":77}},{"value":"/ `mid` itself) and the second will contain all indices from `[mid, len)`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":299079,"byte_end":299154,"line_start":1168,"line_end":1168,"column_start":2,"column_end":77}},{"value":"/ (excluding the index `len` itself).","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":299156,"byte_end":299195,"line_start":1169,"line_end":1169,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":299197,"byte_end":299200,"line_start":1170,"line_end":1170,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":299202,"byte_end":299216,"line_start":1171,"line_end":1171,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":299218,"byte_end":299221,"line_start":1172,"line_end":1172,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_at_mut`](https://doc.rust-lang.org/std/primitive.html#method.split_at_mut)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":299223,"byte_end":299316,"line_start":1173,"line_end":1173,"column_start":2,"column_end":95}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":299318,"byte_end":299321,"line_start":1174,"line_end":1174,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":299323,"byte_end":299344,"line_start":1175,"line_end":1175,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":299346,"byte_end":299349,"line_start":1176,"line_end":1176,"column_start":2,"column_end":5}},{"value":"/ Because the partition point `mid` is permitted to occur in the interior","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":299351,"byte_end":299426,"line_start":1177,"line_end":1177,"column_start":2,"column_end":77}},{"value":"/ of a memory element `T`, this method is required to mark the returned","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":299428,"byte_end":299501,"line_start":1178,"line_end":1178,"column_start":2,"column_end":75}},{"value":"/ slices as being to aliased memory. This marking ensures that writes to","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":299503,"byte_end":299577,"line_start":1179,"line_end":1179,"column_start":2,"column_end":76}},{"value":"/ the covered memory use the appropriate synchronization behavior of your","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":299579,"byte_end":299654,"line_start":1180,"line_end":1180,"column_start":2,"column_end":77}},{"value":"/ build to avoid data races – by default, this makes all writes atomic; on","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":299656,"byte_end":299734,"line_start":1181,"line_end":1181,"column_start":2,"column_end":78}},{"value":"/ builds with the `atomic` feature disabled, this uses `Cell`s and","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":299736,"byte_end":299804,"line_start":1182,"line_end":1182,"column_start":2,"column_end":70}},{"value":"/ forbids the produced subslices from leaving the current thread.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":299806,"byte_end":299873,"line_start":1183,"line_end":1183,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":299875,"byte_end":299878,"line_start":1184,"line_end":1184,"column_start":2,"column_end":5}},{"value":"/ See the [`BitStore`] documentation for more information.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":299880,"byte_end":299940,"line_start":1185,"line_end":1185,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":299942,"byte_end":299945,"line_start":1186,"line_end":1186,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":299947,"byte_end":299959,"line_start":1187,"line_end":1187,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":299961,"byte_end":299964,"line_start":1188,"line_end":1188,"column_start":2,"column_end":5}},{"value":"/ Panics if `mid > len`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":299966,"byte_end":299992,"line_start":1189,"line_end":1189,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":299994,"byte_end":299997,"line_start":1190,"line_end":1190,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":299999,"byte_end":300013,"line_start":1191,"line_end":1191,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":300015,"byte_end":300018,"line_start":1192,"line_end":1192,"column_start":2,"column_end":5}},{"value":"/ When `mid` is `0` or `self.len()`, then the left or right return values,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":300020,"byte_end":300096,"line_start":1193,"line_end":1193,"column_start":2,"column_end":78}},{"value":"/ respectively, are empty slices. Empty slice references produced by this","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":300098,"byte_end":300173,"line_start":1194,"line_end":1194,"column_start":2,"column_end":77}},{"value":"/ method are specified to have the address information you would expect:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":300175,"byte_end":300249,"line_start":1195,"line_end":1195,"column_start":2,"column_end":76}},{"value":"/ a left empty slice has the same base address and start bit as `self`,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":300251,"byte_end":300324,"line_start":1196,"line_end":1196,"column_start":2,"column_end":75}},{"value":"/ and a right empty slice will have its address raised by `self.len()`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":300326,"byte_end":300399,"line_start":1197,"line_end":1197,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":300401,"byte_end":300404,"line_start":1198,"line_end":1198,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":300406,"byte_end":300420,"line_start":1199,"line_end":1199,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":300422,"byte_end":300425,"line_start":1200,"line_end":1200,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":300427,"byte_end":300438,"line_start":1201,"line_end":1201,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":300440,"byte_end":300467,"line_start":1202,"line_end":1202,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":300469,"byte_end":300472,"line_start":1203,"line_end":1203,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut Msb0, u8; 0; 8];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":300474,"byte_end":300515,"line_start":1204,"line_end":1204,"column_start":2,"column_end":43}},{"value":"/ // scoped to restrict the lifetime of the borrows","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":300517,"byte_end":300570,"line_start":1205,"line_end":1205,"column_start":2,"column_end":55}},{"value":"/ {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":300572,"byte_end":300577,"line_start":1206,"line_end":1206,"column_start":2,"column_end":7}},{"value":"/   let (left, right) = bits.split_at_mut(3);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":300579,"byte_end":300626,"line_start":1207,"line_end":1207,"column_start":2,"column_end":49}},{"value":"/   *left.get_mut(1).unwrap() = true;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":300628,"byte_end":300667,"line_start":1208,"line_end":1208,"column_start":2,"column_end":41}},{"value":"/   *right.get_mut(2).unwrap() = true;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":300669,"byte_end":300709,"line_start":1209,"line_end":1209,"column_start":2,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":300711,"byte_end":300716,"line_start":1210,"line_end":1210,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bits.as_slice()[0], 0b010_00100);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":300718,"byte_end":300766,"line_start":1211,"line_end":1211,"column_start":2,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":300768,"byte_end":300775,"line_start":1212,"line_end":1212,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":300777,"byte_end":300780,"line_start":1213,"line_end":1213,"column_start":2,"column_end":5}},{"value":"/ [`BitStore`]: ../store/trait.BitStore.html","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":300782,"byte_end":300828,"line_start":1214,"line_end":1214,"column_start":2,"column_end":48}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":300830,"byte_end":300839,"line_start":1215,"line_end":1215,"column_start":2,"column_end":11}},{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":300953,"byte_end":300986,"line_start":1218,"line_end":1218,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1525},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":303050,"byte_end":303055,"line_start":1285,"line_end":1285,"column_start":9,"column_end":14},"name":"split","qualname":"<BitSlice<O, T>>::split","value":"pub fn split<F>(&Self, F) -> Split<, O, T, F> where F: FnMut(usize, &bool) ->\nbool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over subslices separated by bits that match `pred`.\n The matched bit is not contained in the subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over subslices separated by bits that match `pred`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":301239,"byte_end":301314,"line_start":1228,"line_end":1228,"column_start":2,"column_end":77}},{"value":"/ The matched bit is not contained in the subslices.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":301316,"byte_end":301370,"line_start":1229,"line_end":1229,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":301372,"byte_end":301375,"line_start":1230,"line_end":1230,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":301377,"byte_end":301391,"line_start":1231,"line_end":1231,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":301393,"byte_end":301396,"line_start":1232,"line_end":1232,"column_start":2,"column_end":5}},{"value":"/ [`slice::split`](https://doc.rust-lang.org/std/primitive.slice.html#method.split)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":301398,"byte_end":301483,"line_start":1233,"line_end":1233,"column_start":2,"column_end":87}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":301485,"byte_end":301488,"line_start":1234,"line_end":1234,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":301490,"byte_end":301511,"line_start":1235,"line_end":1235,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":301513,"byte_end":301516,"line_start":1236,"line_end":1236,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":301518,"byte_end":301586,"line_start":1237,"line_end":1237,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":301588,"byte_end":301662,"line_start":1238,"line_end":1238,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":301664,"byte_end":301674,"line_start":1239,"line_end":1239,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":301676,"byte_end":301679,"line_start":1240,"line_end":1240,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":301681,"byte_end":301695,"line_start":1241,"line_end":1241,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":301697,"byte_end":301700,"line_start":1242,"line_end":1242,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":301702,"byte_end":301713,"line_start":1243,"line_end":1243,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":301715,"byte_end":301742,"line_start":1244,"line_end":1244,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":301744,"byte_end":301747,"line_start":1245,"line_end":1245,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 0, 1, 0, 0, 0];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":301749,"byte_end":301794,"line_start":1246,"line_end":1246,"column_start":2,"column_end":47}},{"value":"/ let mut iter = bits.split(|_pos, bit| *bit);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":301796,"byte_end":301844,"line_start":1247,"line_end":1247,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":301846,"byte_end":301849,"line_start":1248,"line_end":1248,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[.. 1]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":301851,"byte_end":301901,"line_start":1249,"line_end":1249,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[2 .. 4]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":301903,"byte_end":301955,"line_start":1250,"line_end":1250,"column_start":2,"column_end":54}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[5 ..]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":301957,"byte_end":302007,"line_start":1251,"line_end":1251,"column_start":2,"column_end":52}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":302009,"byte_end":302044,"line_start":1252,"line_end":1252,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":302046,"byte_end":302053,"line_start":1253,"line_end":1253,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":302055,"byte_end":302058,"line_start":1254,"line_end":1254,"column_start":2,"column_end":5}},{"value":"/ If the first bit is matched, an empty slice will be the first item","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":302060,"byte_end":302130,"line_start":1255,"line_end":1255,"column_start":2,"column_end":72}},{"value":"/ returned by the iterator. Similarly, if the last element in the slice is","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":302132,"byte_end":302208,"line_start":1256,"line_end":1256,"column_start":2,"column_end":78}},{"value":"/ matched, an empty slice will be the last item returned by the iterator:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":302210,"byte_end":302285,"line_start":1257,"line_end":1257,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":302287,"byte_end":302290,"line_start":1258,"line_end":1258,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":302292,"byte_end":302303,"line_start":1259,"line_end":1259,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":302305,"byte_end":302332,"line_start":1260,"line_end":1260,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":302334,"byte_end":302337,"line_start":1261,"line_end":1261,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 0, 0, 1];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":302339,"byte_end":302372,"line_start":1262,"line_end":1262,"column_start":2,"column_end":35}},{"value":"/ let mut iter = bits.split(|_pos, bit| *bit);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":302374,"byte_end":302422,"line_start":1263,"line_end":1263,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":302424,"byte_end":302427,"line_start":1264,"line_end":1264,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[.. 3]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":302429,"byte_end":302479,"line_start":1265,"line_end":1265,"column_start":2,"column_end":52}},{"value":"/ assert!(iter.next().unwrap().is_empty());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":302481,"byte_end":302526,"line_start":1266,"line_end":1266,"column_start":2,"column_end":47}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":302528,"byte_end":302563,"line_start":1267,"line_end":1267,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":302565,"byte_end":302572,"line_start":1268,"line_end":1268,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":302574,"byte_end":302577,"line_start":1269,"line_end":1269,"column_start":2,"column_end":5}},{"value":"/ If two matched bits are directly adjacent, an empty slice will be","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":302579,"byte_end":302648,"line_start":1270,"line_end":1270,"column_start":2,"column_end":71}},{"value":"/ present between them:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":302650,"byte_end":302675,"line_start":1271,"line_end":1271,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":302677,"byte_end":302680,"line_start":1272,"line_end":1272,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":302682,"byte_end":302693,"line_start":1273,"line_end":1273,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":302695,"byte_end":302722,"line_start":1274,"line_end":1274,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":302724,"byte_end":302727,"line_start":1275,"line_end":1275,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 0, 1, 1, 0, 0, 0, 0,];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":302729,"byte_end":302775,"line_start":1276,"line_end":1276,"column_start":2,"column_end":48}},{"value":"/ let mut iter = bits.split(|pos, bit| *bit);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":302777,"byte_end":302824,"line_start":1277,"line_end":1277,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":302826,"byte_end":302829,"line_start":1278,"line_end":1278,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[0 .. 2]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":302831,"byte_end":302883,"line_start":1279,"line_end":1279,"column_start":2,"column_end":54}},{"value":"/ assert!(iter.next().unwrap().is_empty());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":302885,"byte_end":302930,"line_start":1280,"line_end":1280,"column_start":2,"column_end":47}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[4 .. 8]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":302932,"byte_end":302984,"line_start":1281,"line_end":1281,"column_start":2,"column_end":54}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":302986,"byte_end":303021,"line_start":1282,"line_end":1282,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":303023,"byte_end":303030,"line_start":1283,"line_end":1283,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":303032,"byte_end":303041,"line_start":1284,"line_end":1284,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1527},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":303930,"byte_end":303939,"line_start":1315,"line_end":1315,"column_start":9,"column_end":18},"name":"split_mut","qualname":"<BitSlice<O, T>>::split_mut","value":"pub fn split_mut<F>(&mut Self, F) -> SplitMut<, O, T, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over mutable subslices separated by bits that match\n `pred`. The matched bit is not contained in the subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over mutable subslices separated by bits that match","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":303163,"byte_end":303238,"line_start":1290,"line_end":1290,"column_start":2,"column_end":77}},{"value":"/ `pred`. The matched bit is not contained in the subslices.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":303240,"byte_end":303302,"line_start":1291,"line_end":1291,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":303304,"byte_end":303307,"line_start":1292,"line_end":1292,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":303309,"byte_end":303323,"line_start":1293,"line_end":1293,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":303325,"byte_end":303328,"line_start":1294,"line_end":1294,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.split_mut)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":303330,"byte_end":303423,"line_start":1295,"line_end":1295,"column_start":2,"column_end":95}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":303425,"byte_end":303428,"line_start":1296,"line_end":1296,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":303430,"byte_end":303451,"line_start":1297,"line_end":1297,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":303453,"byte_end":303456,"line_start":1298,"line_end":1298,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":303458,"byte_end":303526,"line_start":1299,"line_end":1299,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":303528,"byte_end":303602,"line_start":1300,"line_end":1300,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":303604,"byte_end":303614,"line_start":1301,"line_end":1301,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":303616,"byte_end":303619,"line_start":1302,"line_end":1302,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":303621,"byte_end":303635,"line_start":1303,"line_end":1303,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":303637,"byte_end":303640,"line_start":1304,"line_end":1304,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":303642,"byte_end":303653,"line_start":1305,"line_end":1305,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":303655,"byte_end":303682,"line_start":1306,"line_end":1306,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":303684,"byte_end":303687,"line_start":1307,"line_end":1307,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut Msb0, u8; 0, 0, 1, 0, 0, 0, 1, 0];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":303689,"byte_end":303748,"line_start":1308,"line_end":1308,"column_start":2,"column_end":61}},{"value":"/ for group in bits.split_mut(|_pos, bit| *bit) {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":303750,"byte_end":303801,"line_start":1309,"line_end":1309,"column_start":2,"column_end":53}},{"value":"/   *group.get_mut(0).unwrap() = true;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":303803,"byte_end":303843,"line_start":1310,"line_end":1310,"column_start":2,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":303845,"byte_end":303850,"line_start":1311,"line_end":1311,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bits.as_slice()[0], 0b101_100_11);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":303852,"byte_end":303901,"line_start":1312,"line_end":1312,"column_start":2,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":303903,"byte_end":303910,"line_start":1313,"line_end":1313,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":303912,"byte_end":303921,"line_start":1314,"line_end":1314,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1529},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":305489,"byte_end":305495,"line_start":1363,"line_end":1363,"column_start":9,"column_end":15},"name":"rsplit","qualname":"<BitSlice<O, T>>::rsplit","value":"pub fn rsplit<F>(&Self, F) -> RSplit<, O, T, F> where F: FnMut(usize, &bool)\n-> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over subslices separated by bits that match `pred`,\n starting at the end of the slice and working backwards. The matched bit\n is not contained in the subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over subslices separated by bits that match `pred`,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":304069,"byte_end":304144,"line_start":1320,"line_end":1320,"column_start":2,"column_end":77}},{"value":"/ starting at the end of the slice and working backwards. The matched bit","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":304146,"byte_end":304221,"line_start":1321,"line_end":1321,"column_start":2,"column_end":77}},{"value":"/ is not contained in the subslices.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":304223,"byte_end":304261,"line_start":1322,"line_end":1322,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":304263,"byte_end":304266,"line_start":1323,"line_end":1323,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":304268,"byte_end":304282,"line_start":1324,"line_end":1324,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":304284,"byte_end":304287,"line_start":1325,"line_end":1325,"column_start":2,"column_end":5}},{"value":"/ [`slice::rsplit`](https://doc.rust-lang.org/std/primitive.slice.html#method.rsplit)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":304289,"byte_end":304376,"line_start":1326,"line_end":1326,"column_start":2,"column_end":89}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":304378,"byte_end":304381,"line_start":1327,"line_end":1327,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":304383,"byte_end":304404,"line_start":1328,"line_end":1328,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":304406,"byte_end":304409,"line_start":1329,"line_end":1329,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":304411,"byte_end":304479,"line_start":1330,"line_end":1330,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":304481,"byte_end":304555,"line_start":1331,"line_end":1331,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":304557,"byte_end":304567,"line_start":1332,"line_end":1332,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":304569,"byte_end":304572,"line_start":1333,"line_end":1333,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":304574,"byte_end":304588,"line_start":1334,"line_end":1334,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":304590,"byte_end":304593,"line_start":1335,"line_end":1335,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":304595,"byte_end":304606,"line_start":1336,"line_end":1336,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":304608,"byte_end":304635,"line_start":1337,"line_end":1337,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":304637,"byte_end":304640,"line_start":1338,"line_end":1338,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut Msb0, u8; 0, 0, 0, 1, 0, 0, 0, 0];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":304642,"byte_end":304701,"line_start":1339,"line_end":1339,"column_start":2,"column_end":61}},{"value":"/ let mut iter = bits.rsplit(|_pos, bit| *bit);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":304703,"byte_end":304752,"line_start":1340,"line_end":1340,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":304754,"byte_end":304757,"line_start":1341,"line_end":1341,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[4 ..]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":304759,"byte_end":304809,"line_start":1342,"line_end":1342,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[.. 3]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":304811,"byte_end":304861,"line_start":1343,"line_end":1343,"column_start":2,"column_end":52}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":304863,"byte_end":304898,"line_start":1344,"line_end":1344,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":304900,"byte_end":304907,"line_start":1345,"line_end":1345,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":304909,"byte_end":304912,"line_start":1346,"line_end":1346,"column_start":2,"column_end":5}},{"value":"/ As with `split()`, if the first or last bit is matched, an empty slice","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":304914,"byte_end":304988,"line_start":1347,"line_end":1347,"column_start":2,"column_end":76}},{"value":"/ will be the first (or last) item returned by the iterator.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":304990,"byte_end":305052,"line_start":1348,"line_end":1348,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":305054,"byte_end":305057,"line_start":1349,"line_end":1349,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":305059,"byte_end":305070,"line_start":1350,"line_end":1350,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":305072,"byte_end":305099,"line_start":1351,"line_end":1351,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":305101,"byte_end":305104,"line_start":1352,"line_end":1352,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut Msb0, u8; 1, 0, 0, 1, 0, 0, 0, 1];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":305106,"byte_end":305165,"line_start":1353,"line_end":1353,"column_start":2,"column_end":61}},{"value":"/ let mut iter = bits.rsplit(|_pos, bit| *bit);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":305167,"byte_end":305216,"line_start":1354,"line_end":1354,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":305218,"byte_end":305221,"line_start":1355,"line_end":1355,"column_start":2,"column_end":5}},{"value":"/ assert!(iter.next().unwrap().is_empty());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":305223,"byte_end":305268,"line_start":1356,"line_end":1356,"column_start":2,"column_end":47}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[4 .. 7]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":305270,"byte_end":305322,"line_start":1357,"line_end":1357,"column_start":2,"column_end":54}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[1 .. 3]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":305324,"byte_end":305376,"line_start":1358,"line_end":1358,"column_start":2,"column_end":54}},{"value":"/ assert!(iter.next().unwrap().is_empty());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":305378,"byte_end":305423,"line_start":1359,"line_end":1359,"column_start":2,"column_end":47}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":305425,"byte_end":305460,"line_start":1360,"line_end":1360,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":305462,"byte_end":305469,"line_start":1361,"line_end":1361,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":305471,"byte_end":305480,"line_start":1362,"line_end":1362,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1531},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":306436,"byte_end":306446,"line_start":1394,"line_end":1394,"column_start":9,"column_end":19},"name":"rsplit_mut","qualname":"<BitSlice<O, T>>::rsplit_mut","value":"pub fn rsplit_mut<F>(&mut Self, F) -> RSplitMut<, O, T, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over mutable subslices separated by bits that match\n `pred`, starting at the end of the slice and working backwards. The\n matched bit is not contained in the subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over mutable subslices separated by bits that match","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":305605,"byte_end":305680,"line_start":1368,"line_end":1368,"column_start":2,"column_end":77}},{"value":"/ `pred`, starting at the end of the slice and working backwards. The","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":305682,"byte_end":305753,"line_start":1369,"line_end":1369,"column_start":2,"column_end":73}},{"value":"/ matched bit is not contained in the subslices.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":305755,"byte_end":305805,"line_start":1370,"line_end":1370,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":305807,"byte_end":305810,"line_start":1371,"line_end":1371,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":305812,"byte_end":305826,"line_start":1372,"line_end":1372,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":305828,"byte_end":305831,"line_start":1373,"line_end":1373,"column_start":2,"column_end":5}},{"value":"/ [`slice::rsplit_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.rsplit_mut)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":305833,"byte_end":305928,"line_start":1374,"line_end":1374,"column_start":2,"column_end":97}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":305930,"byte_end":305933,"line_start":1375,"line_end":1375,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":305935,"byte_end":305956,"line_start":1376,"line_end":1376,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":305958,"byte_end":305961,"line_start":1377,"line_end":1377,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":305963,"byte_end":306031,"line_start":1378,"line_end":1378,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":306033,"byte_end":306107,"line_start":1379,"line_end":1379,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":306109,"byte_end":306119,"line_start":1380,"line_end":1380,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":306121,"byte_end":306124,"line_start":1381,"line_end":1381,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":306126,"byte_end":306140,"line_start":1382,"line_end":1382,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":306142,"byte_end":306145,"line_start":1383,"line_end":1383,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":306147,"byte_end":306158,"line_start":1384,"line_end":1384,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":306160,"byte_end":306187,"line_start":1385,"line_end":1385,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":306189,"byte_end":306192,"line_start":1386,"line_end":1386,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut Msb0, u8; 0, 0, 1, 0, 0, 0, 1, 0];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":306194,"byte_end":306253,"line_start":1387,"line_end":1387,"column_start":2,"column_end":61}},{"value":"/ for group in bits.rsplit_mut(|_pos, bit| *bit) {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":306255,"byte_end":306307,"line_start":1388,"line_end":1388,"column_start":2,"column_end":54}},{"value":"/   *group.get_mut(0).unwrap() = true;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":306309,"byte_end":306349,"line_start":1389,"line_end":1389,"column_start":2,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":306351,"byte_end":306356,"line_start":1390,"line_end":1390,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bits.as_slice()[0], 0b101_100_11);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":306358,"byte_end":306407,"line_start":1391,"line_end":1391,"column_start":2,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":306409,"byte_end":306416,"line_start":1392,"line_end":1392,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":306418,"byte_end":306427,"line_start":1393,"line_end":1393,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1533},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":307495,"byte_end":307501,"line_start":1432,"line_end":1432,"column_start":9,"column_end":15},"name":"splitn","qualname":"<BitSlice<O, T>>::splitn","value":"pub fn splitn<F>(&Self, usize, F) -> SplitN<, O, T, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over subslices separated by bits that match `pred`,\n limited to returning at most `n` items. The matched bit is not contained\n in the subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over subslices separated by bits that match `pred`,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":306578,"byte_end":306653,"line_start":1399,"line_end":1399,"column_start":2,"column_end":77}},{"value":"/ limited to returning at most `n` items. The matched bit is not contained","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":306655,"byte_end":306731,"line_start":1400,"line_end":1400,"column_start":2,"column_end":78}},{"value":"/ in the subslices.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":306733,"byte_end":306754,"line_start":1401,"line_end":1401,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":306756,"byte_end":306759,"line_start":1402,"line_end":1402,"column_start":2,"column_end":5}},{"value":"/ The last item returned, if any, will contain the remainder of the slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":306761,"byte_end":306837,"line_start":1403,"line_end":1403,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":306839,"byte_end":306842,"line_start":1404,"line_end":1404,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":306844,"byte_end":306858,"line_start":1405,"line_end":1405,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":306860,"byte_end":306863,"line_start":1406,"line_end":1406,"column_start":2,"column_end":5}},{"value":"/ [`slice::splitn`](https://doc.rust-lang.org/std/primitive.slice.html#method.splitn)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":306865,"byte_end":306952,"line_start":1407,"line_end":1407,"column_start":2,"column_end":89}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":306954,"byte_end":306957,"line_start":1408,"line_end":1408,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":306959,"byte_end":306980,"line_start":1409,"line_end":1409,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":306982,"byte_end":306985,"line_start":1410,"line_end":1410,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":306987,"byte_end":307055,"line_start":1411,"line_end":1411,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":307057,"byte_end":307131,"line_start":1412,"line_end":1412,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":307133,"byte_end":307143,"line_start":1413,"line_end":1413,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":307145,"byte_end":307148,"line_start":1414,"line_end":1414,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":307150,"byte_end":307164,"line_start":1415,"line_end":1415,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":307166,"byte_end":307169,"line_start":1416,"line_end":1416,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":307171,"byte_end":307182,"line_start":1417,"line_end":1417,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":307184,"byte_end":307211,"line_start":1418,"line_end":1418,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":307213,"byte_end":307216,"line_start":1419,"line_end":1419,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1, 0, 1, 0, 0, 1, 0, 1];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":307218,"byte_end":307263,"line_start":1420,"line_end":1420,"column_start":2,"column_end":47}},{"value":"/ for group in bits.splitn(2, |pos, _bit| pos % 3 == 2) {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":307265,"byte_end":307324,"line_start":1421,"line_end":1421,"column_start":2,"column_end":61}},{"value":"/ # #[cfg(feature = \"std\")] {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":307326,"byte_end":307357,"line_start":1422,"line_end":1422,"column_start":2,"column_end":33}},{"value":"/   println!(\"{}\", group.len());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":307359,"byte_end":307393,"line_start":1423,"line_end":1423,"column_start":2,"column_end":36}},{"value":"/ # }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":307395,"byte_end":307402,"line_start":1424,"line_end":1424,"column_start":2,"column_end":9}},{"value":"/ }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":307404,"byte_end":307409,"line_start":1425,"line_end":1425,"column_start":2,"column_end":7}},{"value":"/ //  2","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":307411,"byte_end":307420,"line_start":1426,"line_end":1426,"column_start":2,"column_end":11}},{"value":"/ //  5","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":307422,"byte_end":307431,"line_start":1427,"line_end":1427,"column_start":2,"column_end":11}},{"value":"/ # //  [10]","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":307433,"byte_end":307447,"line_start":1428,"line_end":1428,"column_start":2,"column_end":16}},{"value":"/ # //  [00101]","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":307449,"byte_end":307466,"line_start":1429,"line_end":1429,"column_start":2,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":307468,"byte_end":307475,"line_start":1430,"line_end":1430,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":307477,"byte_end":307486,"line_start":1431,"line_end":1431,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1535},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":308521,"byte_end":308531,"line_start":1465,"line_end":1465,"column_start":9,"column_end":19},"name":"splitn_mut","qualname":"<BitSlice<O, T>>::splitn_mut","value":"pub fn splitn_mut<F>(&mut Self, usize, F) -> SplitNMut<, O, T, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over subslices separated by bits that match `pred`,\n limited to returning at most `n` items. The matched element is not\n contained in the subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over subslices separated by bits that match `pred`,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":307624,"byte_end":307699,"line_start":1437,"line_end":1437,"column_start":2,"column_end":77}},{"value":"/ limited to returning at most `n` items. The matched element is not","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":307701,"byte_end":307771,"line_start":1438,"line_end":1438,"column_start":2,"column_end":72}},{"value":"/ contained in the subslices.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":307773,"byte_end":307804,"line_start":1439,"line_end":1439,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":307806,"byte_end":307809,"line_start":1440,"line_end":1440,"column_start":2,"column_end":5}},{"value":"/ The last item returned, if any, will contain the remainder of the slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":307811,"byte_end":307887,"line_start":1441,"line_end":1441,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":307889,"byte_end":307892,"line_start":1442,"line_end":1442,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":307894,"byte_end":307908,"line_start":1443,"line_end":1443,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":307910,"byte_end":307913,"line_start":1444,"line_end":1444,"column_start":2,"column_end":5}},{"value":"/ [`slice::splitn_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.splitn_mut)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":307915,"byte_end":308010,"line_start":1445,"line_end":1445,"column_start":2,"column_end":97}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":308012,"byte_end":308015,"line_start":1446,"line_end":1446,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":308017,"byte_end":308038,"line_start":1447,"line_end":1447,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":308040,"byte_end":308043,"line_start":1448,"line_end":1448,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":308045,"byte_end":308113,"line_start":1449,"line_end":1449,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":308115,"byte_end":308189,"line_start":1450,"line_end":1450,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":308191,"byte_end":308201,"line_start":1451,"line_end":1451,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":308203,"byte_end":308206,"line_start":1452,"line_end":1452,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":308208,"byte_end":308222,"line_start":1453,"line_end":1453,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":308224,"byte_end":308227,"line_start":1454,"line_end":1454,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":308229,"byte_end":308240,"line_start":1455,"line_end":1455,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":308242,"byte_end":308269,"line_start":1456,"line_end":1456,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":308271,"byte_end":308274,"line_start":1457,"line_end":1457,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut Msb0, u8; 0, 0, 1, 0, 0, 0, 1, 0];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":308276,"byte_end":308335,"line_start":1458,"line_end":1458,"column_start":2,"column_end":61}},{"value":"/ for group in bits.splitn_mut(2, |_pos, bit| *bit) {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":308337,"byte_end":308392,"line_start":1459,"line_end":1459,"column_start":2,"column_end":57}},{"value":"/   *group.get_mut(0).unwrap() = true;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":308394,"byte_end":308434,"line_start":1460,"line_end":1460,"column_start":2,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":308436,"byte_end":308441,"line_start":1461,"line_end":1461,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bits.as_slice()[0], 0b101_100_10);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":308443,"byte_end":308492,"line_start":1462,"line_end":1462,"column_start":2,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":308494,"byte_end":308501,"line_start":1463,"line_end":1463,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":308503,"byte_end":308512,"line_start":1464,"line_end":1464,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1537},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":309668,"byte_end":309675,"line_start":1504,"line_end":1504,"column_start":9,"column_end":16},"name":"rsplitn","qualname":"<BitSlice<O, T>>::rsplitn","value":"pub fn rsplitn<F>(&Self, usize, F) -> RSplitN<, O, T, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over subslices separated by bits that match `pred`\n limited to returining at most `n` items. This starts at the end of the\n slice and works backwards. The matched bit is not contained in the\n subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over subslices separated by bits that match `pred`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":308676,"byte_end":308750,"line_start":1470,"line_end":1470,"column_start":2,"column_end":76}},{"value":"/ limited to returining at most `n` items. This starts at the end of the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":308752,"byte_end":308826,"line_start":1471,"line_end":1471,"column_start":2,"column_end":76}},{"value":"/ slice and works backwards. The matched bit is not contained in the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":308828,"byte_end":308898,"line_start":1472,"line_end":1472,"column_start":2,"column_end":72}},{"value":"/ subslices.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":308900,"byte_end":308914,"line_start":1473,"line_end":1473,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":308916,"byte_end":308919,"line_start":1474,"line_end":1474,"column_start":2,"column_end":5}},{"value":"/ The last item returned, if any, will contain the remainder of the slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":308921,"byte_end":308997,"line_start":1475,"line_end":1475,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":308999,"byte_end":309002,"line_start":1476,"line_end":1476,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":309004,"byte_end":309018,"line_start":1477,"line_end":1477,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":309020,"byte_end":309023,"line_start":1478,"line_end":1478,"column_start":2,"column_end":5}},{"value":"/ [`slice::rsplitn`](https://doc.rust-lang.org/std/primitive.slice.html#method.rsplitn)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":309025,"byte_end":309114,"line_start":1479,"line_end":1479,"column_start":2,"column_end":91}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":309116,"byte_end":309119,"line_start":1480,"line_end":1480,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":309121,"byte_end":309142,"line_start":1481,"line_end":1481,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":309144,"byte_end":309147,"line_start":1482,"line_end":1482,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":309149,"byte_end":309217,"line_start":1483,"line_end":1483,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":309219,"byte_end":309293,"line_start":1484,"line_end":1484,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":309295,"byte_end":309305,"line_start":1485,"line_end":1485,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":309307,"byte_end":309310,"line_start":1486,"line_end":1486,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":309312,"byte_end":309326,"line_start":1487,"line_end":1487,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":309328,"byte_end":309331,"line_start":1488,"line_end":1488,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":309333,"byte_end":309344,"line_start":1489,"line_end":1489,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":309346,"byte_end":309373,"line_start":1490,"line_end":1490,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":309375,"byte_end":309378,"line_start":1491,"line_end":1491,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![Msb0, u8; 1, 0, 1, 0, 0, 1, 0, 1];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":309380,"byte_end":309435,"line_start":1492,"line_end":1492,"column_start":2,"column_end":57}},{"value":"/ for group in bits.rsplitn(2, |pos, _bit| pos % 3 == 2) {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":309437,"byte_end":309497,"line_start":1493,"line_end":1493,"column_start":2,"column_end":62}},{"value":"/ # #[cfg(feature = \"std\")] {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":309499,"byte_end":309530,"line_start":1494,"line_end":1494,"column_start":2,"column_end":33}},{"value":"/   println!(\"{}\", group.len());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":309532,"byte_end":309566,"line_start":1495,"line_end":1495,"column_start":2,"column_end":36}},{"value":"/ # }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":309568,"byte_end":309575,"line_start":1496,"line_end":1496,"column_start":2,"column_end":9}},{"value":"/ }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":309577,"byte_end":309582,"line_start":1497,"line_end":1497,"column_start":2,"column_end":7}},{"value":"/ //  2","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":309584,"byte_end":309593,"line_start":1498,"line_end":1498,"column_start":2,"column_end":11}},{"value":"/ //  5","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":309595,"byte_end":309604,"line_start":1499,"line_end":1499,"column_start":2,"column_end":11}},{"value":"/ # //  [10]","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":309606,"byte_end":309620,"line_start":1500,"line_end":1500,"column_start":2,"column_end":16}},{"value":"/ # //  [00101]","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":309622,"byte_end":309639,"line_start":1501,"line_end":1501,"column_start":2,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":309641,"byte_end":309648,"line_start":1502,"line_end":1502,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":309650,"byte_end":309659,"line_start":1503,"line_end":1503,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1539},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":310757,"byte_end":310768,"line_start":1538,"line_end":1538,"column_start":9,"column_end":20},"name":"rsplitn_mut","qualname":"<BitSlice<O, T>>::rsplitn_mut","value":"pub fn rsplitn_mut<F>(&mut Self, usize, F) -> RSplitNMut<, O, T, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over subslices separated by bits that match `pred`\n limited to returning at most `n` items. This starts at the end of the\n slice and works backwards. The matched bit is not contained in the\n subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over subslices separated by bits that match `pred`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":309800,"byte_end":309874,"line_start":1509,"line_end":1509,"column_start":2,"column_end":76}},{"value":"/ limited to returning at most `n` items. This starts at the end of the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":309876,"byte_end":309949,"line_start":1510,"line_end":1510,"column_start":2,"column_end":75}},{"value":"/ slice and works backwards. The matched bit is not contained in the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":309951,"byte_end":310021,"line_start":1511,"line_end":1511,"column_start":2,"column_end":72}},{"value":"/ subslices.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":310023,"byte_end":310037,"line_start":1512,"line_end":1512,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":310039,"byte_end":310042,"line_start":1513,"line_end":1513,"column_start":2,"column_end":5}},{"value":"/ The last item returned, if any, will contain the remainder of the slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":310044,"byte_end":310120,"line_start":1514,"line_end":1514,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":310122,"byte_end":310125,"line_start":1515,"line_end":1515,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":310127,"byte_end":310141,"line_start":1516,"line_end":1516,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":310143,"byte_end":310146,"line_start":1517,"line_end":1517,"column_start":2,"column_end":5}},{"value":"/ [`slice::rsplitn_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.rsplitn_mut)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":310148,"byte_end":310245,"line_start":1518,"line_end":1518,"column_start":2,"column_end":99}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":310247,"byte_end":310250,"line_start":1519,"line_end":1519,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":310252,"byte_end":310273,"line_start":1520,"line_end":1520,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":310275,"byte_end":310278,"line_start":1521,"line_end":1521,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":310280,"byte_end":310348,"line_start":1522,"line_end":1522,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":310350,"byte_end":310424,"line_start":1523,"line_end":1523,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":310426,"byte_end":310436,"line_start":1524,"line_end":1524,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":310438,"byte_end":310441,"line_start":1525,"line_end":1525,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":310443,"byte_end":310457,"line_start":1526,"line_end":1526,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":310459,"byte_end":310462,"line_start":1527,"line_end":1527,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":310464,"byte_end":310475,"line_start":1528,"line_end":1528,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":310477,"byte_end":310504,"line_start":1529,"line_end":1529,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":310506,"byte_end":310509,"line_start":1530,"line_end":1530,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut Msb0, u8; 0, 0, 1, 0, 0, 0, 1, 0];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":310511,"byte_end":310570,"line_start":1531,"line_end":1531,"column_start":2,"column_end":61}},{"value":"/ for group in bits.rsplitn_mut(2, |_pos, bit| *bit) {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":310572,"byte_end":310628,"line_start":1532,"line_end":1532,"column_start":2,"column_end":58}},{"value":"/   *group.get_mut(0).unwrap() = true;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":310630,"byte_end":310670,"line_start":1533,"line_end":1533,"column_start":2,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":310672,"byte_end":310677,"line_start":1534,"line_end":1534,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bits.as_slice()[0], 0b101_000_11);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":310679,"byte_end":310728,"line_start":1535,"line_end":1535,"column_start":2,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":310730,"byte_end":310737,"line_start":1536,"line_end":1536,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":310739,"byte_end":310748,"line_start":1537,"line_end":1537,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1541},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":312064,"byte_end":312072,"line_start":1578,"line_end":1578,"column_start":9,"column_end":17},"name":"contains","qualname":"<BitSlice<O, T>>::contains","value":"pub fn contains<O2, T2>(&Self, &BitSlice<O2, T2>) -> bool where O2: BitOrder,\nT2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the slice contains a subslice that matches the given\n span.","sig":null,"attributes":[{"value":"/ Returns `true` if the slice contains a subslice that matches the given","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":310915,"byte_end":310989,"line_start":1543,"line_end":1543,"column_start":2,"column_end":76}},{"value":"/ span.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":310991,"byte_end":311000,"line_start":1544,"line_end":1544,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":311002,"byte_end":311005,"line_start":1545,"line_end":1545,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":311007,"byte_end":311021,"line_start":1546,"line_end":1546,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":311023,"byte_end":311026,"line_start":1547,"line_end":1547,"column_start":2,"column_end":5}},{"value":"/ [`slice::contains`](https://doc.rust-lang.org/std/primitive.slice.html#method.contains)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":311028,"byte_end":311119,"line_start":1548,"line_end":1548,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":311121,"byte_end":311124,"line_start":1549,"line_end":1549,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":311126,"byte_end":311147,"line_start":1550,"line_end":1550,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":311149,"byte_end":311152,"line_start":1551,"line_end":1551,"column_start":2,"column_end":5}},{"value":"/ This searches for a matching subslice (allowing different type","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":311154,"byte_end":311220,"line_start":1552,"line_end":1552,"column_start":2,"column_end":68}},{"value":"/ parameters) rather than for a specific bit. Searching for a contained","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":311222,"byte_end":311295,"line_start":1553,"line_end":1553,"column_start":2,"column_end":75}},{"value":"/ element with a given value is not as useful on a collection of `bool`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":311297,"byte_end":311371,"line_start":1554,"line_end":1554,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":311373,"byte_end":311376,"line_start":1555,"line_end":1555,"column_start":2,"column_end":5}},{"value":"/ Furthermore, `BitSlice` defines [`any`] and [`not_all`], which are","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":311378,"byte_end":311448,"line_start":1556,"line_end":1556,"column_start":2,"column_end":72}},{"value":"/ optimized searchers for any `true` or `false` bit, respectively, in a","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":311450,"byte_end":311523,"line_start":1557,"line_end":1557,"column_start":2,"column_end":75}},{"value":"/ sequence.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":311525,"byte_end":311538,"line_start":1558,"line_end":1558,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":311540,"byte_end":311543,"line_start":1559,"line_end":1559,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":311545,"byte_end":311559,"line_start":1560,"line_end":1560,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":311561,"byte_end":311564,"line_start":1561,"line_end":1561,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":311566,"byte_end":311577,"line_start":1562,"line_end":1562,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":311579,"byte_end":311606,"line_start":1563,"line_end":1563,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":311608,"byte_end":311611,"line_start":1564,"line_end":1564,"column_start":2,"column_end":5}},{"value":"/ let data = 0b0101_1010u8;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":311613,"byte_end":311642,"line_start":1565,"line_end":1565,"column_start":2,"column_end":31}},{"value":"/ let bits_msb = data.view_bits::<Msb0>();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":311644,"byte_end":311688,"line_start":1566,"line_end":1566,"column_start":2,"column_end":46}},{"value":"/ let bits_lsb = data.view_bits::<Lsb0>();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":311690,"byte_end":311734,"line_start":1567,"line_end":1567,"column_start":2,"column_end":46}},{"value":"/ assert!(bits_msb.contains(&bits_lsb[1 .. 5]));","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":311736,"byte_end":311786,"line_start":1568,"line_end":1568,"column_start":2,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":311788,"byte_end":311795,"line_start":1569,"line_end":1569,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":311797,"byte_end":311800,"line_start":1570,"line_end":1570,"column_start":2,"column_end":5}},{"value":"/ This example uses a palindrome pattern to demonstrate that the slice","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":311802,"byte_end":311874,"line_start":1571,"line_end":1571,"column_start":2,"column_end":74}},{"value":"/ being searched for does not need to have the same type parameters as the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":311876,"byte_end":311952,"line_start":1572,"line_end":1572,"column_start":2,"column_end":78}},{"value":"/ slice being searched.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":311954,"byte_end":311979,"line_start":1573,"line_end":1573,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":311981,"byte_end":311984,"line_start":1574,"line_end":1574,"column_start":2,"column_end":5}},{"value":"/ [`any`]: #method.any","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":311986,"byte_end":312010,"line_start":1575,"line_end":1575,"column_start":2,"column_end":26}},{"value":"/ [`not_all`]: #method.not_all","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":312012,"byte_end":312044,"line_start":1576,"line_end":1576,"column_start":2,"column_end":34}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":312046,"byte_end":312055,"line_start":1577,"line_end":1577,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1545},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":313120,"byte_end":313131,"line_start":1620,"line_end":1620,"column_start":9,"column_end":20},"name":"starts_with","qualname":"<BitSlice<O, T>>::starts_with","value":"pub fn starts_with<O2, T2>(&Self, &BitSlice<O2, T2>) -> bool where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `needle` is a prefix of the slice.","sig":null,"attributes":[{"value":"/ Returns `true` if `needle` is a prefix of the slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":312268,"byte_end":312324,"line_start":1590,"line_end":1590,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":312326,"byte_end":312329,"line_start":1591,"line_end":1591,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":312331,"byte_end":312345,"line_start":1592,"line_end":1592,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":312347,"byte_end":312350,"line_start":1593,"line_end":1593,"column_start":2,"column_end":5}},{"value":"/ [`slice::starts_with`](https://doc.rust-lang.org/std/primitive.slice.html#method.starts_with)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":312352,"byte_end":312449,"line_start":1594,"line_end":1594,"column_start":2,"column_end":99}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":312451,"byte_end":312454,"line_start":1595,"line_end":1595,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":312456,"byte_end":312470,"line_start":1596,"line_end":1596,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":312472,"byte_end":312475,"line_start":1597,"line_end":1597,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":312477,"byte_end":312488,"line_start":1598,"line_end":1598,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":312490,"byte_end":312517,"line_start":1599,"line_end":1599,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":312519,"byte_end":312522,"line_start":1600,"line_end":1600,"column_start":2,"column_end":5}},{"value":"/ let data = 0b0100_1011u8;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":312524,"byte_end":312553,"line_start":1601,"line_end":1601,"column_start":2,"column_end":31}},{"value":"/ let haystack = data.view_bits::<Msb0>();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":312555,"byte_end":312599,"line_start":1602,"line_end":1602,"column_start":2,"column_end":46}},{"value":"/ let needle = &data.view_bits::<Lsb0>()[2 .. 5];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":312601,"byte_end":312652,"line_start":1603,"line_end":1603,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":312654,"byte_end":312657,"line_start":1604,"line_end":1604,"column_start":2,"column_end":5}},{"value":"/ assert!(haystack.starts_with(&needle[.. 2]));","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":312659,"byte_end":312708,"line_start":1605,"line_end":1605,"column_start":2,"column_end":51}},{"value":"/ assert!(haystack.starts_with(needle));","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":312710,"byte_end":312752,"line_start":1606,"line_end":1606,"column_start":2,"column_end":44}},{"value":"/ assert!(!haystack.starts_with(&haystack[2 .. 4]));","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":312754,"byte_end":312808,"line_start":1607,"line_end":1607,"column_start":2,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":312810,"byte_end":312817,"line_start":1608,"line_end":1608,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":312819,"byte_end":312822,"line_start":1609,"line_end":1609,"column_start":2,"column_end":5}},{"value":"/ Always returns `true` if `needle` is an empty slice:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":312824,"byte_end":312880,"line_start":1610,"line_end":1610,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":312882,"byte_end":312885,"line_start":1611,"line_end":1611,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":312887,"byte_end":312898,"line_start":1612,"line_end":1612,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":312900,"byte_end":312927,"line_start":1613,"line_end":1613,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":312929,"byte_end":312932,"line_start":1614,"line_end":1614,"column_start":2,"column_end":5}},{"value":"/ let empty = BitSlice::<LocalBits, usize>::empty();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":312934,"byte_end":312988,"line_start":1615,"line_end":1615,"column_start":2,"column_end":56}},{"value":"/ assert!(0u8.view_bits::<LocalBits>().starts_with(empty));","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":312990,"byte_end":313051,"line_start":1616,"line_end":1616,"column_start":2,"column_end":63}},{"value":"/ assert!(empty.starts_with(empty));","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":313053,"byte_end":313091,"line_start":1617,"line_end":1617,"column_start":2,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":313093,"byte_end":313100,"line_start":1618,"line_end":1618,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":313102,"byte_end":313111,"line_start":1619,"line_end":1619,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1548},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":314164,"byte_end":314173,"line_start":1659,"line_end":1659,"column_start":9,"column_end":18},"name":"ends_with","qualname":"<BitSlice<O, T>>::ends_with","value":"pub fn ends_with<O2, T2>(&Self, &BitSlice<O2, T2>) -> bool where O2: BitOrder,\nT2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `needle` is a suffix of the slice.","sig":null,"attributes":[{"value":"/ Returns `true` if `needle` is a suffix of the slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":313326,"byte_end":313382,"line_start":1629,"line_end":1629,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":313384,"byte_end":313387,"line_start":1630,"line_end":1630,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":313389,"byte_end":313403,"line_start":1631,"line_end":1631,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":313405,"byte_end":313408,"line_start":1632,"line_end":1632,"column_start":2,"column_end":5}},{"value":"/ [`slice::ends_with`](https://doc.rust-lang.org/std/primitive.slice.html#method.ends_with)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":313410,"byte_end":313503,"line_start":1633,"line_end":1633,"column_start":2,"column_end":95}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":313505,"byte_end":313508,"line_start":1634,"line_end":1634,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":313510,"byte_end":313524,"line_start":1635,"line_end":1635,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":313526,"byte_end":313529,"line_start":1636,"line_end":1636,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":313531,"byte_end":313542,"line_start":1637,"line_end":1637,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":313544,"byte_end":313571,"line_start":1638,"line_end":1638,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":313573,"byte_end":313576,"line_start":1639,"line_end":1639,"column_start":2,"column_end":5}},{"value":"/ let data = 0b0100_1011u8;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":313578,"byte_end":313607,"line_start":1640,"line_end":1640,"column_start":2,"column_end":31}},{"value":"/ let haystack = data.view_bits::<Lsb0>();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":313609,"byte_end":313653,"line_start":1641,"line_end":1641,"column_start":2,"column_end":46}},{"value":"/ let needle = &data.view_bits::<Msb0>()[3 .. 6];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":313655,"byte_end":313706,"line_start":1642,"line_end":1642,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":313708,"byte_end":313711,"line_start":1643,"line_end":1643,"column_start":2,"column_end":5}},{"value":"/ assert!(haystack.ends_with(&needle[1 ..]));","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":313713,"byte_end":313760,"line_start":1644,"line_end":1644,"column_start":2,"column_end":49}},{"value":"/ assert!(haystack.ends_with(needle));","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":313762,"byte_end":313802,"line_start":1645,"line_end":1645,"column_start":2,"column_end":42}},{"value":"/ assert!(!haystack.ends_with(&haystack[2 .. 4]));","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":313804,"byte_end":313856,"line_start":1646,"line_end":1646,"column_start":2,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":313858,"byte_end":313865,"line_start":1647,"line_end":1647,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":313867,"byte_end":313870,"line_start":1648,"line_end":1648,"column_start":2,"column_end":5}},{"value":"/ Always returns `true` if `needle` is an empty slice:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":313872,"byte_end":313928,"line_start":1649,"line_end":1649,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":313930,"byte_end":313933,"line_start":1650,"line_end":1650,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":313935,"byte_end":313946,"line_start":1651,"line_end":1651,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":313948,"byte_end":313975,"line_start":1652,"line_end":1652,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":313977,"byte_end":313980,"line_start":1653,"line_end":1653,"column_start":2,"column_end":5}},{"value":"/ let empty = BitSlice::<LocalBits, usize>::empty();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":313982,"byte_end":314036,"line_start":1654,"line_end":1654,"column_start":2,"column_end":56}},{"value":"/ assert!(0u8.view_bits::<LocalBits>().ends_with(empty));","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":314038,"byte_end":314097,"line_start":1655,"line_end":1655,"column_start":2,"column_end":61}},{"value":"/ assert!(empty.ends_with(empty));","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":314099,"byte_end":314135,"line_start":1656,"line_end":1656,"column_start":2,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":314137,"byte_end":314144,"line_start":1657,"line_end":1657,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":314146,"byte_end":314155,"line_start":1658,"line_end":1658,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1551},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":315497,"byte_end":315508,"line_start":1710,"line_end":1710,"column_start":9,"column_end":20},"name":"rotate_left","qualname":"<BitSlice<O, T>>::rotate_left","value":"pub fn rotate_left(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Rotates the slice in-place such that the first `by` bits of the slice\n move to the end while the last `self.len() - by` bits move to the front.\n After calling `rotate_left`, the bit previously at index `by` will\n become the first bit in the slice.","sig":null,"attributes":[{"value":"/ Rotates the slice in-place such that the first `by` bits of the slice","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":314394,"byte_end":314467,"line_start":1669,"line_end":1669,"column_start":2,"column_end":75}},{"value":"/ move to the end while the last `self.len() - by` bits move to the front.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":314469,"byte_end":314545,"line_start":1670,"line_end":1670,"column_start":2,"column_end":78}},{"value":"/ After calling `rotate_left`, the bit previously at index `by` will","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":314547,"byte_end":314617,"line_start":1671,"line_end":1671,"column_start":2,"column_end":72}},{"value":"/ become the first bit in the slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":314619,"byte_end":314657,"line_start":1672,"line_end":1672,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":314659,"byte_end":314662,"line_start":1673,"line_end":1673,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":314664,"byte_end":314678,"line_start":1674,"line_end":1674,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":314680,"byte_end":314683,"line_start":1675,"line_end":1675,"column_start":2,"column_end":5}},{"value":"/ [`slice::rotate_left`](https://doc.rust-lang.org/std/primitive.slice.html#rotate_left)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":314685,"byte_end":314775,"line_start":1676,"line_end":1676,"column_start":2,"column_end":92}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":314777,"byte_end":314780,"line_start":1677,"line_end":1677,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":314782,"byte_end":314794,"line_start":1678,"line_end":1678,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":314796,"byte_end":314799,"line_start":1679,"line_end":1679,"column_start":2,"column_end":5}},{"value":"/ This function will panic if `by` is greater than the length of the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":314801,"byte_end":314871,"line_start":1680,"line_end":1680,"column_start":2,"column_end":72}},{"value":"/ slice. Note that `by == self.len()` does *not* panic and is a no-op","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":314873,"byte_end":314944,"line_start":1681,"line_end":1681,"column_start":2,"column_end":73}},{"value":"/ rotation.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":314946,"byte_end":314959,"line_start":1682,"line_end":1682,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":314961,"byte_end":314964,"line_start":1683,"line_end":1683,"column_start":2,"column_end":5}},{"value":"/ # Complexity","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":314966,"byte_end":314982,"line_start":1684,"line_end":1684,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":314984,"byte_end":314987,"line_start":1685,"line_end":1685,"column_start":2,"column_end":5}},{"value":"/ Takes linear (in `self.len()`) time.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":314989,"byte_end":315029,"line_start":1686,"line_end":1686,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":315031,"byte_end":315034,"line_start":1687,"line_end":1687,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":315036,"byte_end":315050,"line_start":1688,"line_end":1688,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":315052,"byte_end":315055,"line_start":1689,"line_end":1689,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":315057,"byte_end":315068,"line_start":1690,"line_end":1690,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":315070,"byte_end":315097,"line_start":1691,"line_end":1691,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":315099,"byte_end":315102,"line_start":1692,"line_end":1692,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0xF0u8;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":315104,"byte_end":315130,"line_start":1693,"line_end":1693,"column_start":2,"column_end":28}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":315132,"byte_end":315176,"line_start":1694,"line_end":1694,"column_start":2,"column_end":46}},{"value":"/ bits.rotate_left(2);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":315178,"byte_end":315202,"line_start":1695,"line_end":1695,"column_start":2,"column_end":26}},{"value":"/ assert_eq!(data, 0xC3);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":315204,"byte_end":315231,"line_start":1696,"line_end":1696,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":315233,"byte_end":315240,"line_start":1697,"line_end":1697,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":315242,"byte_end":315245,"line_start":1698,"line_end":1698,"column_start":2,"column_end":5}},{"value":"/ Rotating a subslice:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":315247,"byte_end":315271,"line_start":1699,"line_end":1699,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":315273,"byte_end":315276,"line_start":1700,"line_end":1700,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":315278,"byte_end":315289,"line_start":1701,"line_end":1701,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":315291,"byte_end":315318,"line_start":1702,"line_end":1702,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":315320,"byte_end":315323,"line_start":1703,"line_end":1703,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0xF0u8;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":315325,"byte_end":315351,"line_start":1704,"line_end":1704,"column_start":2,"column_end":28}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":315353,"byte_end":315397,"line_start":1705,"line_end":1705,"column_start":2,"column_end":46}},{"value":"/ bits[1 .. 5].rotate_left(1);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":315399,"byte_end":315431,"line_start":1706,"line_end":1706,"column_start":2,"column_end":34}},{"value":"/ assert_eq!(data, 0b1_1101_000);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":315433,"byte_end":315468,"line_start":1707,"line_end":1707,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":315470,"byte_end":315477,"line_start":1708,"line_end":1708,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":315479,"byte_end":315488,"line_start":1709,"line_end":1709,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1552},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":317847,"byte_end":317859,"line_start":1786,"line_end":1786,"column_start":9,"column_end":21},"name":"rotate_right","qualname":"<BitSlice<O, T>>::rotate_right","value":"pub fn rotate_right(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Rotates the slice in-place such that the first `self.len() - by` bits of\n the slice move to the end while the last `by` bits move to the front.\n After calling `rotate_right`, the bit previously at index `self.len() -\n by` will become the first bit in the slice.","sig":null,"attributes":[{"value":"/ Rotates the slice in-place such that the first `self.len() - by` bits of","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":316728,"byte_end":316804,"line_start":1745,"line_end":1745,"column_start":2,"column_end":78}},{"value":"/ the slice move to the end while the last `by` bits move to the front.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":316806,"byte_end":316879,"line_start":1746,"line_end":1746,"column_start":2,"column_end":75}},{"value":"/ After calling `rotate_right`, the bit previously at index `self.len() -","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":316881,"byte_end":316956,"line_start":1747,"line_end":1747,"column_start":2,"column_end":77}},{"value":"/ by` will become the first bit in the slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":316958,"byte_end":317005,"line_start":1748,"line_end":1748,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":317007,"byte_end":317010,"line_start":1749,"line_end":1749,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":317012,"byte_end":317026,"line_start":1750,"line_end":1750,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":317028,"byte_end":317031,"line_start":1751,"line_end":1751,"column_start":2,"column_end":5}},{"value":"/ [`slice::rotate_right`](https://doc.rust-lang.org/std/primitive.slice.html#rotate_right)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":317033,"byte_end":317125,"line_start":1752,"line_end":1752,"column_start":2,"column_end":94}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":317127,"byte_end":317130,"line_start":1753,"line_end":1753,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":317132,"byte_end":317144,"line_start":1754,"line_end":1754,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":317146,"byte_end":317149,"line_start":1755,"line_end":1755,"column_start":2,"column_end":5}},{"value":"/ This function will panic if `by` is greater than the length of the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":317151,"byte_end":317221,"line_start":1756,"line_end":1756,"column_start":2,"column_end":72}},{"value":"/ slice. Note that `by == self.len()` does *not* panic and is a no-op","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":317223,"byte_end":317294,"line_start":1757,"line_end":1757,"column_start":2,"column_end":73}},{"value":"/ rotation.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":317296,"byte_end":317309,"line_start":1758,"line_end":1758,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":317311,"byte_end":317314,"line_start":1759,"line_end":1759,"column_start":2,"column_end":5}},{"value":"/ # Complexity","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":317316,"byte_end":317332,"line_start":1760,"line_end":1760,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":317334,"byte_end":317337,"line_start":1761,"line_end":1761,"column_start":2,"column_end":5}},{"value":"/ Takes linear (in `self.len()`) time.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":317339,"byte_end":317379,"line_start":1762,"line_end":1762,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":317381,"byte_end":317384,"line_start":1763,"line_end":1763,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":317386,"byte_end":317400,"line_start":1764,"line_end":1764,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":317402,"byte_end":317405,"line_start":1765,"line_end":1765,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":317407,"byte_end":317418,"line_start":1766,"line_end":1766,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":317420,"byte_end":317447,"line_start":1767,"line_end":1767,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":317449,"byte_end":317452,"line_start":1768,"line_end":1768,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0xF0u8;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":317454,"byte_end":317480,"line_start":1769,"line_end":1769,"column_start":2,"column_end":28}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":317482,"byte_end":317526,"line_start":1770,"line_end":1770,"column_start":2,"column_end":46}},{"value":"/ bits.rotate_right(2);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":317528,"byte_end":317553,"line_start":1771,"line_end":1771,"column_start":2,"column_end":27}},{"value":"/ assert_eq!(data, 0x3C);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":317555,"byte_end":317582,"line_start":1772,"line_end":1772,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":317584,"byte_end":317591,"line_start":1773,"line_end":1773,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":317593,"byte_end":317596,"line_start":1774,"line_end":1774,"column_start":2,"column_end":5}},{"value":"/ Rotate a subslice:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":317598,"byte_end":317620,"line_start":1775,"line_end":1775,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":317622,"byte_end":317625,"line_start":1776,"line_end":1776,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":317627,"byte_end":317638,"line_start":1777,"line_end":1777,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":317640,"byte_end":317667,"line_start":1778,"line_end":1778,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":317669,"byte_end":317672,"line_start":1779,"line_end":1779,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0xF0u8;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":317674,"byte_end":317700,"line_start":1780,"line_end":1780,"column_start":2,"column_end":28}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":317702,"byte_end":317746,"line_start":1781,"line_end":1781,"column_start":2,"column_end":46}},{"value":"/ bits[1 .. 5].rotate_right(1);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":317748,"byte_end":317781,"line_start":1782,"line_end":1782,"column_start":2,"column_end":35}},{"value":"/ assert_eq!(data, 0b1_0111_000);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":317783,"byte_end":317818,"line_start":1783,"line_end":1783,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":317820,"byte_end":317827,"line_start":1784,"line_end":1784,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":317829,"byte_end":317838,"line_start":1785,"line_end":1785,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1553},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":320987,"byte_end":321006,"line_start":1886,"line_end":1886,"column_start":9,"column_end":28},"name":"clone_from_bitslice","qualname":"<BitSlice<O, T>>::clone_from_bitslice","value":"pub fn clone_from_bitslice<O2, T2>(&mut Self, &BitSlice<O2, T2>) where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Copies the bits from `src` into `self`.","sig":null,"attributes":[{"value":"/ Copies the bits from `src` into `self`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":318473,"byte_end":318516,"line_start":1810,"line_end":1810,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":318518,"byte_end":318521,"line_start":1811,"line_end":1811,"column_start":2,"column_end":5}},{"value":"/ The length of `src` must be the same as `self`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":318523,"byte_end":318574,"line_start":1812,"line_end":1812,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":318576,"byte_end":318579,"line_start":1813,"line_end":1813,"column_start":2,"column_end":5}},{"value":"/ If you are attempting to write an integer value into a `BitSlice`, see","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":318581,"byte_end":318655,"line_start":1814,"line_end":1814,"column_start":2,"column_end":76}},{"value":"/ the [`BitField::store`] trait function.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":318657,"byte_end":318700,"line_start":1815,"line_end":1815,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":318702,"byte_end":318705,"line_start":1816,"line_end":1816,"column_start":2,"column_end":5}},{"value":"/ # Implementation","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":318707,"byte_end":318727,"line_start":1817,"line_end":1817,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":318729,"byte_end":318732,"line_start":1818,"line_end":1818,"column_start":2,"column_end":5}},{"value":"/ This method is by necessity a bit-by-bit individual walk across both","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":318734,"byte_end":318806,"line_start":1819,"line_end":1819,"column_start":2,"column_end":74}},{"value":"/ slices. Benchmarks indicate that where the slices share type parameters,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":318808,"byte_end":318884,"line_start":1820,"line_end":1820,"column_start":2,"column_end":78}},{"value":"/ this is very close in performance to an element-wise `memcpy`. You","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":318886,"byte_end":318956,"line_start":1821,"line_end":1821,"column_start":2,"column_end":72}},{"value":"/ should use this method as the default transfer behavior, and only switch","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":318958,"byte_end":319034,"line_start":1822,"line_end":1822,"column_start":2,"column_end":78}},{"value":"/ to [`.copy_from_bitslice()`] where you know that your performance is an","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":319036,"byte_end":319111,"line_start":1823,"line_end":1823,"column_start":2,"column_end":77}},{"value":"/ issue *and* you can demonstrate that `.copy_from_bitslice()` is","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":319113,"byte_end":319180,"line_start":1824,"line_end":1824,"column_start":2,"column_end":69}},{"value":"/ meaningfully better.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":319182,"byte_end":319206,"line_start":1825,"line_end":1825,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":319208,"byte_end":319211,"line_start":1826,"line_end":1826,"column_start":2,"column_end":5}},{"value":"/ Where `self` and `src` are not of the same type parameters, crate","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":319213,"byte_end":319282,"line_start":1827,"line_end":1827,"column_start":2,"column_end":71}},{"value":"/ benchmarks show a roughly halved runtime performance.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":319284,"byte_end":319341,"line_start":1828,"line_end":1828,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":319343,"byte_end":319346,"line_start":1829,"line_end":1829,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":319348,"byte_end":319362,"line_start":1830,"line_end":1830,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":319364,"byte_end":319367,"line_start":1831,"line_end":1831,"column_start":2,"column_end":5}},{"value":"/ [`slice::clone_from_slice`](https://doc.rust-lang.org/std/primitive.slice.html#method.clone_from_slice)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":319369,"byte_end":319476,"line_start":1832,"line_end":1832,"column_start":2,"column_end":109}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":319478,"byte_end":319481,"line_start":1833,"line_end":1833,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":319483,"byte_end":319504,"line_start":1834,"line_end":1834,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":319506,"byte_end":319509,"line_start":1835,"line_end":1835,"column_start":2,"column_end":5}},{"value":"/ This method is renamed, as it takes a bit slice rather than an element","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":319511,"byte_end":319585,"line_start":1836,"line_end":1836,"column_start":2,"column_end":76}},{"value":"/ slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":319587,"byte_end":319597,"line_start":1837,"line_end":1837,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":319599,"byte_end":319602,"line_start":1838,"line_end":1838,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":319604,"byte_end":319616,"line_start":1839,"line_end":1839,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":319618,"byte_end":319621,"line_start":1840,"line_end":1840,"column_start":2,"column_end":5}},{"value":"/ This function will panic if the two slices have different lengths.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":319623,"byte_end":319693,"line_start":1841,"line_end":1841,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":319695,"byte_end":319698,"line_start":1842,"line_end":1842,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":319700,"byte_end":319714,"line_start":1843,"line_end":1843,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":319716,"byte_end":319719,"line_start":1844,"line_end":1844,"column_start":2,"column_end":5}},{"value":"/ Cloning two bits from a slice into another:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":319721,"byte_end":319768,"line_start":1845,"line_end":1845,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":319770,"byte_end":319773,"line_start":1846,"line_end":1846,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":319775,"byte_end":319786,"line_start":1847,"line_end":1847,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":319788,"byte_end":319815,"line_start":1848,"line_end":1848,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":319817,"byte_end":319820,"line_start":1849,"line_end":1849,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0u8;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":319822,"byte_end":319845,"line_start":1850,"line_end":1850,"column_start":2,"column_end":25}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":319847,"byte_end":319891,"line_start":1851,"line_end":1851,"column_start":2,"column_end":46}},{"value":"/ let src = 0x0Fu16.view_bits::<Lsb0>();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":319893,"byte_end":319935,"line_start":1852,"line_end":1852,"column_start":2,"column_end":44}},{"value":"/ bits[.. 2].clone_from_bitslice(&src[2 .. 4]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":319937,"byte_end":319986,"line_start":1853,"line_end":1853,"column_start":2,"column_end":51}},{"value":"/ assert_eq!(data, 0xC0);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":319988,"byte_end":320015,"line_start":1854,"line_end":1854,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":320017,"byte_end":320024,"line_start":1855,"line_end":1855,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":320026,"byte_end":320029,"line_start":1856,"line_end":1856,"column_start":2,"column_end":5}},{"value":"/ Rust enforces that there can only be one mutable reference with no","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":320031,"byte_end":320101,"line_start":1857,"line_end":1857,"column_start":2,"column_end":72}},{"value":"/ immutable references to a particular piece of data in a particular","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":320103,"byte_end":320173,"line_start":1858,"line_end":1858,"column_start":2,"column_end":72}},{"value":"/ scope. Because of this, attempting to use `clone_from_bitslice` on a","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":320175,"byte_end":320247,"line_start":1859,"line_end":1859,"column_start":2,"column_end":74}},{"value":"/ single slice will result in a compile failure:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":320249,"byte_end":320299,"line_start":1860,"line_end":1860,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":320301,"byte_end":320304,"line_start":1861,"line_end":1861,"column_start":2,"column_end":5}},{"value":"/ ```rust,compile_fail","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":320306,"byte_end":320330,"line_start":1862,"line_end":1862,"column_start":2,"column_end":26}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":320332,"byte_end":320359,"line_start":1863,"line_end":1863,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":320361,"byte_end":320364,"line_start":1864,"line_end":1864,"column_start":2,"column_end":5}},{"value":"/ let mut data = 3u8;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":320366,"byte_end":320389,"line_start":1865,"line_end":1865,"column_start":2,"column_end":25}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":320391,"byte_end":320435,"line_start":1866,"line_end":1866,"column_start":2,"column_end":46}},{"value":"/ bits[.. 2].clone_from_bitslice(&bits[6 ..]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":320437,"byte_end":320485,"line_start":1867,"line_end":1867,"column_start":2,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":320487,"byte_end":320494,"line_start":1868,"line_end":1868,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":320496,"byte_end":320499,"line_start":1869,"line_end":1869,"column_start":2,"column_end":5}},{"value":"/ To work around this, we can use [`split_at_mut`] to create two distinct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":320501,"byte_end":320576,"line_start":1870,"line_end":1870,"column_start":2,"column_end":77}},{"value":"/ sub-slices from a slice:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":320578,"byte_end":320606,"line_start":1871,"line_end":1871,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":320608,"byte_end":320611,"line_start":1872,"line_end":1872,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":320613,"byte_end":320624,"line_start":1873,"line_end":1873,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":320626,"byte_end":320653,"line_start":1874,"line_end":1874,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":320655,"byte_end":320658,"line_start":1875,"line_end":1875,"column_start":2,"column_end":5}},{"value":"/ let mut data = 3u8;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":320660,"byte_end":320683,"line_start":1876,"line_end":1876,"column_start":2,"column_end":25}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":320685,"byte_end":320729,"line_start":1877,"line_end":1877,"column_start":2,"column_end":46}},{"value":"/ let (head, tail) = bits.split_at_mut(4);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":320731,"byte_end":320775,"line_start":1878,"line_end":1878,"column_start":2,"column_end":46}},{"value":"/ head.clone_from_bitslice(tail);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":320777,"byte_end":320812,"line_start":1879,"line_end":1879,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(data, 0x33);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":320814,"byte_end":320841,"line_start":1880,"line_end":1880,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":320843,"byte_end":320850,"line_start":1881,"line_end":1881,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":320852,"byte_end":320855,"line_start":1882,"line_end":1882,"column_start":2,"column_end":5}},{"value":"/ [`BitField::store`]: ../field/trait.BitField.html#method.store","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":320857,"byte_end":320923,"line_start":1883,"line_end":1883,"column_start":2,"column_end":68}},{"value":"/ [`split_at_mut`]: #method.split_at_mut","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":320925,"byte_end":320967,"line_start":1884,"line_end":1884,"column_start":2,"column_end":44}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":320969,"byte_end":320978,"line_start":1885,"line_end":1885,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1556},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":321464,"byte_end":321480,"line_start":1908,"line_end":1908,"column_start":9,"column_end":25},"name":"clone_from_slice","qualname":"<BitSlice<O, T>>::clone_from_slice","value":"pub fn clone_from_slice<O2, T2>(&mut Self, &BitSlice<O2, T2>) where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":321328,"byte_end":321345,"line_start":1905,"line_end":1905,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":321347,"byte_end":321377,"line_start":1906,"line_end":1906,"column_start":2,"column_end":32}},{"value":"deprecated(note = \"Use `.clone_from_bitslice` to copy between bitslices\")","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":321379,"byte_end":321455,"line_start":1907,"line_end":1907,"column_start":2,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1559},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":323250,"byte_end":323268,"line_start":1966,"line_end":1966,"column_start":9,"column_end":27},"name":"copy_from_bitslice","qualname":"<BitSlice<O, T>>::copy_from_bitslice","value":"pub fn copy_from_bitslice(&mut Self, &Self)","parent":null,"children":[],"decl_id":null,"docs":" Copies all bits from `src` into `self`.","sig":null,"attributes":[{"value":"/ Copies all bits from `src` into `self`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":321603,"byte_end":321646,"line_start":1916,"line_end":1916,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":321648,"byte_end":321651,"line_start":1917,"line_end":1917,"column_start":2,"column_end":5}},{"value":"/ The length of `src` must be the same as `self`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":321653,"byte_end":321704,"line_start":1918,"line_end":1918,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":321706,"byte_end":321709,"line_start":1919,"line_end":1919,"column_start":2,"column_end":5}},{"value":"/ If you are attempting to write an integer value into a `BitSlice`, see","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":321711,"byte_end":321785,"line_start":1920,"line_end":1920,"column_start":2,"column_end":76}},{"value":"/ the [`BitField::store`] trait function.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":321787,"byte_end":321830,"line_start":1921,"line_end":1921,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":321832,"byte_end":321835,"line_start":1922,"line_end":1922,"column_start":2,"column_end":5}},{"value":"/ # Implementation","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":321837,"byte_end":321857,"line_start":1923,"line_end":1923,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":321859,"byte_end":321862,"line_start":1924,"line_end":1924,"column_start":2,"column_end":5}},{"value":"/ This method attempts to use `memcpy` element-wise copy acceleration","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":321864,"byte_end":321935,"line_start":1925,"line_end":1925,"column_start":2,"column_end":73}},{"value":"/ where possible. This will only occur when both `src` and `self` are","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":321937,"byte_end":322008,"line_start":1926,"line_end":1926,"column_start":2,"column_end":73}},{"value":"/ exactly similar: in addition to having the same type parameters and","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":322010,"byte_end":322081,"line_start":1927,"line_end":1927,"column_start":2,"column_end":73}},{"value":"/ length, they must begin at the same offset in an element.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":322083,"byte_end":322144,"line_start":1928,"line_end":1928,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":322146,"byte_end":322149,"line_start":1929,"line_end":1929,"column_start":2,"column_end":5}},{"value":"/ Benchmarks do not indicate that `memcpy` element-wise copy is","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":322151,"byte_end":322216,"line_start":1930,"line_end":1930,"column_start":2,"column_end":67}},{"value":"/ significantly faster than [`.clone_from_bitslice()`]’s bit-wise crawl.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":322218,"byte_end":322294,"line_start":1931,"line_end":1931,"column_start":2,"column_end":76}},{"value":"/ This implementation is retained so that you have the ability to observe","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":322296,"byte_end":322371,"line_start":1932,"line_end":1932,"column_start":2,"column_end":77}},{"value":"/ performance characteristics on your own targets and choose as","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":322373,"byte_end":322438,"line_start":1933,"line_end":1933,"column_start":2,"column_end":67}},{"value":"/ appropriate.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":322440,"byte_end":322456,"line_start":1934,"line_end":1934,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":322458,"byte_end":322461,"line_start":1935,"line_end":1935,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":322463,"byte_end":322477,"line_start":1936,"line_end":1936,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":322479,"byte_end":322482,"line_start":1937,"line_end":1937,"column_start":2,"column_end":5}},{"value":"/ [`slice::copy_from_slice`](https://doc.rust-lang.org/std/primitive.std.html#method.copy_from_slice)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":322484,"byte_end":322587,"line_start":1938,"line_end":1938,"column_start":2,"column_end":105}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":322589,"byte_end":322592,"line_start":1939,"line_end":1939,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":322594,"byte_end":322615,"line_start":1940,"line_end":1940,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":322617,"byte_end":322620,"line_start":1941,"line_end":1941,"column_start":2,"column_end":5}},{"value":"/ This method is renamed, as it takes a bit slice rather than an element","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":322622,"byte_end":322696,"line_start":1942,"line_end":1942,"column_start":2,"column_end":76}},{"value":"/ slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":322698,"byte_end":322708,"line_start":1943,"line_end":1943,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":322710,"byte_end":322713,"line_start":1944,"line_end":1944,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":322715,"byte_end":322727,"line_start":1945,"line_end":1945,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":322729,"byte_end":322732,"line_start":1946,"line_end":1946,"column_start":2,"column_end":5}},{"value":"/ This function will panic if the two slices have different lengths.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":322734,"byte_end":322804,"line_start":1947,"line_end":1947,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":322806,"byte_end":322809,"line_start":1948,"line_end":1948,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":322811,"byte_end":322825,"line_start":1949,"line_end":1949,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":322827,"byte_end":322830,"line_start":1950,"line_end":1950,"column_start":2,"column_end":5}},{"value":"/ Copying two bits from a slice into another:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":322832,"byte_end":322879,"line_start":1951,"line_end":1951,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":322881,"byte_end":322884,"line_start":1952,"line_end":1952,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":322886,"byte_end":322897,"line_start":1953,"line_end":1953,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":322899,"byte_end":322926,"line_start":1954,"line_end":1954,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":322928,"byte_end":322931,"line_start":1955,"line_end":1955,"column_start":2,"column_end":5}},{"value":"/ let mut dst = bits![mut 0; 200];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":322933,"byte_end":322969,"line_start":1956,"line_end":1956,"column_start":2,"column_end":38}},{"value":"/ let src = bits![1; 200];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":322971,"byte_end":322999,"line_start":1957,"line_end":1957,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":323001,"byte_end":323004,"line_start":1958,"line_end":1958,"column_start":2,"column_end":5}},{"value":"/ assert!(dst.not_any());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":323006,"byte_end":323033,"line_start":1959,"line_end":1959,"column_start":2,"column_end":29}},{"value":"/ dst.copy_from_bitslice(src);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":323035,"byte_end":323067,"line_start":1960,"line_end":1960,"column_start":2,"column_end":34}},{"value":"/ assert!(dst.all());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":323069,"byte_end":323092,"line_start":1961,"line_end":1961,"column_start":2,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":323094,"byte_end":323101,"line_start":1962,"line_end":1962,"column_start":2,"column_end":9}},{"value":"/ [`BitField::store`]: ../field/trait.BitField.html#method.store","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":323103,"byte_end":323169,"line_start":1963,"line_end":1963,"column_start":2,"column_end":68}},{"value":"/ [`.clone_from_bitslice()`]: #method.clone_from_bitslice","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":323171,"byte_end":323230,"line_start":1964,"line_end":1964,"column_start":2,"column_end":61}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":323232,"byte_end":323241,"line_start":1965,"line_end":1965,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1560},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":324811,"byte_end":324826,"line_start":2028,"line_end":2028,"column_start":9,"column_end":24},"name":"copy_from_slice","qualname":"<BitSlice<O, T>>::copy_from_slice","value":"pub fn copy_from_slice(&mut Self, &Self)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":324676,"byte_end":324693,"line_start":2025,"line_end":2025,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":324695,"byte_end":324725,"line_start":2026,"line_end":2026,"column_start":2,"column_end":32}},{"value":"deprecated(note = \"Use `.copy_from_bitslice` to copy between bitslices\")","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":324727,"byte_end":324802,"line_start":2027,"line_end":2027,"column_start":2,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1561},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":325794,"byte_end":325805,"line_start":2061,"line_end":2061,"column_start":9,"column_end":20},"name":"copy_within","qualname":"<BitSlice<O, T>>::copy_within","value":"pub fn copy_within<R>(&mut Self, R, usize) where R: RangeBounds<usize>","parent":null,"children":[],"decl_id":null,"docs":" Copies bits from one part of the slice to another part of itself.","sig":null,"attributes":[{"value":"/ Copies bits from one part of the slice to another part of itself.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":324888,"byte_end":324957,"line_start":2032,"line_end":2032,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":324959,"byte_end":324962,"line_start":2033,"line_end":2033,"column_start":2,"column_end":5}},{"value":"/ `src` is the range within `self` to copy from. `dest` is the starting","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":324964,"byte_end":325037,"line_start":2034,"line_end":2034,"column_start":2,"column_end":75}},{"value":"/ index of the range within `self` to copy to, which will have the same","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":325039,"byte_end":325112,"line_start":2035,"line_end":2035,"column_start":2,"column_end":75}},{"value":"/ length as `src`. The two ranges may overlap. The ends of the two ranges","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":325114,"byte_end":325189,"line_start":2036,"line_end":2036,"column_start":2,"column_end":77}},{"value":"/ must be less than or equal to `self.len()`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":325191,"byte_end":325238,"line_start":2037,"line_end":2037,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":325240,"byte_end":325243,"line_start":2038,"line_end":2038,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":325245,"byte_end":325259,"line_start":2039,"line_end":2039,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":325261,"byte_end":325264,"line_start":2040,"line_end":2040,"column_start":2,"column_end":5}},{"value":"/ [`slice::copy_within`](https://doc.rust-lang.org/std/primitive.slice.html#method.copy_within)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":325266,"byte_end":325363,"line_start":2041,"line_end":2041,"column_start":2,"column_end":99}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":325365,"byte_end":325368,"line_start":2042,"line_end":2042,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":325370,"byte_end":325382,"line_start":2043,"line_end":2043,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":325384,"byte_end":325387,"line_start":2044,"line_end":2044,"column_start":2,"column_end":5}},{"value":"/ This function will panic if either range exceeds the end of the slice,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":325389,"byte_end":325463,"line_start":2045,"line_end":2045,"column_start":2,"column_end":76}},{"value":"/ or if the end of `src` is before the start.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":325465,"byte_end":325512,"line_start":2046,"line_end":2046,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":325514,"byte_end":325517,"line_start":2047,"line_end":2047,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":325519,"byte_end":325533,"line_start":2048,"line_end":2048,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":325535,"byte_end":325538,"line_start":2049,"line_end":2049,"column_start":2,"column_end":5}},{"value":"/ Copying four bytes within a slice:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":325540,"byte_end":325578,"line_start":2050,"line_end":2050,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":325580,"byte_end":325583,"line_start":2051,"line_end":2051,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":325585,"byte_end":325596,"line_start":2052,"line_end":2052,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":325598,"byte_end":325625,"line_start":2053,"line_end":2053,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":325627,"byte_end":325630,"line_start":2054,"line_end":2054,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0x07u8;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":325632,"byte_end":325658,"line_start":2055,"line_end":2055,"column_start":2,"column_end":28}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":325660,"byte_end":325704,"line_start":2056,"line_end":2056,"column_start":2,"column_end":46}},{"value":"/ bits.copy_within(5 .., 0);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":325706,"byte_end":325736,"line_start":2057,"line_end":2057,"column_start":2,"column_end":32}},{"value":"/ assert_eq!(data, 0xE7);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":325738,"byte_end":325765,"line_start":2058,"line_end":2058,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":325767,"byte_end":325774,"line_start":2059,"line_end":2059,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":325776,"byte_end":325785,"line_start":2060,"line_end":2060,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1563},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":327109,"byte_end":327127,"line_start":2109,"line_end":2109,"column_start":9,"column_end":27},"name":"swap_with_bitslice","qualname":"<BitSlice<O, T>>::swap_with_bitslice","value":"pub fn swap_with_bitslice<O2, T2>(&mut Self, &mut BitSlice<O2, T2>) where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Swaps all bits in `self` with those in `other`.","sig":null,"attributes":[{"value":"/ Swaps all bits in `self` with those in `other`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":326212,"byte_end":326263,"line_start":2074,"line_end":2074,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":326265,"byte_end":326268,"line_start":2075,"line_end":2075,"column_start":2,"column_end":5}},{"value":"/ The length of `other` must be the same as `self`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":326270,"byte_end":326323,"line_start":2076,"line_end":2076,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":326325,"byte_end":326328,"line_start":2077,"line_end":2077,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":326330,"byte_end":326344,"line_start":2078,"line_end":2078,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":326346,"byte_end":326349,"line_start":2079,"line_end":2079,"column_start":2,"column_end":5}},{"value":"/ [`slice::swap_with_slice`](https://doc.rust-lang.org/std/primitive.slice.html#method.swap_with_slice)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":326351,"byte_end":326456,"line_start":2080,"line_end":2080,"column_start":2,"column_end":107}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":326458,"byte_end":326461,"line_start":2081,"line_end":2081,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":326463,"byte_end":326484,"line_start":2082,"line_end":2082,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":326486,"byte_end":326489,"line_start":2083,"line_end":2083,"column_start":2,"column_end":5}},{"value":"/ This method is renamed, as it takes a bit slice rather than an element","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":326491,"byte_end":326565,"line_start":2084,"line_end":2084,"column_start":2,"column_end":76}},{"value":"/ slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":326567,"byte_end":326577,"line_start":2085,"line_end":2085,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":326579,"byte_end":326582,"line_start":2086,"line_end":2086,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":326584,"byte_end":326596,"line_start":2087,"line_end":2087,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":326598,"byte_end":326601,"line_start":2088,"line_end":2088,"column_start":2,"column_end":5}},{"value":"/ This function will panic if the two slices have different lengths.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":326603,"byte_end":326673,"line_start":2089,"line_end":2089,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":326675,"byte_end":326678,"line_start":2090,"line_end":2090,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":326680,"byte_end":326694,"line_start":2091,"line_end":2091,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":326696,"byte_end":326699,"line_start":2092,"line_end":2092,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":326701,"byte_end":326712,"line_start":2093,"line_end":2093,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":326714,"byte_end":326741,"line_start":2094,"line_end":2094,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":326743,"byte_end":326746,"line_start":2095,"line_end":2095,"column_start":2,"column_end":5}},{"value":"/ let mut one = [0xA5u8, 0x69];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":326748,"byte_end":326781,"line_start":2096,"line_end":2096,"column_start":2,"column_end":35}},{"value":"/ let mut two = 0x1234u16;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":326783,"byte_end":326811,"line_start":2097,"line_end":2097,"column_start":2,"column_end":30}},{"value":"/ let one_bits = one.view_bits_mut::<Msb0>();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":326813,"byte_end":326860,"line_start":2098,"line_end":2098,"column_start":2,"column_end":49}},{"value":"/ let two_bits = two.view_bits_mut::<Lsb0>();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":326862,"byte_end":326909,"line_start":2099,"line_end":2099,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":326911,"byte_end":326914,"line_start":2100,"line_end":2100,"column_start":2,"column_end":5}},{"value":"/ one_bits.swap_with_bitslice(two_bits);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":326916,"byte_end":326958,"line_start":2101,"line_end":2101,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":326960,"byte_end":326963,"line_start":2102,"line_end":2102,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(one, [0x2C, 0x48]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":326965,"byte_end":326999,"line_start":2103,"line_end":2103,"column_start":2,"column_end":36}},{"value":"/ # #[cfg(target_endian = \"little\")] {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":327001,"byte_end":327041,"line_start":2104,"line_end":2104,"column_start":2,"column_end":42}},{"value":"/ assert_eq!(two, 0x96A5);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":327043,"byte_end":327071,"line_start":2105,"line_end":2105,"column_start":2,"column_end":30}},{"value":"/ # }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":327073,"byte_end":327080,"line_start":2106,"line_end":2106,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":327082,"byte_end":327089,"line_start":2107,"line_end":2107,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":327091,"byte_end":327100,"line_start":2108,"line_end":2108,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1566},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":327620,"byte_end":327635,"line_start":2130,"line_end":2130,"column_start":9,"column_end":24},"name":"swap_with_slice","qualname":"<BitSlice<O, T>>::swap_with_slice","value":"pub fn swap_with_slice<O2, T2>(&mut Self, &mut BitSlice<O2, T2>) where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":327485,"byte_end":327502,"line_start":2127,"line_end":2127,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":327504,"byte_end":327534,"line_start":2128,"line_end":2128,"column_start":2,"column_end":32}},{"value":"deprecated(note = \"Use `.swap_with_bitslice` to swap between bitslices\")","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":327536,"byte_end":327611,"line_start":2129,"line_end":2129,"column_start":2,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1569},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":329757,"byte_end":329765,"line_start":2193,"line_end":2193,"column_start":16,"column_end":24},"name":"align_to","qualname":"<BitSlice<O, T>>::align_to","value":"pub unsafe fn align_to<U>(&Self) -> (&Self, &BitSlice<O, U>, &Self) where\nU: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Transmute the bitslice to a bitslice of another type, ensuring alignment\n of the types is maintained.","sig":null,"attributes":[{"value":"/ Transmute the bitslice to a bitslice of another type, ensuring alignment","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":327766,"byte_end":327842,"line_start":2138,"line_end":2138,"column_start":2,"column_end":78}},{"value":"/ of the types is maintained.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":327844,"byte_end":327875,"line_start":2139,"line_end":2139,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":327877,"byte_end":327880,"line_start":2140,"line_end":2140,"column_start":2,"column_end":5}},{"value":"/ This method splits the bitslice into three distinct bitslices: prefix,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":327882,"byte_end":327956,"line_start":2141,"line_end":2141,"column_start":2,"column_end":76}},{"value":"/ correctly aligned middle bitslice of a new type, and the suffix","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":327958,"byte_end":328025,"line_start":2142,"line_end":2142,"column_start":2,"column_end":69}},{"value":"/ bitslice. The method may make the middle bitslice the greatest","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":328027,"byte_end":328093,"line_start":2143,"line_end":2143,"column_start":2,"column_end":68}},{"value":"/ length possible for a given type and input bitslice, but only your","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":328095,"byte_end":328165,"line_start":2144,"line_end":2144,"column_start":2,"column_end":72}},{"value":"/ algorithm's performance should depend on that, not its correctness. It","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":328167,"byte_end":328241,"line_start":2145,"line_end":2145,"column_start":2,"column_end":76}},{"value":"/ is permissible for all of the input data to be returned as the prefix or","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":328243,"byte_end":328319,"line_start":2146,"line_end":2146,"column_start":2,"column_end":78}},{"value":"/ suffix bitslice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":328321,"byte_end":328341,"line_start":2147,"line_end":2147,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":328343,"byte_end":328346,"line_start":2148,"line_end":2148,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":328348,"byte_end":328362,"line_start":2149,"line_end":2149,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":328364,"byte_end":328367,"line_start":2150,"line_end":2150,"column_start":2,"column_end":5}},{"value":"/ [`slice::align_to`](https://doc.rust-lang.org/std/primitive.slice.html#method.align_to)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":328369,"byte_end":328460,"line_start":2151,"line_end":2151,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":328462,"byte_end":328465,"line_start":2152,"line_end":2152,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":328467,"byte_end":328488,"line_start":2153,"line_end":2153,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":328490,"byte_end":328493,"line_start":2154,"line_end":2154,"column_start":2,"column_end":5}},{"value":"/ Type `U` is **required** to have the same type family as type `T`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":328495,"byte_end":328565,"line_start":2155,"line_end":2155,"column_start":2,"column_end":72}},{"value":"/ Whatever `T` is of the fundamental integers, atomics, or `Cell`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":328567,"byte_end":328634,"line_start":2156,"line_end":2156,"column_start":2,"column_end":69}},{"value":"/ wrappers, `U` must be a different width in the same family. Changing the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":328636,"byte_end":328712,"line_start":2157,"line_end":2157,"column_start":2,"column_end":78}},{"value":"/ type family with this method is **unsound** and strictly forbidden.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":328714,"byte_end":328785,"line_start":2158,"line_end":2158,"column_start":2,"column_end":73}},{"value":"/ Unfortunately, it cannot be guaranteed by this function, so you are","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":328787,"byte_end":328858,"line_start":2159,"line_end":2159,"column_start":2,"column_end":73}},{"value":"/ required to abide by this limitation.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":328860,"byte_end":328901,"line_start":2160,"line_end":2160,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":328903,"byte_end":328906,"line_start":2161,"line_end":2161,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":328908,"byte_end":328920,"line_start":2162,"line_end":2162,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":328922,"byte_end":328925,"line_start":2163,"line_end":2163,"column_start":2,"column_end":5}},{"value":"/ This method is essentially a `transmute` with respect to the elements in","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":328927,"byte_end":329003,"line_start":2164,"line_end":2164,"column_start":2,"column_end":78}},{"value":"/ the returned middle bitslice, so all the usual caveats pertaining to","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":329005,"byte_end":329077,"line_start":2165,"line_end":2165,"column_start":2,"column_end":74}},{"value":"/ `transmute::<T, U>` also apply here.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":329079,"byte_end":329119,"line_start":2166,"line_end":2166,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":329121,"byte_end":329124,"line_start":2167,"line_end":2167,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":329126,"byte_end":329140,"line_start":2168,"line_end":2168,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":329142,"byte_end":329145,"line_start":2169,"line_end":2169,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":329147,"byte_end":329163,"line_start":2170,"line_end":2170,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":329165,"byte_end":329168,"line_start":2171,"line_end":2171,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":329170,"byte_end":329181,"line_start":2172,"line_end":2172,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":329183,"byte_end":329210,"line_start":2173,"line_end":2173,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":329212,"byte_end":329215,"line_start":2174,"line_end":2174,"column_start":2,"column_end":5}},{"value":"/ unsafe {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":329217,"byte_end":329229,"line_start":2175,"line_end":2175,"column_start":2,"column_end":14}},{"value":"/   let bytes: [u8; 7] = [1, 2, 3, 4, 5, 6, 7];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":329231,"byte_end":329280,"line_start":2176,"line_end":2176,"column_start":2,"column_end":51}},{"value":"/   let bits = bytes.view_bits::<LocalBits>();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":329282,"byte_end":329330,"line_start":2177,"line_end":2177,"column_start":2,"column_end":50}},{"value":"/   let (prefix, shorts, suffix) = bits.align_to::<u16>();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":329332,"byte_end":329392,"line_start":2178,"line_end":2178,"column_start":2,"column_end":62}},{"value":"/   match prefix.len() {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":329394,"byte_end":329420,"line_start":2179,"line_end":2179,"column_start":2,"column_end":28}},{"value":"/     0 => {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":329422,"byte_end":329436,"line_start":2180,"line_end":2180,"column_start":2,"column_end":16}},{"value":"/       assert_eq!(shorts, bits[.. 48]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":329438,"byte_end":329480,"line_start":2181,"line_end":2181,"column_start":2,"column_end":44}},{"value":"/       assert_eq!(suffix, bits[48 ..]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":329482,"byte_end":329524,"line_start":2182,"line_end":2182,"column_start":2,"column_end":44}},{"value":"/     },","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":329526,"byte_end":329536,"line_start":2183,"line_end":2183,"column_start":2,"column_end":12}},{"value":"/     8 => {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":329538,"byte_end":329552,"line_start":2184,"line_end":2184,"column_start":2,"column_end":16}},{"value":"/       assert_eq!(prefix, bits[.. 8]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":329554,"byte_end":329595,"line_start":2185,"line_end":2185,"column_start":2,"column_end":43}},{"value":"/       assert_eq!(shorts, bits[8 ..]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":329597,"byte_end":329638,"line_start":2186,"line_end":2186,"column_start":2,"column_end":43}},{"value":"/     },","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":329640,"byte_end":329650,"line_start":2187,"line_end":2187,"column_start":2,"column_end":12}},{"value":"/     _ => unreachable!(\"This case will not occur\")","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":329652,"byte_end":329705,"line_start":2188,"line_end":2188,"column_start":2,"column_end":55}},{"value":"/   }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":329707,"byte_end":329714,"line_start":2189,"line_end":2189,"column_start":2,"column_end":9}},{"value":"/ }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":329716,"byte_end":329721,"line_start":2190,"line_end":2190,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":329723,"byte_end":329730,"line_start":2191,"line_end":2191,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":329732,"byte_end":329741,"line_start":2192,"line_end":2192,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1571},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":332438,"byte_end":332450,"line_start":2269,"line_end":2269,"column_start":16,"column_end":28},"name":"align_to_mut","qualname":"<BitSlice<O, T>>::align_to_mut","value":"pub unsafe fn align_to_mut<U>(&mut Self)\n-> (&mut Self, &mut BitSlice<O, U>, &mut Self) where U: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Transmute the bitslice to a bitslice of another type, ensuring alignment\n of the types is maintained.","sig":null,"attributes":[{"value":"/ Transmute the bitslice to a bitslice of another type, ensuring alignment","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":330704,"byte_end":330780,"line_start":2224,"line_end":2224,"column_start":2,"column_end":78}},{"value":"/ of the types is maintained.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":330782,"byte_end":330813,"line_start":2225,"line_end":2225,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":330815,"byte_end":330818,"line_start":2226,"line_end":2226,"column_start":2,"column_end":5}},{"value":"/ This method splits the bitslice into three distinct bitslices: prefix,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":330820,"byte_end":330894,"line_start":2227,"line_end":2227,"column_start":2,"column_end":76}},{"value":"/ correctly aligned middle bitslice of a new type, and the suffix","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":330896,"byte_end":330963,"line_start":2228,"line_end":2228,"column_start":2,"column_end":69}},{"value":"/ bitslice. The method may make the middle bitslice the greatest","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":330965,"byte_end":331031,"line_start":2229,"line_end":2229,"column_start":2,"column_end":68}},{"value":"/ length possible for a given type and input bitslice, but only your","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":331033,"byte_end":331103,"line_start":2230,"line_end":2230,"column_start":2,"column_end":72}},{"value":"/ algorithm's performance should depend on that, not its correctness. It","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":331105,"byte_end":331179,"line_start":2231,"line_end":2231,"column_start":2,"column_end":76}},{"value":"/ is permissible for all of the input data to be returned as the prefix or","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":331181,"byte_end":331257,"line_start":2232,"line_end":2232,"column_start":2,"column_end":78}},{"value":"/ suffix bitslice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":331259,"byte_end":331279,"line_start":2233,"line_end":2233,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":331281,"byte_end":331284,"line_start":2234,"line_end":2234,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":331286,"byte_end":331300,"line_start":2235,"line_end":2235,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":331302,"byte_end":331305,"line_start":2236,"line_end":2236,"column_start":2,"column_end":5}},{"value":"/ [`slice::align_to`](https://doc.rust-lang.org/std/primitive.slice.html#method.align_to)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":331307,"byte_end":331398,"line_start":2237,"line_end":2237,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":331400,"byte_end":331403,"line_start":2238,"line_end":2238,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":331405,"byte_end":331426,"line_start":2239,"line_end":2239,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":331428,"byte_end":331431,"line_start":2240,"line_end":2240,"column_start":2,"column_end":5}},{"value":"/ Type `U` is **required** to have the same type family as type `T`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":331433,"byte_end":331503,"line_start":2241,"line_end":2241,"column_start":2,"column_end":72}},{"value":"/ Whatever `T` is of the fundamental integers, atomics, or `Cell`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":331505,"byte_end":331572,"line_start":2242,"line_end":2242,"column_start":2,"column_end":69}},{"value":"/ wrappers, `U` must be a different width in the same family. Changing the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":331574,"byte_end":331650,"line_start":2243,"line_end":2243,"column_start":2,"column_end":78}},{"value":"/ type family with this method is **unsound** and strictly forbidden.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":331652,"byte_end":331723,"line_start":2244,"line_end":2244,"column_start":2,"column_end":73}},{"value":"/ Unfortunately, it cannot be guaranteed by this function, so you are","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":331725,"byte_end":331796,"line_start":2245,"line_end":2245,"column_start":2,"column_end":73}},{"value":"/ required to abide by this limitation.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":331798,"byte_end":331839,"line_start":2246,"line_end":2246,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":331841,"byte_end":331844,"line_start":2247,"line_end":2247,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":331846,"byte_end":331858,"line_start":2248,"line_end":2248,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":331860,"byte_end":331863,"line_start":2249,"line_end":2249,"column_start":2,"column_end":5}},{"value":"/ This method is essentially a `transmute` with respect to the elements in","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":331865,"byte_end":331941,"line_start":2250,"line_end":2250,"column_start":2,"column_end":78}},{"value":"/ the returned middle bitslice, so all the usual caveats pertaining to","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":331943,"byte_end":332015,"line_start":2251,"line_end":2251,"column_start":2,"column_end":74}},{"value":"/ `transmute::<T, U>` also apply here.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":332017,"byte_end":332057,"line_start":2252,"line_end":2252,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":332059,"byte_end":332062,"line_start":2253,"line_end":2253,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":332064,"byte_end":332078,"line_start":2254,"line_end":2254,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":332080,"byte_end":332083,"line_start":2255,"line_end":2255,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":332085,"byte_end":332101,"line_start":2256,"line_end":2256,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":332103,"byte_end":332106,"line_start":2257,"line_end":2257,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":332108,"byte_end":332119,"line_start":2258,"line_end":2258,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":332121,"byte_end":332148,"line_start":2259,"line_end":2259,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":332150,"byte_end":332153,"line_start":2260,"line_end":2260,"column_start":2,"column_end":5}},{"value":"/ unsafe {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":332155,"byte_end":332167,"line_start":2261,"line_end":2261,"column_start":2,"column_end":14}},{"value":"/   let mut bytes: [u8; 7] = [1, 2, 3, 4, 5, 6, 7];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":332169,"byte_end":332222,"line_start":2262,"line_end":2262,"column_start":2,"column_end":55}},{"value":"/   let bits = bytes.view_bits_mut::<LocalBits>();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":332224,"byte_end":332276,"line_start":2263,"line_end":2263,"column_start":2,"column_end":54}},{"value":"/   let (prefix, shorts, suffix) = bits.align_to_mut::<u16>();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":332278,"byte_end":332342,"line_start":2264,"line_end":2264,"column_start":2,"column_end":66}},{"value":"/   //  same access and behavior as in `align_to`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":332344,"byte_end":332395,"line_start":2265,"line_end":2265,"column_start":2,"column_end":53}},{"value":"/ }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":332397,"byte_end":332402,"line_start":2266,"line_end":2266,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":332404,"byte_end":332411,"line_start":2267,"line_end":2267,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":332413,"byte_end":332422,"line_start":2268,"line_end":2268,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1576},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":333226,"byte_end":333235,"line_start":2307,"line_end":2307,"column_start":9,"column_end":18},"name":"to_bitvec","qualname":"<BitSlice<O, T>>::to_bitvec","value":"pub fn to_bitvec(&Self) -> BitVec<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Copies `self` into a new `BitVec`.","sig":null,"attributes":[{"value":"/ Copies `self` into a new `BitVec`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":332832,"byte_end":332870,"line_start":2289,"line_end":2289,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":332872,"byte_end":332875,"line_start":2290,"line_end":2290,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":332877,"byte_end":332891,"line_start":2291,"line_end":2291,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":332893,"byte_end":332896,"line_start":2292,"line_end":2292,"column_start":2,"column_end":5}},{"value":"/ [`slice::to_vec`](https://doc.rust-lang.org/std.primitive.html#method.to_vec)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":332898,"byte_end":332979,"line_start":2293,"line_end":2293,"column_start":2,"column_end":83}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":332981,"byte_end":332984,"line_start":2294,"line_end":2294,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":332986,"byte_end":333000,"line_start":2295,"line_end":2295,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":333002,"byte_end":333005,"line_start":2296,"line_end":2296,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":333007,"byte_end":333018,"line_start":2297,"line_end":2297,"column_start":2,"column_end":13}},{"value":"/ # #[cfg(feature = \"stde\")] {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":333020,"byte_end":333052,"line_start":2298,"line_end":2298,"column_start":2,"column_end":34}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":333054,"byte_end":333081,"line_start":2299,"line_end":2299,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":333083,"byte_end":333086,"line_start":2300,"line_end":2300,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 1];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":333088,"byte_end":333121,"line_start":2301,"line_end":2301,"column_start":2,"column_end":35}},{"value":"/ let bv = bits.to_bitvec();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":333123,"byte_end":333153,"line_start":2302,"line_end":2302,"column_start":2,"column_end":32}},{"value":"/ assert_eq!(bits, bv);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":333155,"byte_end":333180,"line_start":2303,"line_end":2303,"column_start":2,"column_end":27}},{"value":"/ # }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":333182,"byte_end":333189,"line_start":2304,"line_end":2304,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":333191,"byte_end":333198,"line_start":2305,"line_end":2305,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":333200,"byte_end":333217,"line_start":2306,"line_end":2306,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":1577},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":333449,"byte_end":333455,"line_start":2315,"line_end":2315,"column_start":9,"column_end":15},"name":"to_vec","qualname":"<BitSlice<O, T>>::to_vec","value":"pub fn to_vec(&Self) -> BitVec<O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":333312,"byte_end":333329,"line_start":2312,"line_end":2312,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":333331,"byte_end":333361,"line_start":2313,"line_end":2313,"column_start":2,"column_end":32}},{"value":"deprecated(note = \"Use `.to_bitvec` to convert a bit slice into a vector\")","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":333363,"byte_end":333440,"line_start":2314,"line_end":2314,"column_start":2,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1578},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":334155,"byte_end":334161,"line_start":2348,"line_end":2348,"column_start":9,"column_end":15},"name":"repeat","qualname":"<BitSlice<O, T>>::repeat","value":"pub fn repeat(&Self, usize) -> BitVec<O, T> where O: BitOrder, T: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Creates a vector by repeating a slice `n` times.","sig":null,"attributes":[{"value":"/ Creates a vector by repeating a slice `n` times.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":333505,"byte_end":333557,"line_start":2319,"line_end":2319,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":333559,"byte_end":333562,"line_start":2320,"line_end":2320,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":333564,"byte_end":333578,"line_start":2321,"line_end":2321,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":333580,"byte_end":333583,"line_start":2322,"line_end":2322,"column_start":2,"column_end":5}},{"value":"/ [`slice::repeat`](https://doc.rust-lang.org/std/primitive.slice.html#method.repeat)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":333585,"byte_end":333672,"line_start":2323,"line_end":2323,"column_start":2,"column_end":89}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":333674,"byte_end":333677,"line_start":2324,"line_end":2324,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":333679,"byte_end":333691,"line_start":2325,"line_end":2325,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":333693,"byte_end":333696,"line_start":2326,"line_end":2326,"column_start":2,"column_end":5}},{"value":"/ This function will panic if the capacity would overflow.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":333698,"byte_end":333758,"line_start":2327,"line_end":2327,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":333760,"byte_end":333763,"line_start":2328,"line_end":2328,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":333765,"byte_end":333779,"line_start":2329,"line_end":2329,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":333781,"byte_end":333784,"line_start":2330,"line_end":2330,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":333786,"byte_end":333802,"line_start":2331,"line_end":2331,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":333804,"byte_end":333807,"line_start":2332,"line_end":2332,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":333809,"byte_end":333820,"line_start":2333,"line_end":2333,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":333822,"byte_end":333849,"line_start":2334,"line_end":2334,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":333851,"byte_end":333854,"line_start":2335,"line_end":2335,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits![0, 1].repeat(3), bits![0, 1, 0, 1, 0, 1]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":333856,"byte_end":333919,"line_start":2336,"line_end":2336,"column_start":2,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":333921,"byte_end":333928,"line_start":2337,"line_end":2337,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":333930,"byte_end":333933,"line_start":2338,"line_end":2338,"column_start":2,"column_end":5}},{"value":"/ A panic upon overflow:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":333935,"byte_end":333961,"line_start":2339,"line_end":2339,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":333963,"byte_end":333966,"line_start":2340,"line_end":2340,"column_start":2,"column_end":5}},{"value":"/ ```rust,should_panic","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":333968,"byte_end":333992,"line_start":2341,"line_end":2341,"column_start":2,"column_end":26}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":333994,"byte_end":334021,"line_start":2342,"line_end":2342,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":334023,"byte_end":334026,"line_start":2343,"line_end":2343,"column_start":2,"column_end":5}},{"value":"/ // this will panic at runtime","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":334028,"byte_end":334061,"line_start":2344,"line_end":2344,"column_start":2,"column_end":35}},{"value":"/ bits![0, 1].repeat(BitSlice::<LocalBits, usize>::MAX_BITS);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":334063,"byte_end":334126,"line_start":2345,"line_end":2345,"column_start":2,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":334128,"byte_end":334135,"line_start":2346,"line_end":2346,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":334137,"byte_end":334146,"line_start":2347,"line_end":2347,"column_start":2,"column_end":11}}]},{"kind":"Function","id":{"krate":0,"index":1580},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":335131,"byte_end":335139,"line_start":2382,"line_end":2382,"column_start":8,"column_end":16},"name":"from_ref","qualname":"::slice::api::from_ref","value":"pub fn from_ref<O, T>(&T) -> &BitSlice<O, T> where O: BitOrder, T: BitStore +\nBitRegister","parent":null,"children":[],"decl_id":null,"docs":" Converts a reference to `T` into a bitslice over one element.","sig":null,"attributes":[{"value":"* Converts a reference to `T` into a bitslice over one element.\n\n# Original\n\n[`slice::from_ref`](https://doc.rust-lang.org/core/slice/fn.from_ref.html)\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":334917,"byte_end":335074,"line_start":2374,"line_end":2379,"column_start":1,"column_end":4}},{"value":"inline(always)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":335075,"byte_end":335092,"line_start":2380,"line_end":2380,"column_start":1,"column_end":18}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":335093,"byte_end":335123,"line_start":2381,"line_end":2381,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":1583},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":335472,"byte_end":335480,"line_start":2398,"line_end":2398,"column_start":8,"column_end":16},"name":"from_mut","qualname":"::slice::api::from_mut","value":"pub fn from_mut<O, T>(&mut T) -> &mut BitSlice<O, T> where O: BitOrder,\nT: BitStore + BitRegister","parent":null,"children":[],"decl_id":null,"docs":" Converts a reference to `T` into a bitslice over one element.","sig":null,"attributes":[{"value":"* Converts a reference to `T` into a bitslice over one element.\n\n# Original\n\n[`slice::from_mut`](https://doc.rust-lang.org/core/slice/fn.from_mut.html)\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":335258,"byte_end":335415,"line_start":2390,"line_end":2395,"column_start":1,"column_end":4}},{"value":"inline(always)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":335416,"byte_end":335433,"line_start":2396,"line_end":2396,"column_start":1,"column_end":18}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":335434,"byte_end":335464,"line_start":2397,"line_end":2397,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":1586},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":337839,"byte_end":337853,"line_start":2466,"line_end":2466,"column_start":15,"column_end":29},"name":"from_raw_parts","qualname":"::slice::api::from_raw_parts","value":"pub unsafe fn from_raw_parts<'a, O, T>(*const T, usize) -> &'a BitSlice<O, T>\nwhere O: BitOrder, T: 'a + BitStore + BitMemory","parent":null,"children":[],"decl_id":null,"docs":" Forms a bitslice from a pointer and a length.","sig":null,"attributes":[{"value":"* Forms a bitslice from a pointer and a length.\n\nThe `len` argument is the number of **elements**, not the number of bits.\n\n# Original\n\n[`slice::from_raw_parts`](https://doc.rust-lang.org/core/slice/fn.from_raw_parts.html)\n\n# Safety\n\nBehavior is undefined if any of the following conditions are violated:\n\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":335844,"byte_end":336155,"line_start":2411,"line_end":2423,"column_start":1,"column_end":4}},{"value":"/ - `data` must be [valid] for `len * mem::size_of::<T>()` many bytes, and it","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":336156,"byte_end":336235,"line_start":2424,"line_end":2424,"column_start":1,"column_end":80}},{"value":"/   must be properly aligned. This means in particular:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":336236,"byte_end":336293,"line_start":2425,"line_end":2425,"column_start":1,"column_end":58}},{"value":"/   - The entire memory range of this slice must be contained within a single","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":336294,"byte_end":336373,"line_start":2426,"line_end":2426,"column_start":1,"column_end":80}},{"value":"/     allocated object! Slices can never span across multiple allocated","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":336374,"byte_end":336447,"line_start":2427,"line_end":2427,"column_start":1,"column_end":74}},{"value":"/     objects.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":336448,"byte_end":336464,"line_start":2428,"line_end":2428,"column_start":1,"column_end":17}},{"value":"/   - `data` must be non-null and aligned even for zero-length slices. The","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":336465,"byte_end":336541,"line_start":2429,"line_end":2429,"column_start":1,"column_end":77}},{"value":"/     `&BitSlice` pointer encoding requires this porperty to hold. You can","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":336542,"byte_end":336618,"line_start":2430,"line_end":2430,"column_start":1,"column_end":77}},{"value":"/     obtain a pointer that is usable as `data` for zero-length slices using","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":336619,"byte_end":336697,"line_start":2431,"line_end":2431,"column_start":1,"column_end":79}},{"value":"/     [`NonNull::dangling()`].","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":336698,"byte_end":336730,"line_start":2432,"line_end":2432,"column_start":1,"column_end":33}},{"value":"/ - The memory referenced by the returned bitslice must not be mutated for the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":336731,"byte_end":336811,"line_start":2433,"line_end":2433,"column_start":1,"column_end":81}},{"value":"/   duration of the lifetime `'a`, except inside an `UnsafeCell`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":336812,"byte_end":336879,"line_start":2434,"line_end":2434,"column_start":1,"column_end":68}},{"value":"/ - The total size `len * T::Mem::BITS` of the slice must be no larger than","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":336880,"byte_end":336957,"line_start":2435,"line_end":2435,"column_start":1,"column_end":78}},{"value":"/   [`BitSlice::<_, T>::MAX_BITS`].","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":336958,"byte_end":336995,"line_start":2436,"line_end":2436,"column_start":1,"column_end":38}},{"value":"*\n\n# Caveat\n\nThe lifetime for the returned slice is inferred from its usage. To prevent\naccidental misuse, it's suggested to tie the lifetime to whichever source\nlifetime is safe in the context, such as by providing a helper function taking\nthe lifetime of a host value for the slice, or by explicit annotation.\n\n# Examples\n\n```rust\nuse bitvec::prelude::*;\nuse bitvec::slice as bv_slice;\n\nlet x = 42u8;\nlet ptr = &x as *const _;\nlet bits = unsafe {\n  bv_slice::from_raw_parts::<LocalBits, u8>(ptr, 1)\n};\nassert_eq!(bits.count_ones(), 3);\n```\n\n[valid]: https://doc.rust-lang.org/core/ptr/index.html#safety\n[`BitSlice::<_, T>::MAX_BITS`]: struct.BitSlice.html#associatedconstant.MAX_BITS\n[`NonNull::dangling()`]: https://doc.rust-lang.org/core/ptr/struct.NonNull.html#method.dangling\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":336996,"byte_end":337783,"line_start":2437,"line_end":2463,"column_start":1,"column_end":4}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":337784,"byte_end":337793,"line_start":2464,"line_end":2464,"column_start":1,"column_end":10}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":337794,"byte_end":337824,"line_start":2465,"line_end":2465,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":1591},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":339781,"byte_end":339799,"line_start":2520,"line_end":2520,"column_start":15,"column_end":33},"name":"from_raw_parts_mut","qualname":"::slice::api::from_raw_parts_mut","value":"pub unsafe fn from_raw_parts_mut<'a, O, T>(*mut T, usize)\n-> &'a mut BitSlice<O, T> where O: BitOrder, T: 'a + BitStore + BitMemory","parent":null,"children":[],"decl_id":null,"docs":"Performs the same functionality as [`from_raw_parts`], except that a mutable\nbitslice is returned.","sig":null,"attributes":[{"value":"*\nPerforms the same functionality as [`from_raw_parts`], except that a mutable\nbitslice is returned.\n\n# Original\n\n[`slice::from_raw_parts_mut`](https://doc.rust-lang.org/core/slice/fn.from_raw_parts_mut.html)\n\n# Safety\n\nBehavior is undefined if any of the following conditions are violated:\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":338197,"byte_end":338493,"line_start":2484,"line_end":2495,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":338494,"byte_end":338497,"line_start":2496,"line_end":2496,"column_start":1,"column_end":4}},{"value":"/ - `data` must be [valid] for `len * mem::size_of::<T>()` many bytes, and it","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":338498,"byte_end":338577,"line_start":2497,"line_end":2497,"column_start":1,"column_end":80}},{"value":"/   must be properly aligned. This means in particular:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":338578,"byte_end":338635,"line_start":2498,"line_end":2498,"column_start":1,"column_end":58}},{"value":"/   - The entire memory range of this slice must be contained within a single","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":338636,"byte_end":338715,"line_start":2499,"line_end":2499,"column_start":1,"column_end":80}},{"value":"/     allocated object! Slices can never span across multiple allocated","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":338716,"byte_end":338789,"line_start":2500,"line_end":2500,"column_start":1,"column_end":74}},{"value":"/     objects.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":338790,"byte_end":338806,"line_start":2501,"line_end":2501,"column_start":1,"column_end":17}},{"value":"/   - `data` must be non-null and aligned even for zero-length slices. The","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":338807,"byte_end":338883,"line_start":2502,"line_end":2502,"column_start":1,"column_end":77}},{"value":"/     `&BitSlice` pointer encoding requires this porperty to hold. You can","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":338884,"byte_end":338960,"line_start":2503,"line_end":2503,"column_start":1,"column_end":77}},{"value":"/     obtain a pointer that is usable as `data` for zero-length slices using","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":338961,"byte_end":339039,"line_start":2504,"line_end":2504,"column_start":1,"column_end":79}},{"value":"/     [`NonNull::dangling()`].","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":339040,"byte_end":339072,"line_start":2505,"line_end":2505,"column_start":1,"column_end":33}},{"value":"/ - The memory referenced by the returned bitslice must not be accessed","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":339073,"byte_end":339146,"line_start":2506,"line_end":2506,"column_start":1,"column_end":74}},{"value":"/   through other pointer (not derived from the return value) for the duration","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":339147,"byte_end":339227,"line_start":2507,"line_end":2507,"column_start":1,"column_end":81}},{"value":"/   of the lifetime `'a`. Both read and write accesses are forbidden.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":339228,"byte_end":339299,"line_start":2508,"line_end":2508,"column_start":1,"column_end":72}},{"value":"/ - The total size `len * T::Mem::BITS` of the slice must be no larger than","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":339300,"byte_end":339377,"line_start":2509,"line_end":2509,"column_start":1,"column_end":78}},{"value":"/   [`BitSlice::<_, T>::MAX_BITS`].","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":339378,"byte_end":339415,"line_start":2510,"line_end":2510,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":339416,"byte_end":339419,"line_start":2511,"line_end":2511,"column_start":1,"column_end":4}},{"value":"/ [valid]: https://doc.rust-lang.org/core/ptr/index.html#safety","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":339420,"byte_end":339485,"line_start":2512,"line_end":2512,"column_start":1,"column_end":66}},{"value":"/ [`from_raw_parts`]: fn.from_raw_parts.html","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":339486,"byte_end":339532,"line_start":2513,"line_end":2513,"column_start":1,"column_end":47}},{"value":"/ [`NonNull::dangling()`]: https://doc.rust-lang.org/core/ptr/struct.NonNull.html#method.dangling","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":339533,"byte_end":339632,"line_start":2514,"line_end":2514,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":339633,"byte_end":339636,"line_start":2515,"line_end":2515,"column_start":1,"column_end":4}},{"value":"/ [`BitSlice::<_, T>::MAX_BITS`]:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":339637,"byte_end":339672,"line_start":2516,"line_end":2516,"column_start":1,"column_end":36}},{"value":"/ struct.BitSlice.html#associatedconstant.MAX_BITS","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":339673,"byte_end":339725,"line_start":2517,"line_end":2517,"column_start":1,"column_end":53}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":339726,"byte_end":339735,"line_start":2518,"line_end":2518,"column_start":1,"column_end":10}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":339736,"byte_end":339766,"line_start":2519,"line_end":2519,"column_start":1,"column_end":31}}]},{"kind":"Trait","id":{"krate":0,"index":1596},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":341007,"byte_end":341020,"line_start":2559,"line_end":2559,"column_start":11,"column_end":24},"name":"BitSliceIndex","qualname":"::slice::api::BitSliceIndex","value":"BitSliceIndex<'a, O, T>","parent":null,"children":[{"krate":0,"index":1600},{"krate":0,"index":1601},{"krate":0,"index":1602},{"krate":0,"index":1603},{"krate":0,"index":1604},{"krate":0,"index":1605},{"krate":0,"index":1606},{"krate":0,"index":1607}],"decl_id":null,"docs":" A helper trait used for indexing operations.","sig":null,"attributes":[{"value":"* A helper trait used for indexing operations.\n\nThis trait has its definition stabilized, but has not stabilized its associated\nfunctions. This means it cannot be implemented outside of the distribution\nlibraries. *Furthermore*, since `bitvec` cannot create `&mut bool` references,\nit is insufficient for `bitvec`’s uses.\n\nThere is no tracking issue for `feature(slice_index_methods)`.\n\n# Original\n\n[`slice::SliceIndex`](https://doc.rust-lang.org/stable/core/slice/trait.SliceIndex.html)\n\n# API Differences\n\n`SliceIndex::Output` is not usable here, because the `usize` implementation\ncannot produce `&mut bool`. Instead, two output types `Immut` and `Mut` are\ndefined. The range implementations define these to be the appropriately mutable\n`BitSlice` reference; the `usize` implementation defines them to be `&bool` and\nthe proxy type.\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":340153,"byte_end":340996,"line_start":2538,"line_end":2558,"column_start":1,"column_end":4}}]},{"kind":"Type","id":{"krate":0,"index":1600},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":341129,"byte_end":341134,"line_start":2565,"line_end":2565,"column_start":7,"column_end":12},"name":"Immut","qualname":"::slice::api::BitSliceIndex::Immut","value":"type Immut;","parent":{"krate":0,"index":1596},"children":[],"decl_id":null,"docs":" The output type for immutable functions.\n","sig":null,"attributes":[{"value":"/ The output type for immutable functions.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":341078,"byte_end":341122,"line_start":2564,"line_end":2564,"column_start":2,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":1601},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":341187,"byte_end":341190,"line_start":2568,"line_end":2568,"column_start":7,"column_end":10},"name":"Mut","qualname":"::slice::api::BitSliceIndex::Mut","value":"type Mut;","parent":{"krate":0,"index":1596},"children":[],"decl_id":null,"docs":" The output type for mutable functions.\n","sig":null,"attributes":[{"value":"/ The output type for mutable functions.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":341138,"byte_end":341180,"line_start":2567,"line_end":2567,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1602},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":341397,"byte_end":341400,"line_start":2575,"line_end":2575,"column_start":5,"column_end":8},"name":"get","qualname":"::slice::api::BitSliceIndex::get","value":"pub fn get(Self, &'a BitSlice<O, T>) -> Option<Self::Immut>","parent":{"krate":0,"index":1596},"children":[],"decl_id":null,"docs":" Returns a shared reference to the output at this location, if in bounds.","sig":null,"attributes":[{"value":"/ Returns a shared reference to the output at this location, if in bounds.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":341194,"byte_end":341270,"line_start":2570,"line_end":2570,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":341272,"byte_end":341275,"line_start":2571,"line_end":2571,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":341277,"byte_end":341291,"line_start":2572,"line_end":2572,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":341293,"byte_end":341296,"line_start":2573,"line_end":2573,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::get`](https://doc.rust-lang.org/core/slice/trait.SliceIndex.html#method.get)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":341298,"byte_end":341392,"line_start":2574,"line_end":2574,"column_start":2,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":1603},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":341677,"byte_end":341684,"line_start":2583,"line_end":2583,"column_start":5,"column_end":12},"name":"get_mut","qualname":"::slice::api::BitSliceIndex::get_mut","value":"pub fn get_mut(Self, &'a mut BitSlice<O, T>) -> Option<Self::Mut>","parent":{"krate":0,"index":1596},"children":[],"decl_id":null,"docs":" Returns a mutable reference to the output at this location, if in\n bounds.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the output at this location, if in","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":341460,"byte_end":341529,"line_start":2577,"line_end":2577,"column_start":2,"column_end":71}},{"value":"/ bounds.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":341531,"byte_end":341542,"line_start":2578,"line_end":2578,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":341544,"byte_end":341547,"line_start":2579,"line_end":2579,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":341549,"byte_end":341563,"line_start":2580,"line_end":2580,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":341565,"byte_end":341568,"line_start":2581,"line_end":2581,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::get_mut`](https://doc.rust-lang.org/core/slice/trait.SliceIndex.html#method.get_mut)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":341570,"byte_end":341672,"line_start":2582,"line_end":2582,"column_start":2,"column_end":104}}]},{"kind":"Method","id":{"krate":0,"index":1604},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":342501,"byte_end":342514,"line_start":2602,"line_end":2602,"column_start":12,"column_end":25},"name":"get_unchecked","qualname":"::slice::api::BitSliceIndex::get_unchecked","value":"pub unsafe fn get_unchecked(Self, &'a BitSlice<O, T>) -> Self::Immut","parent":{"krate":0,"index":1596},"children":[],"decl_id":null,"docs":" Returns a shared reference to the output at this location, without\n performing any bounds checking. Calling this method with an\n out-of-bounds index is [undefined behavior] even if the resulting\n reference is not used.","sig":null,"attributes":[{"value":"/ Returns a shared reference to the output at this location, without","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":341746,"byte_end":341816,"line_start":2585,"line_end":2585,"column_start":2,"column_end":72}},{"value":"/ performing any bounds checking. Calling this method with an","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":341818,"byte_end":341881,"line_start":2586,"line_end":2586,"column_start":2,"column_end":65}},{"value":"/ out-of-bounds index is [undefined behavior] even if the resulting","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":341883,"byte_end":341952,"line_start":2587,"line_end":2587,"column_start":2,"column_end":71}},{"value":"/ reference is not used.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":341954,"byte_end":341980,"line_start":2588,"line_end":2588,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":341982,"byte_end":341985,"line_start":2589,"line_end":2589,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":341987,"byte_end":342001,"line_start":2590,"line_end":2590,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":342003,"byte_end":342006,"line_start":2591,"line_end":2591,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::get_unchecked`](https://doc.rust-lang.org/core/slice/trait.SliceIndex.html#method.get_unchecked)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":342008,"byte_end":342122,"line_start":2592,"line_end":2592,"column_start":2,"column_end":116}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":342124,"byte_end":342127,"line_start":2593,"line_end":2593,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":342129,"byte_end":342141,"line_start":2594,"line_end":2594,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":342143,"byte_end":342146,"line_start":2595,"line_end":2595,"column_start":2,"column_end":5}},{"value":"/ As this function does not perform boundary checking, the caller must","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":342148,"byte_end":342220,"line_start":2596,"line_end":2596,"column_start":2,"column_end":74}},{"value":"/ ensure that `self` is an index within the boundaries of `slice` before","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":342222,"byte_end":342296,"line_start":2597,"line_end":2597,"column_start":2,"column_end":76}},{"value":"/ calling in order to prevent boundary escapes and the ensuing safety","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":342298,"byte_end":342369,"line_start":2598,"line_end":2598,"column_start":2,"column_end":73}},{"value":"/ violations.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":342371,"byte_end":342386,"line_start":2599,"line_end":2599,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":342388,"byte_end":342391,"line_start":2600,"line_end":2600,"column_start":2,"column_end":5}},{"value":"/ [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":342393,"byte_end":342489,"line_start":2601,"line_end":2601,"column_start":2,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":1605},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":343330,"byte_end":343347,"line_start":2621,"line_end":2621,"column_start":12,"column_end":29},"name":"get_unchecked_mut","qualname":"::slice::api::BitSliceIndex::get_unchecked_mut","value":"pub unsafe fn get_unchecked_mut(Self, &'a mut BitSlice<O, T>) -> Self::Mut","parent":{"krate":0,"index":1596},"children":[],"decl_id":null,"docs":" Returns a mutable reference to the output at this location, without\n performing any bounds checking. Calling this method with an\n out-of-bounds index is [undefined behavior] even if the resulting\n reference is not used.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the output at this location, without","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":342566,"byte_end":342637,"line_start":2604,"line_end":2604,"column_start":2,"column_end":73}},{"value":"/ performing any bounds checking. Calling this method with an","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":342639,"byte_end":342702,"line_start":2605,"line_end":2605,"column_start":2,"column_end":65}},{"value":"/ out-of-bounds index is [undefined behavior] even if the resulting","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":342704,"byte_end":342773,"line_start":2606,"line_end":2606,"column_start":2,"column_end":71}},{"value":"/ reference is not used.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":342775,"byte_end":342801,"line_start":2607,"line_end":2607,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":342803,"byte_end":342806,"line_start":2608,"line_end":2608,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":342808,"byte_end":342822,"line_start":2609,"line_end":2609,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":342824,"byte_end":342827,"line_start":2610,"line_end":2610,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::get_unchecked_mut`](https://doc.rust-lang.org/core/slice/trait.SliceIndex.html#method.get_unchecked_mut)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":342829,"byte_end":342951,"line_start":2611,"line_end":2611,"column_start":2,"column_end":124}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":342953,"byte_end":342956,"line_start":2612,"line_end":2612,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":342958,"byte_end":342970,"line_start":2613,"line_end":2613,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":342972,"byte_end":342975,"line_start":2614,"line_end":2614,"column_start":2,"column_end":5}},{"value":"/ As this function does not perform boundary checking, the caller must","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":342977,"byte_end":343049,"line_start":2615,"line_end":2615,"column_start":2,"column_end":74}},{"value":"/ ensure that `self` is an index within the boundaries of `slice` before","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":343051,"byte_end":343125,"line_start":2616,"line_end":2616,"column_start":2,"column_end":76}},{"value":"/ calling in order to prevent boundary escapes and the ensuing safety","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":343127,"byte_end":343198,"line_start":2617,"line_end":2617,"column_start":2,"column_end":73}},{"value":"/ violations.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":343200,"byte_end":343215,"line_start":2618,"line_end":2618,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":343217,"byte_end":343220,"line_start":2619,"line_end":2619,"column_start":2,"column_end":5}},{"value":"/ [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":343222,"byte_end":343318,"line_start":2620,"line_end":2620,"column_start":2,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":1606},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":343635,"byte_end":343640,"line_start":2632,"line_end":2632,"column_start":5,"column_end":10},"name":"index","qualname":"::slice::api::BitSliceIndex::index","value":"pub fn index(Self, &'a BitSlice<O, T>) -> Self::Immut","parent":{"krate":0,"index":1596},"children":[],"decl_id":null,"docs":" Returns a shared reference to the output at this location, panicking if\n out of bounds.","sig":null,"attributes":[{"value":"/ Returns a shared reference to the output at this location, panicking if","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":343409,"byte_end":343484,"line_start":2626,"line_end":2626,"column_start":2,"column_end":77}},{"value":"/ out of bounds.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":343486,"byte_end":343504,"line_start":2627,"line_end":2627,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":343506,"byte_end":343509,"line_start":2628,"line_end":2628,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":343511,"byte_end":343525,"line_start":2629,"line_end":2629,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":343527,"byte_end":343530,"line_start":2630,"line_end":2630,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::index`](https://doc.rust-lang.org/core/slice/trait.SliceIndex.html#method.index)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":343532,"byte_end":343630,"line_start":2631,"line_end":2631,"column_start":2,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":1607},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":343927,"byte_end":343936,"line_start":2640,"line_end":2640,"column_start":5,"column_end":14},"name":"index_mut","qualname":"::slice::api::BitSliceIndex::index_mut","value":"pub fn index_mut(Self, &'a mut BitSlice<O, T>) -> Self::Mut","parent":{"krate":0,"index":1596},"children":[],"decl_id":null,"docs":" Returns a mutable reference to the output at this location, panicking if\n out of bounds.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the output at this location, panicking if","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":343692,"byte_end":343768,"line_start":2634,"line_end":2634,"column_start":2,"column_end":78}},{"value":"/ out of bounds.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":343770,"byte_end":343788,"line_start":2635,"line_end":2635,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":343790,"byte_end":343793,"line_start":2636,"line_end":2636,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":343795,"byte_end":343809,"line_start":2637,"line_end":2637,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":343811,"byte_end":343814,"line_start":2638,"line_end":2638,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::index_mut`](https://doc.rust-lang.org/core/slice/trait.SliceIndex.html#method.index_mut)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":343816,"byte_end":343922,"line_start":2639,"line_end":2639,"column_start":2,"column_end":108}}]},{"kind":"Struct","id":{"krate":0,"index":4147},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":350740,"byte_end":350744,"line_start":60,"line_end":60,"column_start":12,"column_end":16},"name":"Iter","qualname":"::slice::iter::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":4151},{"krate":0,"index":4152},{"krate":0,"index":4153},{"krate":0,"index":4154},{"krate":0,"index":4155}],"decl_id":null,"docs":" Immutable slice iterator","sig":null,"attributes":[{"value":"* Immutable slice iterator\n\nThis struct is created by the [`iter`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::Iter`](https://doc.rust-lang.org/core/slice/struct.Iter.html)\n\n# Examples\n\nBasic usage:\n\n```rust\n# #[cfg(feature = \"std\")] {\nuse bitvec::prelude::*;\n\n// First, we declare a type which has `iter` method to get the `Iter` struct (&BitSlice here):\nlet data = 129u8;\nlet bits = BitSlice::<LocalBits, _>::from_element(&data);\n\n// Then, we iterato over it:\nfor bit in bits.iter() {\n  println!(\"{}\", bit);\n}\n# }\n```\n\n[`BitSlice`]: struct.BitSlice.html\n[`iter`]: struct.BitSlice.html#method.iter\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":350104,"byte_end":350711,"line_start":29,"line_end":58,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":1692},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":353228,"byte_end":353239,"line_start":134,"line_end":134,"column_start":9,"column_end":20},"name":"as_bitslice","qualname":"<Iter>::as_bitslice","value":"pub fn as_bitslice(&Self) -> &'a BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Views the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ Views the underlying data as a subslice of the original data.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":352019,"byte_end":352084,"line_start":95,"line_end":95,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":352086,"byte_end":352089,"line_start":96,"line_end":96,"column_start":2,"column_end":5}},{"value":"/ This has the same lifetime as the original bit slice, and so the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":352091,"byte_end":352159,"line_start":97,"line_end":97,"column_start":2,"column_end":70}},{"value":"/ iterator can continue to be used while this exists.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":352161,"byte_end":352216,"line_start":98,"line_end":98,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":352218,"byte_end":352221,"line_start":99,"line_end":99,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":352223,"byte_end":352237,"line_start":100,"line_end":100,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":352239,"byte_end":352242,"line_start":101,"line_end":101,"column_start":2,"column_end":5}},{"value":"/ [`Iter::as_slice`](https://doc.rust-lang.org/core/slice/struct.Iter.html#method.as_slice)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":352244,"byte_end":352337,"line_start":102,"line_end":102,"column_start":2,"column_end":95}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":352339,"byte_end":352342,"line_start":103,"line_end":103,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":352344,"byte_end":352365,"line_start":104,"line_end":104,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":352367,"byte_end":352370,"line_start":105,"line_end":105,"column_start":2,"column_end":5}},{"value":"/ This is renamed, as its return type is not an element slice `&[T]` or","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":352372,"byte_end":352445,"line_start":106,"line_end":106,"column_start":2,"column_end":75}},{"value":"/ `&[bool]` but a bit slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":352447,"byte_end":352477,"line_start":107,"line_end":107,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":352479,"byte_end":352482,"line_start":108,"line_end":108,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":352484,"byte_end":352498,"line_start":109,"line_end":109,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":352500,"byte_end":352503,"line_start":110,"line_end":110,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":352505,"byte_end":352521,"line_start":111,"line_end":111,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":352523,"byte_end":352526,"line_start":112,"line_end":112,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":352528,"byte_end":352539,"line_start":113,"line_end":113,"column_start":2,"column_end":13}},{"value":"/ # #[cfg(feature = \"std\")] {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":352541,"byte_end":352572,"line_start":114,"line_end":114,"column_start":2,"column_end":33}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":352574,"byte_end":352601,"line_start":115,"line_end":115,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":352603,"byte_end":352606,"line_start":116,"line_end":116,"column_start":2,"column_end":5}},{"value":"/ // First, we declare a type which has the `iter` method to get the `Iter`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":352608,"byte_end":352685,"line_start":117,"line_end":117,"column_start":2,"column_end":79}},{"value":"/ // struct (&BitSlice here):","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":352687,"byte_end":352718,"line_start":118,"line_end":118,"column_start":2,"column_end":33}},{"value":"/ let data = 129u8;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":352720,"byte_end":352741,"line_start":119,"line_end":119,"column_start":2,"column_end":23}},{"value":"/ let bits = BitSlice::<Msb0, _>::from_element(&data);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":352743,"byte_end":352799,"line_start":120,"line_end":120,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":352801,"byte_end":352804,"line_start":121,"line_end":121,"column_start":2,"column_end":5}},{"value":"/ // Then, we get the iterator:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":352806,"byte_end":352839,"line_start":122,"line_end":122,"column_start":2,"column_end":35}},{"value":"/ let mut iter = bits.iter();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":352841,"byte_end":352872,"line_start":123,"line_end":123,"column_start":2,"column_end":33}},{"value":"/ // So if we print what `as_bitslice` returns here, we have \"[1, 0, 0, 0, 0, 0, 0, 1]\":","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":352874,"byte_end":352964,"line_start":124,"line_end":124,"column_start":2,"column_end":92}},{"value":"/ println!(\"{:?}\", iter.as_bitslice());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":352966,"byte_end":353007,"line_start":125,"line_end":125,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":353009,"byte_end":353012,"line_start":126,"line_end":126,"column_start":2,"column_end":5}},{"value":"/ // Next, we move to the second element of the slice:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":353014,"byte_end":353070,"line_start":127,"line_end":127,"column_start":2,"column_end":58}},{"value":"/ iter.next();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":353072,"byte_end":353088,"line_start":128,"line_end":128,"column_start":2,"column_end":18}},{"value":"/ // Now `as_bitslice` returns \"[0, 0, 0, 0, 0, 0, 1]\":","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":353090,"byte_end":353147,"line_start":129,"line_end":129,"column_start":2,"column_end":59}},{"value":"/ println!(\"{:?}\", iter.as_bitslice());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":353149,"byte_end":353190,"line_start":130,"line_end":130,"column_start":2,"column_end":43}},{"value":"/ # }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":353192,"byte_end":353199,"line_start":131,"line_end":131,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":353201,"byte_end":353208,"line_start":132,"line_end":132,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":353210,"byte_end":353219,"line_start":133,"line_end":133,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1693},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":353793,"byte_end":353801,"line_start":152,"line_end":152,"column_start":9,"column_end":17},"name":"as_slice","qualname":"<Iter>::as_slice","value":"pub fn as_slice(&Self) -> &'a BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":353638,"byte_end":353647,"line_start":146,"line_end":146,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":353665,"byte_end":353695,"line_start":148,"line_end":148,"column_start":2,"column_end":32}},{"value":"deprecated(note =\n             \"Use `.as_bitslice` on iterators to view the remaining data\")","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":353697,"byte_end":353784,"line_start":149,"line_end":151,"column_start":2,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":4161},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":356423,"byte_end":356430,"line_start":273,"line_end":273,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::slice::iter::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":4165},{"krate":0,"index":4166},{"krate":0,"index":4167},{"krate":0,"index":4168},{"krate":0,"index":4169}],"decl_id":null,"docs":" Mutable bit slice iterator.","sig":null,"attributes":[{"value":"* Mutable bit slice iterator.\n\nThis struct is created by the [`iter_mut`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::IterMut`](https://doc.rust-lang.org/core/slice/struct.IterMut.html)\n\n# API Differences\n\nIn addition to returning `BitMut` instead of `&mut bool`, all references\nproduced from this iterator are marked as aliasing. This is necessary because\nthe references receive the lifetime of the original slice, not of the iterator\nobject, and the iterator is able to produce multiple live references in the same\nscope.\n\n# Examples\n\nBasic usage:\n\n```rust\nuse bitvec::prelude::*;\n// First, we declare a type which has `iter_mut` method to get the `IterMut`\n// struct (&BitSlice here):\nlet mut data = 0u8;\nlet bits = data.view_bits_mut::<Msb0>();\n\n// Then, we iterate over it and modify bits:\nfor (idx, mut bit) in bits.iter_mut().enumerate() {\n  *bit = idx % 3 == 0;\n}\nassert_eq!(data, 0b100_100_10);\n```\n\n[`BitSlice`]: struct.BitSlice.html\n[`iter_mut`]: struct.BitSlice.html#method.iter_mut\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":355391,"byte_end":356394,"line_start":235,"line_end":271,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":1718},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":358534,"byte_end":358547,"line_start":342,"line_end":342,"column_start":9,"column_end":22},"name":"into_bitslice","qualname":"<IterMut>::into_bitslice","value":"pub fn into_bitslice(Self) -> &'a mut BitSlice<O, T::Alias>","parent":null,"children":[],"decl_id":null,"docs":" Views the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ Views the underlying data as a subslice of the original data.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":357095,"byte_end":357160,"line_start":295,"line_end":295,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":357162,"byte_end":357165,"line_start":296,"line_end":296,"column_start":2,"column_end":5}},{"value":"/ To avoid creating `&mut` references that alias the same *bits*, this is","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":357167,"byte_end":357242,"line_start":297,"line_end":297,"column_start":2,"column_end":77}},{"value":"/ forced to consume the iterator.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":357244,"byte_end":357279,"line_start":298,"line_end":298,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":357281,"byte_end":357284,"line_start":299,"line_end":299,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":357286,"byte_end":357300,"line_start":300,"line_end":300,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":357302,"byte_end":357305,"line_start":301,"line_end":301,"column_start":2,"column_end":5}},{"value":"/ [`IterMut::into_bitslice`](https://doc.rust-lang.org/core/slice/struct.IterMut.html#method.into_bitslice)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":357307,"byte_end":357416,"line_start":302,"line_end":302,"column_start":2,"column_end":111}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":357418,"byte_end":357421,"line_start":303,"line_end":303,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":357423,"byte_end":357444,"line_start":304,"line_end":304,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":357446,"byte_end":357449,"line_start":305,"line_end":305,"column_start":2,"column_end":5}},{"value":"/ This is renamed, as its return type is not an element slice `&mut [T]`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":357451,"byte_end":357525,"line_start":306,"line_end":306,"column_start":2,"column_end":76}},{"value":"/ or `&mut [bool]` but a bit slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":357527,"byte_end":357564,"line_start":307,"line_end":307,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":357566,"byte_end":357569,"line_start":308,"line_end":308,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":357571,"byte_end":357585,"line_start":309,"line_end":309,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":357587,"byte_end":357590,"line_start":310,"line_end":310,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":357592,"byte_end":357608,"line_start":311,"line_end":311,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":357610,"byte_end":357613,"line_start":312,"line_end":312,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":357615,"byte_end":357626,"line_start":313,"line_end":313,"column_start":2,"column_end":13}},{"value":"/ # #[cfg(feature = \"std\")] {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":357628,"byte_end":357659,"line_start":314,"line_end":314,"column_start":2,"column_end":33}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":357661,"byte_end":357688,"line_start":315,"line_end":315,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":357690,"byte_end":357693,"line_start":316,"line_end":316,"column_start":2,"column_end":5}},{"value":"/ // First, we declare a type which has `iter_mut` method to get the `IterMut`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":357695,"byte_end":357775,"line_start":317,"line_end":317,"column_start":2,"column_end":82}},{"value":"/ // struct (&BitSlice here):","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":357777,"byte_end":357808,"line_start":318,"line_end":318,"column_start":2,"column_end":33}},{"value":"/ let mut data = 0u8;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":357810,"byte_end":357833,"line_start":319,"line_end":319,"column_start":2,"column_end":25}},{"value":"/ let bits = data.view_bits_mut::<Lsb0>();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":357835,"byte_end":357879,"line_start":320,"line_end":320,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":357881,"byte_end":357884,"line_start":321,"line_end":321,"column_start":2,"column_end":5}},{"value":"/ {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":357886,"byte_end":357891,"line_start":322,"line_end":322,"column_start":2,"column_end":7}},{"value":"/   // Then, we get the iterator:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":357893,"byte_end":357928,"line_start":323,"line_end":323,"column_start":2,"column_end":37}},{"value":"/   let mut iter = bits.iter_mut();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":357930,"byte_end":357967,"line_start":324,"line_end":324,"column_start":2,"column_end":39}},{"value":"/   // We move to the next element:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":357969,"byte_end":358006,"line_start":325,"line_end":325,"column_start":2,"column_end":39}},{"value":"/   iter.next();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":358008,"byte_end":358026,"line_start":326,"line_end":326,"column_start":2,"column_end":20}},{"value":"/   // So if we print what `into_bitslice` method returns here, we have","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":358028,"byte_end":358101,"line_start":327,"line_end":327,"column_start":2,"column_end":75}},{"value":"/   // \"[0, 0, 0, 0, 0, 0, 0]\":","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":358103,"byte_end":358136,"line_start":328,"line_end":328,"column_start":2,"column_end":35}},{"value":"/   println!(\"{:?}\", iter.into_bitslice());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":358138,"byte_end":358183,"line_start":329,"line_end":329,"column_start":2,"column_end":47}},{"value":"/ }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":358185,"byte_end":358190,"line_start":330,"line_end":330,"column_start":2,"column_end":7}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":358192,"byte_end":358195,"line_start":331,"line_end":331,"column_start":2,"column_end":5}},{"value":"/ // Now let's modify a value of the slice:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":358197,"byte_end":358242,"line_start":332,"line_end":332,"column_start":2,"column_end":47}},{"value":"/ {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":358244,"byte_end":358249,"line_start":333,"line_end":333,"column_start":2,"column_end":7}},{"value":"/   // First we get back the iterator:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":358251,"byte_end":358291,"line_start":334,"line_end":334,"column_start":2,"column_end":42}},{"value":"/   let mut iter = bits.iter_mut();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":358293,"byte_end":358330,"line_start":335,"line_end":335,"column_start":2,"column_end":39}},{"value":"/   // We change the value of the first bit of the slice returned by the `next` method:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":358332,"byte_end":358421,"line_start":336,"line_end":336,"column_start":2,"column_end":91}},{"value":"/   *iter.next().unwrap() = true;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":358423,"byte_end":358458,"line_start":337,"line_end":337,"column_start":2,"column_end":37}},{"value":"/ }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":358460,"byte_end":358465,"line_start":338,"line_end":338,"column_start":2,"column_end":7}},{"value":"/ // Now data is \"1\":","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":358467,"byte_end":358490,"line_start":339,"line_end":339,"column_start":2,"column_end":25}},{"value":"/ assert_eq!(data, 1);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":358492,"byte_end":358516,"line_start":340,"line_end":340,"column_start":2,"column_end":26}},{"value":"/ # }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":358518,"byte_end":358525,"line_start":341,"line_end":341,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":1719},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":359269,"byte_end":359279,"line_start":367,"line_end":367,"column_start":9,"column_end":19},"name":"into_slice","qualname":"<IterMut>::into_slice","value":"pub fn into_slice(Self) -> &'a mut BitSlice<O, T::Alias>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":359085,"byte_end":359094,"line_start":362,"line_end":362,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":359112,"byte_end":359142,"line_start":364,"line_end":364,"column_start":2,"column_end":32}},{"value":"deprecated(note =\n             \"Use `.into_bitslice` on mutable iterators to view \\\n\t                     the remaining data\")","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":359144,"byte_end":359260,"line_start":365,"line_end":366,"column_start":2,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":4243},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":366949,"byte_end":366956,"line_start":723,"line_end":723,"column_start":12,"column_end":19},"name":"Windows","qualname":"::slice::iter::Windows","value":"Windows {  }","parent":null,"children":[{"krate":0,"index":4247},{"krate":0,"index":4248}],"decl_id":null,"docs":" An iterator over overlapping subslices of length `size`.","sig":null,"attributes":[{"value":"* An iterator over overlapping subslices of length `size`.\n\nThis struct is created by the [`windows`] method on [bit slices].\n\n# Original\n\n[`slice::Windows`](https://doc.rust-lang.org/core/slice/struct.Windows.html)\n\n[bit slices]: struct.BitSlice.html\n[`windows`]: struct.BitSlice.html#method.windows\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":366607,"byte_end":366913,"line_start":711,"line_end":721,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":4282},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":369080,"byte_end":369086,"line_start":811,"line_end":811,"column_start":12,"column_end":18},"name":"Chunks","qualname":"::slice::iter::Chunks","value":"Chunks {  }","parent":null,"children":[{"krate":0,"index":4286},{"krate":0,"index":4287}],"decl_id":null,"docs":" An iterator over a bit slice in (non-overlapping) chunks (`chunk_size` bits\nat a time), starting at the beginning of the slice.","sig":null,"attributes":[{"value":"* An iterator over a bit slice in (non-overlapping) chunks (`chunk_size` bits\nat a time), starting at the beginning of the slice.\n\nWhen the slice length is not evenly divided by the chunk size, the last slice of\nthe iteration will be the remainder.\n\nThis struct is created by the [`chunks`] method on [bit slices].\n\n# Original\n\n[`slice::Chunks`](https://doc.rust-lang.org/core/slice/struct.Chunks.html)\n\n[bit slices]: struct.BitSlice.html\n[`chunks`]: struct.BitSlice.html#method.chunks\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":368553,"byte_end":369044,"line_start":795,"line_end":809,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":4321},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":371778,"byte_end":371787,"line_start":918,"line_end":918,"column_start":12,"column_end":21},"name":"ChunksMut","qualname":"::slice::iter::ChunksMut","value":"ChunksMut {  }","parent":null,"children":[{"krate":0,"index":4325},{"krate":0,"index":4326}],"decl_id":null,"docs":" An iterator over a bit slice in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the beginning of the slice.","sig":null,"attributes":[{"value":"* An iterator over a bit slice in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the beginning of the slice.\n\nWhen the slice len is not evenly divided by the chunk size, the last slice of\nthe iteration will be the remainder.\n\nThis struct is created by the [`chunks_mut`] method on [bit slices].\n\n# Original\n\n[`slice::ChunksMut`](https://doc.rust-lang.org/core/slice/struct.ChunksMut.html)\n\n# API Differences\n\nAll slices yielded from this iterator are marked as aliased.\n\n[bit slices]: struct.BitSlice.html\n[`chunks_mut`]: struct.BitSlice.html#chunks_mut\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":371161,"byte_end":371749,"line_start":898,"line_end":916,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":4355},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":374655,"byte_end":374666,"line_start":1025,"line_end":1025,"column_start":12,"column_end":23},"name":"ChunksExact","qualname":"::slice::iter::ChunksExact","value":"ChunksExact {  }","parent":null,"children":[{"krate":0,"index":4359},{"krate":0,"index":4360},{"krate":0,"index":4361}],"decl_id":null,"docs":" An iterator over a bit slice in (non-overlapping) chunks (`chunk_size` bits\nat a time), starting at the beginning of the slice.","sig":null,"attributes":[{"value":"* An iterator over a bit slice in (non-overlapping) chunks (`chunk_size` bits\nat a time), starting at the beginning of the slice.\n\nWhen the slice len is not evenly divided by the chunk size, the last up to\n`chunk_size - 1` bits will be ommitted but can be retrieved from the\n[`remainder`] function from the iterator.\n\nThis struct is created by the [`chunks_exact`] method on [bit slices].\n\n# Original\n\n[`slice::ChunksExact`](https://doc.rust-lang.org/core/slice/struct.ChunksExact.html)\n\n[bit slices]: struct.BitSlice.html\n[`chunks_exact`]: struct.BitSlice.html#method.chunks_exact\n[`remainder`]: #method.remainder\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":373999,"byte_end":374619,"line_start":1007,"line_end":1023,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":1754},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":375613,"byte_end":375622,"line_start":1062,"line_end":1062,"column_start":9,"column_end":18},"name":"remainder","qualname":"<ChunksExact>::remainder","value":"pub fn remainder(&Self) -> &'a BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the remainder of the original bit slice that is not going to be\n returned by the iterator. The returned slice has at most `chunk_size-1`\n bits.","sig":null,"attributes":[{"value":"/ Returns the remainder of the original bit slice that is not going to be","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":375297,"byte_end":375372,"line_start":1055,"line_end":1055,"column_start":2,"column_end":77}},{"value":"/ returned by the iterator. The returned slice has at most `chunk_size-1`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":375374,"byte_end":375449,"line_start":1056,"line_end":1056,"column_start":2,"column_end":77}},{"value":"/ bits.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":375451,"byte_end":375460,"line_start":1057,"line_end":1057,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":375462,"byte_end":375465,"line_start":1058,"line_end":1058,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":375467,"byte_end":375481,"line_start":1059,"line_end":1059,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":375483,"byte_end":375486,"line_start":1060,"line_end":1060,"column_start":2,"column_end":5}},{"value":"/ [`slice::ChunksExact::remainder`](https://doc.rust-lang.org/core/slice/struct.ChunksExact.html#method.remainder)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":375488,"byte_end":375604,"line_start":1061,"line_end":1061,"column_start":2,"column_end":118}}]},{"kind":"Struct","id":{"krate":0,"index":4395},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":377713,"byte_end":377727,"line_start":1146,"line_end":1146,"column_start":12,"column_end":26},"name":"ChunksExactMut","qualname":"::slice::iter::ChunksExactMut","value":"ChunksExactMut {  }","parent":null,"children":[{"krate":0,"index":4399},{"krate":0,"index":4400},{"krate":0,"index":4401}],"decl_id":null,"docs":" An iterator over a bit slice in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the beginning of the slice.","sig":null,"attributes":[{"value":"* An iterator over a bit slice in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the beginning of the slice.\n\nWhen the slice len is not evenly divided by the chunk size, the last up to\n`chunk_size-1` bits will be omitted but can be retrieved from the\n[`into_remainder`] function from the iterator.\n\nThis struct is created by the [`chunks_exact_mut`] method on [bit slices].\n\n# Original\n\n[`slice::ChunksExactMut`](https://doc.rust-lang.org/core/slice/struct.ChunksExactMut.html)\n\n# API Differences\n\nAll slices yielded from this iterator are marked as aliased.\n\n[bit slices]: struct.BitSlice.html\n[`chunks_exact_mut`]: struct.BitSlice.html#method.chunks_exact_mut\n[`into_remainder`]: #method.into_remainder\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":376945,"byte_end":377684,"line_start":1124,"line_end":1144,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":1760},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":378863,"byte_end":378877,"line_start":1189,"line_end":1189,"column_start":9,"column_end":23},"name":"into_remainder","qualname":"<ChunksExactMut>::into_remainder","value":"pub fn into_remainder(Self) -> &'a mut BitSlice<O, T::Alias>","parent":null,"children":[],"decl_id":null,"docs":" Returns the remainder of the original slice that is not going to be\n returned by the iterator. The returned slice has at most `chunk_size-1`\n bits.","sig":null,"attributes":[{"value":"/ Returns the remainder of the original slice that is not going to be","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":378391,"byte_end":378462,"line_start":1176,"line_end":1176,"column_start":2,"column_end":73}},{"value":"/ returned by the iterator. The returned slice has at most `chunk_size-1`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":378464,"byte_end":378539,"line_start":1177,"line_end":1177,"column_start":2,"column_end":77}},{"value":"/ bits.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":378541,"byte_end":378550,"line_start":1178,"line_end":1178,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":378552,"byte_end":378555,"line_start":1179,"line_end":1179,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":378557,"byte_end":378571,"line_start":1180,"line_end":1180,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":378573,"byte_end":378576,"line_start":1181,"line_end":1181,"column_start":2,"column_end":5}},{"value":"/ [`slice::ChunksExactMut::into_remainder`](https://doc.rust-lang.org/core/slice/struct.ChunksExactMut.html#method.into_remainder)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":378578,"byte_end":378710,"line_start":1182,"line_end":1182,"column_start":2,"column_end":134}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":378712,"byte_end":378715,"line_start":1183,"line_end":1183,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":378717,"byte_end":378738,"line_start":1184,"line_end":1184,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":378740,"byte_end":378743,"line_start":1185,"line_end":1185,"column_start":2,"column_end":5}},{"value":"/ The remainder slice, as with all slices yielded from this iterator, is","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":378745,"byte_end":378819,"line_start":1186,"line_end":1186,"column_start":2,"column_end":76}},{"value":"/ marked as aliased.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":378821,"byte_end":378843,"line_start":1187,"line_end":1187,"column_start":2,"column_end":24}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":378845,"byte_end":378854,"line_start":1188,"line_end":1188,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":4430},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":380861,"byte_end":380868,"line_start":1268,"line_end":1268,"column_start":12,"column_end":19},"name":"RChunks","qualname":"::slice::iter::RChunks","value":"RChunks {  }","parent":null,"children":[{"krate":0,"index":4434},{"krate":0,"index":4435}],"decl_id":null,"docs":" An iterator over a bit slice in (non-overlapping) chunks (`chunk_size` bits\nat a time), starting at the end of the slice.","sig":null,"attributes":[{"value":"* An iterator over a bit slice in (non-overlapping) chunks (`chunk_size` bits\nat a time), starting at the end of the slice.\n\nWhen the slice length is not evenly divided by the chunk size, the last slice of\nthe iteration will be the remainder.\n\nThis struct is created by the [`rchunks`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::RChunks`](https://doc.rust-lang.org/core/slice/struct.RChunks.html)\n\n[`BitSlice`]: struct.BitSlice.html\n[`rchunks`]: struct.BitSlice.html#method.rchunks\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":380334,"byte_end":380825,"line_start":1252,"line_end":1266,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":4469},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":384153,"byte_end":384163,"line_start":1383,"line_end":1383,"column_start":12,"column_end":22},"name":"RChunksMut","qualname":"::slice::iter::RChunksMut","value":"RChunksMut {  }","parent":null,"children":[{"krate":0,"index":4473},{"krate":0,"index":4474}],"decl_id":null,"docs":" An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size`\nbits at a time), starting at the end of the slice.","sig":null,"attributes":[{"value":"* An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size`\nbits at a time), starting at the end of the slice.\n\nWhen the slice length is not evenly divided by the chunk size, the last slice of\nthe iteration will be the remainder.\n\nThis struct is created by the [`rchunks_mut`] method on [bit slices].\n\n# API Differences\n\nAll slices yielded from this iterator are marked as aliased.\n\n[bit slices]: struct.BitSlice.html\n[`rchunks_mut`]: struct.BitSlice.html#method.rchunks_mut\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":383627,"byte_end":384124,"line_start":1367,"line_end":1381,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":4503},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":386818,"byte_end":386830,"line_start":1483,"line_end":1483,"column_start":12,"column_end":24},"name":"RChunksExact","qualname":"::slice::iter::RChunksExact","value":"RChunksExact {  }","parent":null,"children":[{"krate":0,"index":4507},{"krate":0,"index":4508},{"krate":0,"index":4509}],"decl_id":null,"docs":" An iterator over a bit slice in (non-overlapping) chunks (`chunk_size` bits\nat a time), starting at the end of the slice.","sig":null,"attributes":[{"value":"* An iterator over a bit slice in (non-overlapping) chunks (`chunk_size` bits\nat a time), starting at the end of the slice.\n\nWhen the slice len is not evenly divided by the chunk size, the last up to\n`chunk_size-1` bits will be omitted but can be retrieved from the [`remainder`]\nfunction from the iterator.\n\nThis struct is created by the [`rchunks_exact`] method on [bit slices].\n\n# Original\n\n[`slice::RChunksExact`](https://doc.rust-lang.org/core/slice/struct.RChunksExact.html)\n\n[bit slices]: struct.BitSlice.html\n[`rchunks_exact`]: struct.BitSlice.html#method.rchunks_exact\n[`remainder`]: #method.remainder\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":386166,"byte_end":386782,"line_start":1465,"line_end":1481,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":1766},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":387750,"byte_end":387759,"line_start":1520,"line_end":1520,"column_start":9,"column_end":18},"name":"remainder","qualname":"<RChunksExact>::remainder","value":"pub fn remainder(&Self) -> &'a BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the remainder of the original slice that is not going to be\n returned by the iterator. The returned slice has at most `chunk_size-1`\n bits.","sig":null,"attributes":[{"value":"/ Returns the remainder of the original slice that is not going to be","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":387425,"byte_end":387496,"line_start":1512,"line_end":1512,"column_start":2,"column_end":73}},{"value":"/ returned by the iterator. The returned slice has at most `chunk_size-1`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":387498,"byte_end":387573,"line_start":1513,"line_end":1513,"column_start":2,"column_end":77}},{"value":"/ bits.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":387575,"byte_end":387584,"line_start":1514,"line_end":1514,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":387586,"byte_end":387589,"line_start":1515,"line_end":1515,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":387591,"byte_end":387605,"line_start":1516,"line_end":1516,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":387607,"byte_end":387610,"line_start":1517,"line_end":1517,"column_start":2,"column_end":5}},{"value":"/ [`slice::RChunksExact::remainder`](https://doc.rust-lang.org/core/slice/struct.RChunksExact.html#method.remainder)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":387612,"byte_end":387730,"line_start":1518,"line_end":1518,"column_start":2,"column_end":120}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":387732,"byte_end":387741,"line_start":1519,"line_end":1519,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":4543},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":389973,"byte_end":389988,"line_start":1605,"line_end":1605,"column_start":12,"column_end":27},"name":"RChunksExactMut","qualname":"::slice::iter::RChunksExactMut","value":"RChunksExactMut {  }","parent":null,"children":[{"krate":0,"index":4547},{"krate":0,"index":4548},{"krate":0,"index":4549}],"decl_id":null,"docs":" An iterator over a bit slice in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the end of the slice.","sig":null,"attributes":[{"value":"* An iterator over a bit slice in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the end of the slice.\n\nWhen the slice len is not evenly divided by the chunk size, the last up to\n`chunk_size-1` bits will be omitted but can be retrieved from the\n[`into_remainder`] function from the iterator.\n\nThis struct is created by the [`rchunks_exact_mut`] method on [bit slices].\n\n# Original\n\n[`slice::RChunksExactMut`](https://doc.rust-lang.org/core/slice/struct.RChunksExactMut.html)\n\n# API Differences\n\nAll slices yielded from this iterator are marked as aliased.\n\n[bit slices]: struct.BitSlice.html\n[`into_remainder`]: #method.into_remainder\n[`rchunks_exact_mut`]: struct.BitSlice.html#method.rchunks_exact_mut\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":389206,"byte_end":389944,"line_start":1583,"line_end":1603,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":1772},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":391090,"byte_end":391104,"line_start":1647,"line_end":1647,"column_start":9,"column_end":23},"name":"into_remainder","qualname":"<RChunksExactMut>::into_remainder","value":"pub fn into_remainder(Self) -> &'a mut BitSlice<O, T::Alias>","parent":null,"children":[],"decl_id":null,"docs":" Returns the remainder of the original slice that is not going to be\n returned by the iterator. The returned slice has at most `chunk_size-1`\n bits.","sig":null,"attributes":[{"value":"/ Returns the remainder of the original slice that is not going to be","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":390616,"byte_end":390687,"line_start":1634,"line_end":1634,"column_start":2,"column_end":73}},{"value":"/ returned by the iterator. The returned slice has at most `chunk_size-1`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":390689,"byte_end":390764,"line_start":1635,"line_end":1635,"column_start":2,"column_end":77}},{"value":"/ bits.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":390766,"byte_end":390775,"line_start":1636,"line_end":1636,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":390777,"byte_end":390780,"line_start":1637,"line_end":1637,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":390782,"byte_end":390796,"line_start":1638,"line_end":1638,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":390798,"byte_end":390801,"line_start":1639,"line_end":1639,"column_start":2,"column_end":5}},{"value":"/ [`slice::RChunksExactMut::into_remainder`](https://doc.rust-lang.org/core/slice/struct.RChunksExactMut.html#method.into_remainder)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":390803,"byte_end":390937,"line_start":1640,"line_end":1640,"column_start":2,"column_end":136}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":390939,"byte_end":390942,"line_start":1641,"line_end":1641,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":390944,"byte_end":390965,"line_start":1642,"line_end":1642,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":390967,"byte_end":390970,"line_start":1643,"line_end":1643,"column_start":2,"column_end":5}},{"value":"/ The remainder slice, as with all slices yielded from this iterator, is","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":390972,"byte_end":391046,"line_start":1644,"line_end":1644,"column_start":2,"column_end":76}},{"value":"/ marked as aliased.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":391048,"byte_end":391070,"line_start":1645,"line_end":1645,"column_start":2,"column_end":24}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":391072,"byte_end":391081,"line_start":1646,"line_end":1646,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":4603},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":395439,"byte_end":395444,"line_start":1853,"line_end":1853,"column_start":12,"column_end":17},"name":"Split","qualname":"::slice::iter::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":4608},{"krate":0,"index":4609},{"krate":0,"index":4610}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction.","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction.\n\nThis struct is created by the [`split`] method on [bit slices].\n\n# Original\n\n[`slice::Split`](https://doc.rust-lang.org/core/slice/struct.Split.html)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[bit slices]: struct.BitSlice.html\n[`split`]: struct.BitSlice.html#method.split\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":394930,"byte_end":395410,"line_start":1835,"line_end":1851,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1775},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":397018,"byte_end":397026,"line_start":1922,"line_end":1922,"column_start":12,"column_end":20},"name":"SplitMut","qualname":"::slice::iter::SplitMut","value":"SplitMut {  }","parent":null,"children":[{"krate":0,"index":1780},{"krate":0,"index":1781},{"krate":0,"index":1782}],"decl_id":null,"docs":" An iterator over the mutable subslices of the slice which are separated by\nbits that match `pred`.","sig":null,"attributes":[{"value":"* An iterator over the mutable subslices of the slice which are separated by\nbits that match `pred`.\n\nThis struct is created by the [`split_mut`] method on [bit slices].\n\n# Original\n\n[`slice::SplitMut`](https://doc.rust-lang.org/core/slice/struct.SplitMut.html)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[bit slices]: struct.BitSlice.html\n[`split_mut`]: struct.BitSlice.html#method.split_mut\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":396487,"byte_end":397006,"line_start":1905,"line_end":1921,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":4693},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":398739,"byte_end":398745,"line_start":1999,"line_end":1999,"column_start":12,"column_end":18},"name":"RSplit","qualname":"::slice::iter::RSplit","value":"RSplit {  }","parent":null,"children":[{"krate":0,"index":4698},{"krate":0,"index":4699},{"krate":0,"index":4700}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction, starting from the end of the slice.","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction, starting from the end of the slice.\n\nThis struct is created by the [`rsplit`] method on [bit slices].\n\n# Original\n\n[`slice::RSplit`](https://doc.rust-lang.org/core/slice/struct.RSplit.html)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[bit slices]: struct.BitSlice.html\n[`rsplit`]: struct.BitSlice.html#method.rsplit\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":398189,"byte_end":398710,"line_start":1981,"line_end":1997,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1783},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":400182,"byte_end":400191,"line_start":2056,"line_end":2056,"column_start":12,"column_end":21},"name":"RSplitMut","qualname":"::slice::iter::RSplitMut","value":"RSplitMut {  }","parent":null,"children":[{"krate":0,"index":1788},{"krate":0,"index":1789},{"krate":0,"index":1790}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction, starting from the end of the slice.","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction, starting from the end of the slice.\n\nThis struct is created by the [`rsplit_mut`] method on [bit slices].\n\n# Original\n\n[`slice::RSplit`](https://doc.rust-lang.org/core/slice/struct.RSplit.html)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[bit slices]: struct.BitSlice.html\n[`rsplit_mut`]: struct.BitSlice.html#method.rsplit_mut\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":399637,"byte_end":400170,"line_start":2039,"line_end":2055,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1793},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":401844,"byte_end":401850,"line_start":2119,"line_end":2119,"column_start":12,"column_end":18},"name":"SplitN","qualname":"::slice::iter::SplitN","value":"SplitN {  }","parent":null,"children":[{"krate":0,"index":1798},{"krate":0,"index":1799}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits.","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits.\n\nThis struct is created by the [`splitn`] method on [bit slices].\n\n# Original\n\n[`slice::SplitN`](https://doc.rust-lang.org/core/slice/struct.SplitN.html)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[bit slices]: struct.BitSlice.html\n[`splitn`]: struct.BitSlice.html#method.splitn\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":401310,"byte_end":401832,"line_start":2102,"line_end":2118,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1800},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":402606,"byte_end":402615,"line_start":2148,"line_end":2148,"column_start":12,"column_end":21},"name":"SplitNMut","qualname":"::slice::iter::SplitNMut","value":"SplitNMut {  }","parent":null,"children":[{"krate":0,"index":1805},{"krate":0,"index":1806}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits.","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits.\n\nThis struct is created by the [`splitn_mut`] method on [bit slices].\n\n# Original\n\n[`slice::SplitNMut`](https://doc.rust-lang.org/core/slice/struct.SplitNMut.html)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[bit slices]: struct.BitSlice.html\n[`splitn_mut`]: struct.BitSlice.html#method.splitn_mut\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":402054,"byte_end":402594,"line_start":2131,"line_end":2147,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1807},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":403397,"byte_end":403404,"line_start":2178,"line_end":2178,"column_start":12,"column_end":19},"name":"RSplitN","qualname":"::slice::iter::RSplitN","value":"RSplitN {  }","parent":null,"children":[{"krate":0,"index":1812},{"krate":0,"index":1813}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits, starting from the end of the\nslice.","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits, starting from the end of the\nslice.\n\nThis struct is created by the [`rsplitn`] method on [bit slices].\n\n# Original\n\n[`slice::RSplitN`](https://doc.rust-lang.org/core/slice/struct.RSplitN.html)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[bit slices]: struct.BitSlice.html\n[`rsplitn`]: struct.BitSlice.html#method.rsplitn\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":402822,"byte_end":403385,"line_start":2160,"line_end":2177,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1814},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":404202,"byte_end":404212,"line_start":2208,"line_end":2208,"column_start":12,"column_end":22},"name":"RSplitNMut","qualname":"::slice::iter::RSplitNMut","value":"RSplitNMut {  }","parent":null,"children":[{"krate":0,"index":1819},{"krate":0,"index":1820}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits, starting from the end of the\nslice.","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits, starting from the end of the\nslice.\n\nThis struct is created by the [`rsplitn_mut`] method on [bit slices].\n\n# Original\n\n[`slice::RSplitNMut`](https://doc.rust-lang.org/core/slice/struct.RSplitNMut.html)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[bit slices]: struct.BitSlice.html\n[`rsplitn_mut`]: struct.BitSlice.html#method.rsplitn_mut\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":403609,"byte_end":404190,"line_start":2190,"line_end":2207,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1963},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/proxy.rs","byte_start":419134,"byte_end":419140,"line_start":86,"line_end":86,"column_start":12,"column_end":18},"name":"BitMut","qualname":"::slice::proxy::BitMut","value":"BitMut {  }","parent":null,"children":[{"krate":0,"index":1967},{"krate":0,"index":1968},{"krate":0,"index":1969},{"krate":0,"index":1970}],"decl_id":null,"docs":" Proxy reference type, equivalent to `&mut bool`.","sig":null,"attributes":[{"value":"* Proxy reference type, equivalent to `&mut bool`.\n\nThis is a two-word structure capable of correctly referring to a single bit in\na memory element. Because Rust does not permit reference-like objects in the\nsame manner that C++ does – `&T` and `&mut T` values are required to be\nimmediately-valid pointers, not objects – `bitvec` cannot manifest encoded\n`&mut Bit` values in the same way that it can manifest `&mut BitSlice`.\n\nInstead, this type implements `Deref` and `DerefMut` to an internal `bool` slot,\nand in `Drop` commits the value of that `bool` to the proxied bit in the source\n`BitSlice` from which the `BitMut` value was created. The combination of Rust’s\nown exclusion rules and the aliasing type system in this library ensure that a\n`BitMut` value has unique access to the bit it proxies, and the memory element\nit uses will not have destructive data races from other views.\n\n# Lifetimes\n\n- `'a`: The lifetime of the source `&'a mut BitSlice` that created the `BitMut`.\n\n# Type Parameters\n\n- `O`: The `BitOrder` type parameter from the source `&mut BitSlice`.\n- `T`: The `BitStore` type parameter from the source `&mut BitSlice`.\n\n# Examples\n\n```rust\nuse bitvec::prelude::*;\n\nlet bits = bits![mut 0; 2];\n\nlet (left, right) = bits.split_at_mut(1);\nlet mut first = left.get_mut(0).unwrap();\nlet second = right.get_mut(0).unwrap();\n\n// Referential behavior\n*first = true;\n// Direct write\nsecond.set(true);\n\ndrop(first); // it’s not a reference!\nassert_eq!(bits, bits![1; 2]);\n```\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/proxy.rs","byte_start":417617,"byte_end":419122,"line_start":42,"line_end":85,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":1975},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/proxy.rs","byte_start":420857,"byte_end":420860,"line_start":143,"line_end":143,"column_start":9,"column_end":12},"name":"set","qualname":"<BitMut>::set","value":"pub fn set(Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Writes a bit into the proxied location without an intermediate copy.","sig":null,"attributes":[{"value":"/ Writes a bit into the proxied location without an intermediate copy.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/proxy.rs","byte_start":420255,"byte_end":420327,"line_start":130,"line_end":130,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/proxy.rs","byte_start":420329,"byte_end":420332,"line_start":131,"line_end":131,"column_start":2,"column_end":5}},{"value":"/ This function writes `value` directly into the proxied location, and","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/proxy.rs","byte_start":420334,"byte_end":420406,"line_start":132,"line_end":132,"column_start":2,"column_end":74}},{"value":"/ does not store `value` in the proxy’s internal cache. This should be","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/proxy.rs","byte_start":420408,"byte_end":420482,"line_start":133,"line_end":133,"column_start":2,"column_end":74}},{"value":"/ equivalent to the behavior seen when using ordinary `DerefMut` proxying,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/proxy.rs","byte_start":420484,"byte_end":420560,"line_start":134,"line_end":134,"column_start":2,"column_end":78}},{"value":"/ but the latter depends on compiler optimization.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/proxy.rs","byte_start":420562,"byte_end":420614,"line_start":135,"line_end":135,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/proxy.rs","byte_start":420616,"byte_end":420619,"line_start":136,"line_end":136,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/proxy.rs","byte_start":420621,"byte_end":420637,"line_start":137,"line_end":137,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/proxy.rs","byte_start":420639,"byte_end":420642,"line_start":138,"line_end":138,"column_start":2,"column_end":5}},{"value":"/ - `self`: This destroys the proxy, as it becomes invalid when writing","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/proxy.rs","byte_start":420644,"byte_end":420717,"line_start":139,"line_end":139,"column_start":2,"column_end":75}},{"value":"/   directly to the location without updating the cache.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/proxy.rs","byte_start":420719,"byte_end":420777,"line_start":140,"line_end":140,"column_start":2,"column_end":60}},{"value":"/ - `value`: The new bit to write into the proxied slot.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/proxy.rs","byte_start":420779,"byte_end":420837,"line_start":141,"line_end":141,"column_start":2,"column_end":60}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/proxy.rs","byte_start":420839,"byte_end":420848,"line_start":142,"line_end":142,"column_start":2,"column_end":11}}]},{"kind":"Mod","id":{"krate":0,"index":2275},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"store","qualname":"::store","value":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","parent":null,"children":[{"krate":0,"index":2276},{"krate":0,"index":2277},{"krate":0,"index":2280},{"krate":0,"index":2281},{"krate":0,"index":2284},{"krate":0,"index":2287},{"krate":0,"index":2290},{"krate":0,"index":2293},{"krate":0,"index":2296},{"krate":0,"index":2297},{"krate":0,"index":2300},{"krate":0,"index":2301},{"krate":0,"index":2303},{"krate":0,"index":2306},{"krate":0,"index":2319},{"krate":0,"index":4985},{"krate":0,"index":4997},{"krate":0,"index":4998},{"krate":0,"index":5010},{"krate":0,"index":5011},{"krate":0,"index":5023},{"krate":0,"index":5024},{"krate":0,"index":5036},{"krate":0,"index":5037},{"krate":0,"index":5049},{"krate":0,"index":2320},{"krate":0,"index":2331},{"krate":0,"index":2333}],"decl_id":null,"docs":" Memory modeling.","sig":null,"attributes":[{"value":"* Memory modeling.\n\nThis module provides a `BitStore` trait, which mediates how handles access\nmemory and perform analysis on the regions they describe.\n!*/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":439579,"byte_end":439737,"line_start":1,"line_end":5,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":2306},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":442830,"byte_end":442838,"line_start":82,"line_end":82,"column_start":11,"column_end":19},"name":"BitStore","qualname":"::store::BitStore","value":"BitStore: seal::Sealed + Sized + Debug","parent":null,"children":[{"krate":0,"index":2307},{"krate":0,"index":2308},{"krate":0,"index":2309},{"krate":0,"index":2310},{"krate":0,"index":2311},{"krate":0,"index":2313},{"krate":0,"index":2315},{"krate":0,"index":2316},{"krate":0,"index":2318}],"decl_id":null,"docs":" Common interface for memory regions.","sig":null,"attributes":[{"value":"* Common interface for memory regions.\n\nThis trait is implemented on the fundamental integers no wider than the target\nprocessor word size, their `Cell` wrappers, and (if present) their `Atomic`\nvariants. Users provide this type as a parameter to their data structures in\norder to inform the structure of how it may access the memory it describes.\n\nCurrently, `bitvec` is only tested on 32- and 64- bit architectures. This means\nthat `u8`, `u16`, `u32`, and `usize` unconditionally implement `BitStore`, but\n`u64` will only do so on 64-bit targets, and will be unavailable on 32-bit\ntargets. This is a necessary restriction of `bitvec` internals. Please comment\non [Issue #76](https://github.com/myrrlyn/bitvec/issues/76) if this affects you.\n\nSpecifically, this has the davantage that a `BitSlice<_, Cell<_>>` knows that it\nhas a view of memory that will not undergo concurrent modification. As such, it\ncan forego atomic accesses, and just use ordinary load/store instructions\nwithout fear of causing observable race conditions.\n\nThe associated types `Mem` and `Alias` allow implementors to know the register\nwidth of the memory they describe (`Mem`) and to know the aliasing status of the\nregion.\n\n# Generic Programming\n\nGeneric programming with associated types is *hard*, especially when using them,\nas in this trait, to implement a closed graph of relationships between types.\n\nFor example, this trait is implemented such that for any given type `T`,\n`T::Alias::Mem` == `T::Mem` == `T::NoAlias::Mem`, `T::Alias::Alias == T::Alias`,\nand `T::NoAlias::NoAlias == T::NoAlias`. Unfortunately, the Rust type system\ndoes not allow these relationships to be described, so generic programming that\nperforms type transitions will *rapidly* become uncomfortable to use.\n\nInternally, `bitvec` makes use of type-manipulation functions that are known to\nbe correct with respect to the implementations of `BitStore` in order to ease\nimplementation of library methods.\n\nYou are not expected to do significant programming that is generic over the\n`BitStore` memory parameter. When using a concrete type, the compiler will\ngladly reduce the abstract type associations into their instantiated selections,\nallowing monomorphized code to be *much* more convenient than generic.\n\nIf you have a use case that involves generic programming over this trait, and\nyou are encountering difficulties dealing with the type associations, please\nfile an issue asking for support in this area.\n\n# Supertraits\n\nThis trait has trait requirements that better express its behavior:\n\n- `Sealed` prevents it from being implemented by downstream libraries (`Sealed`\n  is a public trait in a private module, that only this crate can name).\n- `Sized` instructs the compiler that values of this type can be used as\n  immediates.\n- `Debug` informs the compiler that other structures using this trait bound can\n  correctly derive `Debug`.\n  **/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":439913,"byte_end":442819,"line_start":25,"line_end":81,"column_start":1,"column_end":6}}]},{"kind":"Type","id":{"krate":0,"index":2307},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":442932,"byte_end":442935,"line_start":84,"line_end":84,"column_start":7,"column_end":10},"name":"Mem","qualname":"::store::BitStore::Mem","value":"type Mem: BitRegister + Into<Self>;","parent":{"krate":0,"index":2306},"children":[],"decl_id":null,"docs":" The register type that the implementor describes.\n","sig":null,"attributes":[{"value":"/ The register type that the implementor describes.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":442872,"byte_end":442925,"line_start":83,"line_end":83,"column_start":2,"column_end":55}}]},{"kind":"Type","id":{"krate":0,"index":2308},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":443041,"byte_end":443047,"line_start":87,"line_end":87,"column_start":7,"column_end":13},"name":"Access","qualname":"::store::BitStore::Access","value":"type Access: BitAccess<Item = Self::Mem>;","parent":{"krate":0,"index":2306},"children":[],"decl_id":null,"docs":" The modifier type over `Self::Mem` used to perform memory access.\n","sig":null,"attributes":[{"value":"/ The modifier type over `Self::Mem` used to perform memory access.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":442965,"byte_end":443034,"line_start":86,"line_end":86,"column_start":2,"column_end":71}}]},{"kind":"Type","id":{"krate":0,"index":2309},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":443691,"byte_end":443696,"line_start":100,"line_end":100,"column_start":7,"column_end":12},"name":"Alias","qualname":"::store::BitStore::Alias","value":"type Alias: BitStore + Radium<Item = Self::Mem>;","parent":{"krate":0,"index":2306},"children":[],"decl_id":null,"docs":" A sibling `BitStore` implementor that performs alias-aware memory\n access.","sig":null,"attributes":[{"value":"/ A sibling `BitStore` implementor that performs alias-aware memory","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":443080,"byte_end":443149,"line_start":89,"line_end":89,"column_start":2,"column_end":71}},{"value":"/ access.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":443151,"byte_end":443162,"line_start":90,"line_end":90,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":443164,"byte_end":443167,"line_start":91,"line_end":91,"column_start":2,"column_end":5}},{"value":"/ While the associated type always has the same `Mem` concrete type as","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":443169,"byte_end":443241,"line_start":92,"line_end":92,"column_start":2,"column_end":74}},{"value":"/ `Self`, attempting to encode this requirement as `<Mem = Self::Mem>","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":443243,"byte_end":443314,"line_start":93,"line_end":93,"column_start":2,"column_end":73}},{"value":"/ causes Rust to enter an infinite recursion in the trait solver.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":443316,"byte_end":443383,"line_start":94,"line_end":94,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":443385,"byte_end":443388,"line_start":95,"line_end":95,"column_start":2,"column_end":5}},{"value":"/ Instead, the two `Radium` bounds inform the compiler that the `Alias` is","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":443390,"byte_end":443466,"line_start":96,"line_end":96,"column_start":2,"column_end":78}},{"value":"/ irradiant over both the current memory and the destination memory types,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":443468,"byte_end":443544,"line_start":97,"line_end":97,"column_start":2,"column_end":78}},{"value":"/ allowing generic type algebra to resolve correctly even though the fact","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":443546,"byte_end":443621,"line_start":98,"line_end":98,"column_start":2,"column_end":77}},{"value":"/ that `Radium` is only implemented once is not guaranteed.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":443623,"byte_end":443684,"line_start":99,"line_end":99,"column_start":2,"column_end":63}}]},{"kind":"Type","id":{"krate":0,"index":2310},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":444008,"byte_end":444018,"line_start":108,"line_end":108,"column_start":7,"column_end":17},"name":"Threadsafe","qualname":"::store::BitStore::Threadsafe","value":"type Threadsafe;","parent":{"krate":0,"index":2306},"children":[],"decl_id":null,"docs":" Marker for the thread safety of the implementor.","sig":null,"attributes":[{"value":"/ Marker for the thread safety of the implementor.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":443737,"byte_end":443789,"line_start":102,"line_end":102,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":443791,"byte_end":443794,"line_start":103,"line_end":103,"column_start":2,"column_end":5}},{"value":"/ This is necessary because `Cell<T: Send>` is `Send`, but `Cell` does not","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":443796,"byte_end":443872,"line_start":104,"line_end":104,"column_start":2,"column_end":78}},{"value":"/ use synchronization instructions and thus cannot be used for aliased","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":443874,"byte_end":443946,"line_start":105,"line_end":105,"column_start":2,"column_end":74}},{"value":"/ parallelized memory manipulation.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":443948,"byte_end":443985,"line_start":106,"line_end":106,"column_start":2,"column_end":39}}]},{"kind":"Const","id":{"krate":0,"index":2311},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":444107,"byte_end":444124,"line_start":112,"line_end":112,"column_start":8,"column_end":25},"name":"__ALIGNED_TO_SIZE","qualname":"::store::BitStore::__ALIGNED_TO_SIZE","value":"[(); ]","parent":{"krate":0,"index":2306},"children":[],"decl_id":null,"docs":" Require that all implementors are aligned to their width.\n","sig":null,"attributes":[{"value":"/ Require that all implementors are aligned to their width.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":444022,"byte_end":444083,"line_start":110,"line_end":110,"column_start":2,"column_end":63}}]},{"kind":"Const","id":{"krate":0,"index":2313},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":444256,"byte_end":444269,"line_start":117,"line_end":117,"column_start":8,"column_end":21},"name":"__ALIAS_WIDTH","qualname":"::store::BitStore::__ALIAS_WIDTH","value":"[(); ]","parent":{"krate":0,"index":2306},"children":[],"decl_id":null,"docs":" Require that the `::Alias` associated type has the same width and\n alignment as `Self`.\n","sig":null,"attributes":[{"value":"/ Require that the `::Alias` associated type has the same width and","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":444137,"byte_end":444206,"line_start":114,"line_end":114,"column_start":2,"column_end":71}},{"value":"/ alignment as `Self`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":444208,"byte_end":444232,"line_start":115,"line_end":115,"column_start":2,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":2315},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":444454,"byte_end":444464,"line_start":128,"line_end":128,"column_start":5,"column_end":15},"name":"load_value","qualname":"::store::BitStore::load_value","value":"pub fn load_value(&Self) -> Self::Mem","parent":{"krate":0,"index":2306},"children":[],"decl_id":null,"docs":" Copies a memory element into the caller’s local context.","sig":null,"attributes":[{"value":"/ Copies a memory element into the caller’s local context.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":444282,"byte_end":444344,"line_start":119,"line_end":119,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":444346,"byte_end":444349,"line_start":120,"line_end":120,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":444351,"byte_end":444367,"line_start":121,"line_end":121,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":444369,"byte_end":444372,"line_start":122,"line_end":122,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":444374,"byte_end":444387,"line_start":123,"line_end":123,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":444389,"byte_end":444392,"line_start":124,"line_end":124,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":444394,"byte_end":444407,"line_start":125,"line_end":125,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":444409,"byte_end":444412,"line_start":126,"line_end":126,"column_start":2,"column_end":5}},{"value":"/ A copy of the value at `*self`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":444414,"byte_end":444449,"line_start":127,"line_end":127,"column_start":2,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":2316},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":444804,"byte_end":444811,"line_start":144,"line_end":144,"column_start":5,"column_end":12},"name":"get_bit","qualname":"::store::BitStore::get_bit","value":"pub fn get_bit<O>(&Self, BitIdx<Self::Mem>) -> bool where O: BitOrder","parent":{"krate":0,"index":2306},"children":[],"decl_id":null,"docs":" Fetches the value of one bit in a memory element.","sig":null,"attributes":[{"value":"/ Fetches the value of one bit in a memory element.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":444488,"byte_end":444541,"line_start":130,"line_end":130,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":444543,"byte_end":444546,"line_start":131,"line_end":131,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":444548,"byte_end":444569,"line_start":132,"line_end":132,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":444571,"byte_end":444574,"line_start":133,"line_end":133,"column_start":2,"column_end":5}},{"value":"/ - `O`: A bit ordering.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":444576,"byte_end":444602,"line_start":134,"line_end":134,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":444604,"byte_end":444607,"line_start":135,"line_end":135,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":444609,"byte_end":444625,"line_start":136,"line_end":136,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":444627,"byte_end":444630,"line_start":137,"line_end":137,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":444632,"byte_end":444645,"line_start":138,"line_end":138,"column_start":2,"column_end":15}},{"value":"/ - `index`: The semantic index of the bit in `*self` to read.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":444647,"byte_end":444711,"line_start":139,"line_end":139,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":444713,"byte_end":444716,"line_start":140,"line_end":140,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":444718,"byte_end":444731,"line_start":141,"line_end":141,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":444733,"byte_end":444736,"line_start":142,"line_end":142,"column_start":2,"column_end":5}},{"value":"/ The value of the bit in `*self` corresponding to `index`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":444738,"byte_end":444799,"line_start":143,"line_end":143,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2318},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":445575,"byte_end":445583,"line_start":167,"line_end":167,"column_start":5,"column_end":13},"name":"get_bits","qualname":"::store::BitStore::get_bits","value":"pub fn get_bits(&Self, BitMask<Self::Mem>) -> Self::Mem","parent":{"krate":0,"index":2306},"children":[],"decl_id":null,"docs":" Fetches any number of bits from a memory element.","sig":null,"attributes":[{"value":"/ Fetches any number of bits from a memory element.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":444953,"byte_end":445006,"line_start":149,"line_end":149,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":445008,"byte_end":445011,"line_start":150,"line_end":150,"column_start":2,"column_end":5}},{"value":"/ The mask provided to this method must be constructed from indices that","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":445013,"byte_end":445087,"line_start":151,"line_end":151,"column_start":2,"column_end":76}},{"value":"/ are valid in the caller’s context. As the mask is already computed by","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":445089,"byte_end":445164,"line_start":152,"line_end":152,"column_start":2,"column_end":75}},{"value":"/ the caller, this does not take an ordering type parameter.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":445166,"byte_end":445228,"line_start":153,"line_end":153,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":445230,"byte_end":445233,"line_start":154,"line_end":154,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":445235,"byte_end":445251,"line_start":155,"line_end":155,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":445253,"byte_end":445256,"line_start":156,"line_end":156,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":445258,"byte_end":445271,"line_start":157,"line_end":157,"column_start":2,"column_end":15}},{"value":"/ - `mask`: A mask of any number of bits. This is a selection mask of bits","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":445273,"byte_end":445349,"line_start":158,"line_end":158,"column_start":2,"column_end":78}},{"value":"/   to read.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":445351,"byte_end":445365,"line_start":159,"line_end":159,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":445367,"byte_end":445370,"line_start":160,"line_end":160,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":445372,"byte_end":445385,"line_start":161,"line_end":161,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":445387,"byte_end":445390,"line_start":162,"line_end":162,"column_start":2,"column_end":5}},{"value":"/ A copy of the memory element at `*self`, with all bits not selected (set","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":445392,"byte_end":445468,"line_start":163,"line_end":163,"column_start":2,"column_end":78}},{"value":"/ to `0`) in `mask` erased and all bits selected (set to `1`) in `mask`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":445470,"byte_end":445543,"line_start":164,"line_end":164,"column_start":2,"column_end":75}},{"value":"/ preserved.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":445545,"byte_end":445559,"line_start":165,"line_end":165,"column_start":2,"column_end":16}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":445561,"byte_end":445570,"line_start":166,"line_end":166,"column_start":2,"column_end":11}}]},{"kind":"Trait","id":{"krate":0,"index":2334},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":448708,"byte_end":448714,"line_start":292,"line_end":292,"column_start":12,"column_end":18},"name":"Sealed","qualname":"::store::seal::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":" Marker trait to seal `BitStore` against downstream implementation.","sig":null,"attributes":[{"value":"/ Marker trait to seal `BitStore` against downstream implementation.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":448340,"byte_end":448410,"line_start":285,"line_end":285,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":448412,"byte_end":448415,"line_start":286,"line_end":286,"column_start":2,"column_end":5}},{"value":"/ This trait is public in the module, so that other modules in the crate","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":448417,"byte_end":448491,"line_start":287,"line_end":287,"column_start":2,"column_end":76}},{"value":"/ can use it, but so long as it is not exported by the crate root and this","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":448493,"byte_end":448569,"line_start":288,"line_end":288,"column_start":2,"column_end":78}},{"value":"/ module is private, this trait effectively forbids downstream","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":448571,"byte_end":448635,"line_start":289,"line_end":289,"column_start":2,"column_end":66}},{"value":"/ implementation of the `BitStore` trait.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":448637,"byte_end":448680,"line_start":290,"line_end":290,"column_start":2,"column_end":45}}]},{"kind":"Mod","id":{"krate":0,"index":2335},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"view","qualname":"::view","value":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","parent":null,"children":[{"krate":0,"index":2336},{"krate":0,"index":2337},{"krate":0,"index":2338},{"krate":0,"index":2341},{"krate":0,"index":2344},{"krate":0,"index":2347},{"krate":0,"index":2350},{"krate":0,"index":2353},{"krate":0,"index":2356},{"krate":0,"index":2359},{"krate":0,"index":2372},{"krate":0,"index":2381},{"krate":0,"index":2390},{"krate":0,"index":2400},{"krate":0,"index":5050},{"krate":0,"index":5060},{"krate":0,"index":5070},{"krate":0,"index":5080},{"krate":0,"index":5090},{"krate":0,"index":5100},{"krate":0,"index":5110},{"krate":0,"index":5120},{"krate":0,"index":5130},{"krate":0,"index":5140},{"krate":0,"index":5150},{"krate":0,"index":5160},{"krate":0,"index":5170},{"krate":0,"index":5180},{"krate":0,"index":5190},{"krate":0,"index":5200},{"krate":0,"index":5210},{"krate":0,"index":5220},{"krate":0,"index":5230},{"krate":0,"index":5240},{"krate":0,"index":5250},{"krate":0,"index":5260},{"krate":0,"index":5270},{"krate":0,"index":5280},{"krate":0,"index":5290},{"krate":0,"index":5300},{"krate":0,"index":5310},{"krate":0,"index":5320},{"krate":0,"index":5330},{"krate":0,"index":5340},{"krate":0,"index":5350},{"krate":0,"index":5360},{"krate":0,"index":5370},{"krate":0,"index":5380},{"krate":0,"index":5390},{"krate":0,"index":5400},{"krate":0,"index":5410},{"krate":0,"index":5420},{"krate":0,"index":5430},{"krate":0,"index":5440},{"krate":0,"index":5450},{"krate":0,"index":5460},{"krate":0,"index":5470},{"krate":0,"index":5480},{"krate":0,"index":5490},{"krate":0,"index":5500},{"krate":0,"index":5510},{"krate":0,"index":5520},{"krate":0,"index":5530},{"krate":0,"index":5540},{"krate":0,"index":5550},{"krate":0,"index":5560},{"krate":0,"index":5570},{"krate":0,"index":5580},{"krate":0,"index":5590},{"krate":0,"index":5600},{"krate":0,"index":5610},{"krate":0,"index":5620},{"krate":0,"index":5630},{"krate":0,"index":5640},{"krate":0,"index":5650},{"krate":0,"index":5660},{"krate":0,"index":5670},{"krate":0,"index":5680},{"krate":0,"index":2401},{"krate":0,"index":2405},{"krate":0,"index":2409},{"krate":0,"index":2414}],"decl_id":null,"docs":" View constructors for memory regions.","sig":null,"attributes":[{"value":"* View constructors for memory regions.\n\nThe `&BitSlice` type is a referential view over existing memory. The inherent\nconstructors are awkward to call, as they require function syntax rather than\nmethod syntax, and must provide a token for the memory type even though this is\nprovided by the prior binding.\n\nThis module provides a view trait, `ViewBits`, which provides `BitSlice`\nconstructors available in method-call syntax with only ordering type parameters.\n\nIn addition, the traits `AsBits` and `AsBitsMut` are analogues of [`AsRef`] and\n[`AsMut`], respectively. These traits have a blanket implementation for all\n`A: As{Ref,Mut}<[T: BitStore]>`, so that any type that implements a view to a\nsuitable memory region automatically implements a view to that region’s bits.\n\nThese traits are distinct because `ViewBits` combines the im/mutable view\nfunctions into one trait, and can provide specialized implementations with a\nslight performance increase over the generic, but `AsBits{,Mut}` can fit in the\ngeneric type system of any library without undue effort.\n\n[`AsMut`]: https://doc.rust-lang.org/core/convert/trait.AsMut.html\n[`AsRef`]: https://doc.rust-lang.org/core/convert/trait.AsRef.html\n!*/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":450814,"byte_end":452021,"line_start":1,"line_end":23,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":2359},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":452746,"byte_end":452753,"line_start":49,"line_end":49,"column_start":11,"column_end":18},"name":"BitView","qualname":"::view::BitView","value":"BitView","parent":null,"children":[{"krate":0,"index":2360},{"krate":0,"index":2361},{"krate":0,"index":2362},{"krate":0,"index":2364},{"krate":0,"index":2366},{"krate":0,"index":2368},{"krate":0,"index":2370},{"krate":0,"index":2371}],"decl_id":null,"docs":" Views a type that can store bits as a bit-slice.","sig":null,"attributes":[{"value":"* Views a type that can store bits as a bit-slice.\n\nThis trait is implemented on all `T: BitStore` types, and the arrays and slices\nof them that are supported by the standard library.\n\nThis means that until type-level integers are stabilized, only arrays in\n`[T: BitStore; 0 ..= 32]` will implement the trait; wider arrays will need to\nreborrow as slices `[T]` in order to use the slice implementation.\n\nIf you have a type that contains a bit-storage type that can be viewed with this\ntrait, then you can implement this trait by forwarding to the interior view.\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":452168,"byte_end":452735,"line_start":37,"line_end":48,"column_start":1,"column_end":4}}]},{"kind":"Type","id":{"krate":0,"index":2360},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":452814,"byte_end":452819,"line_start":51,"line_end":51,"column_start":7,"column_end":12},"name":"Store","qualname":"::view::BitView::Store","value":"type Store: BitStore;","parent":{"krate":0,"index":2359},"children":[],"decl_id":null,"docs":" The access-control type of the storage region.\n","sig":null,"attributes":[{"value":"/ The access-control type of the storage region.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":452757,"byte_end":452807,"line_start":50,"line_end":50,"column_start":2,"column_end":52}}]},{"kind":"Type","id":{"krate":0,"index":2361},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":452895,"byte_end":452898,"line_start":54,"line_end":54,"column_start":7,"column_end":10},"name":"Mem","qualname":"::view::BitView::Mem","value":"type Mem: BitMemory;","parent":{"krate":0,"index":2359},"children":[],"decl_id":null,"docs":" The underlying register type of the storage region.\n","sig":null,"attributes":[{"value":"/ The underlying register type of the storage region.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":452833,"byte_end":452888,"line_start":53,"line_end":53,"column_start":2,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2362},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":453203,"byte_end":453212,"line_start":69,"line_end":69,"column_start":5,"column_end":14},"name":"view_bits","qualname":"::view::BitView::view_bits","value":"pub fn view_bits<O>(&Self) -> &BitSlice<O, Self::Store> where O: BitOrder","parent":{"krate":0,"index":2359},"children":[],"decl_id":null,"docs":" Views a memory region as a `BitSlice`.","sig":null,"attributes":[{"value":"/ Views a memory region as a `BitSlice`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":452913,"byte_end":452955,"line_start":56,"line_end":56,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":452957,"byte_end":452960,"line_start":57,"line_end":57,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":452962,"byte_end":452983,"line_start":58,"line_end":58,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":452985,"byte_end":452988,"line_start":59,"line_end":59,"column_start":2,"column_end":5}},{"value":"/ - `O`: The bit ordering used for the region.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":452990,"byte_end":453038,"line_start":60,"line_end":60,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":453040,"byte_end":453043,"line_start":61,"line_end":61,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":453045,"byte_end":453061,"line_start":62,"line_end":62,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":453063,"byte_end":453066,"line_start":63,"line_end":63,"column_start":2,"column_end":5}},{"value":"/ - `&self`: The region to view as individual bits.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":453068,"byte_end":453121,"line_start":64,"line_end":64,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":453123,"byte_end":453126,"line_start":65,"line_end":65,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":453128,"byte_end":453141,"line_start":66,"line_end":66,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":453143,"byte_end":453146,"line_start":67,"line_end":67,"column_start":2,"column_end":5}},{"value":"/ A `&BitSlice` view over the region at `*self`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":453148,"byte_end":453198,"line_start":68,"line_end":68,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2364},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":453432,"byte_end":453436,"line_start":79,"line_end":79,"column_start":5,"column_end":9},"name":"bits","qualname":"::view::BitView::bits","value":"pub fn bits<O>(&Self) -> &BitSlice<O, Self::Store> where O: BitOrder","parent":{"krate":0,"index":2359},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":453290,"byte_end":453307,"line_start":73,"line_end":73,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":453309,"byte_end":453339,"line_start":74,"line_end":74,"column_start":2,"column_end":32}},{"value":"deprecated(since = \"0.18.0\", note =\n             \"The method is renamed to `.view_bits`\")","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":453341,"byte_end":453427,"line_start":75,"line_end":78,"column_start":2,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":2366},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":453836,"byte_end":453849,"line_start":97,"line_end":97,"column_start":5,"column_end":18},"name":"view_bits_mut","qualname":"::view::BitView::view_bits_mut","value":"pub fn view_bits_mut<O>(&mut Self) -> &mut BitSlice<O, Self::Store> where\nO: BitOrder","parent":{"krate":0,"index":2359},"children":[],"decl_id":null,"docs":" Views a memory region as a mutable `BitSlice`.","sig":null,"attributes":[{"value":"/ Views a memory region as a mutable `BitSlice`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":453526,"byte_end":453576,"line_start":84,"line_end":84,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":453578,"byte_end":453581,"line_start":85,"line_end":85,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":453583,"byte_end":453604,"line_start":86,"line_end":86,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":453606,"byte_end":453609,"line_start":87,"line_end":87,"column_start":2,"column_end":5}},{"value":"/ - `O`: The bit ordering used for the region.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":453611,"byte_end":453659,"line_start":88,"line_end":88,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":453661,"byte_end":453664,"line_start":89,"line_end":89,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":453666,"byte_end":453682,"line_start":90,"line_end":90,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":453684,"byte_end":453687,"line_start":91,"line_end":91,"column_start":2,"column_end":5}},{"value":"/ - `&self`: The region to view as individual mutable bits.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":453689,"byte_end":453750,"line_start":92,"line_end":92,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":453752,"byte_end":453755,"line_start":93,"line_end":93,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":453757,"byte_end":453770,"line_start":94,"line_end":94,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":453772,"byte_end":453775,"line_start":95,"line_end":95,"column_start":2,"column_end":5}},{"value":"/ A `&mut BitSlice` view over the region at `*self`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":453777,"byte_end":453831,"line_start":96,"line_end":96,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2368},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":454081,"byte_end":454089,"line_start":107,"line_end":107,"column_start":5,"column_end":13},"name":"bits_mut","qualname":"::view::BitView::bits_mut","value":"pub fn bits_mut<O>(&mut Self) -> &BitSlice<O, Self::Store> where O: BitOrder","parent":{"krate":0,"index":2359},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":453935,"byte_end":453952,"line_start":101,"line_end":101,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":453954,"byte_end":453984,"line_start":102,"line_end":102,"column_start":2,"column_end":32}},{"value":"deprecated(since = \"0.18.0\", note =\n             \"The method is renamed to `.view_bits_mut`\")","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":453986,"byte_end":454076,"line_start":103,"line_end":106,"column_start":2,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":2370},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":454276,"byte_end":454286,"line_start":114,"line_end":114,"column_start":5,"column_end":15},"name":"const_bits","qualname":"::view::BitView::const_bits","value":"pub fn const_bits() -> usize where Self: Sized","parent":{"krate":0,"index":2359},"children":[],"decl_id":null,"docs":" Produces the number of bits that the implementing type can hold.\n","sig":null,"attributes":[{"value":"/ Produces the number of bits that the implementing type can hold.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":454187,"byte_end":454255,"line_start":112,"line_end":112,"column_start":2,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2371},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":454497,"byte_end":454507,"line_start":121,"line_end":121,"column_start":5,"column_end":15},"name":"const_elts","qualname":"::view::BitView::const_elts","value":"pub fn const_elts() -> usize where Self: Sized","parent":{"krate":0,"index":2359},"children":[],"decl_id":null,"docs":" Produces the number of memory elements that the implementing type holds.\n","sig":null,"attributes":[{"value":"/ Produces the number of memory elements that the implementing type holds.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":454400,"byte_end":454476,"line_start":119,"line_end":119,"column_start":2,"column_end":78}}]},{"kind":"Trait","id":{"krate":0,"index":2401},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":458204,"byte_end":458210,"line_start":283,"line_end":283,"column_start":11,"column_end":17},"name":"AsBits","qualname":"::view::AsBits","value":"AsBits<T>","parent":null,"children":[{"krate":0,"index":2403}],"decl_id":null,"docs":" Views a region as an immutable bit-slice only.","sig":null,"attributes":[{"value":"* Views a region as an immutable bit-slice only.\n\nThis trait is an analogue to the [`AsRef`] trait, in that it enables any type to\nprovide an immutable-only view of a bit slice.\n\nIt does not require an `AsRef<[T: BitStore]>` implementation, and a blanket\nimplementation for all such types is provided. This allows you to choose whether\nto implement only one of `AsBits<T>` or `AsRef<[T]>`, and gain a bit-slice view\nwith either choice.\n\n# Type Parameters\n\n- `T`: The underlying storage region.\n\n# Notes\n\nYou are not *forbidden* from creating multiple views with different element\ntypes to the same region, but doing so is likely to cause inconsistent and\nunsurprising behavior.\n\nRefrain from implementing this trait with more than one storage argument unless\nyou are sure that you can uphold the memory region requirements of all of them,\nand are aware of the behavior conflicts that may arise.\n\n[`AsRef`]: https://doc.rust-lang.org/core/convert/trait.AsRef.html\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":457225,"byte_end":458193,"line_start":257,"line_end":282,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":2403},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":458523,"byte_end":458530,"line_start":299,"line_end":299,"column_start":5,"column_end":12},"name":"as_bits","qualname":"::view::AsBits::as_bits","value":"pub fn as_bits<O>(&Self) -> &BitSlice<O, T> where O: BitOrder","parent":{"krate":0,"index":2401},"children":[],"decl_id":null,"docs":" Views memory as a slice of immutable bits.","sig":null,"attributes":[{"value":"/ Views memory as a slice of immutable bits.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":458235,"byte_end":458281,"line_start":286,"line_end":286,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":458283,"byte_end":458286,"line_start":287,"line_end":287,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":458288,"byte_end":458309,"line_start":288,"line_end":288,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":458311,"byte_end":458314,"line_start":289,"line_end":289,"column_start":2,"column_end":5}},{"value":"/ - `O`: The bit ordering used for the region.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":458316,"byte_end":458364,"line_start":290,"line_end":290,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":458366,"byte_end":458369,"line_start":291,"line_end":291,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":458371,"byte_end":458387,"line_start":292,"line_end":292,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":458389,"byte_end":458392,"line_start":293,"line_end":293,"column_start":2,"column_end":5}},{"value":"/ - `&self`: The value that is providing a bit-slice view.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":458394,"byte_end":458454,"line_start":294,"line_end":294,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":458456,"byte_end":458459,"line_start":295,"line_end":295,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":458461,"byte_end":458474,"line_start":296,"line_end":296,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":458476,"byte_end":458479,"line_start":297,"line_end":297,"column_start":2,"column_end":5}},{"value":"/ An immutable view into some bits.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":458481,"byte_end":458518,"line_start":298,"line_end":298,"column_start":2,"column_end":39}}]},{"kind":"Trait","id":{"krate":0,"index":2405},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":459549,"byte_end":459558,"line_start":329,"line_end":329,"column_start":11,"column_end":20},"name":"AsBitsMut","qualname":"::view::AsBitsMut","value":"AsBitsMut<T>","parent":null,"children":[{"krate":0,"index":2407}],"decl_id":null,"docs":" Views a region as a mutable bit-slice.","sig":null,"attributes":[{"value":"* Views a region as a mutable bit-slice.\n\nThis trait is an analogue to the [`AsMut`] trait, in that it enables any type to\nprovide a mutable view of a bit slice.\n\nIt does not require an `AsMut<[T: BitStore]>` implementation, and a blanket\nimplementation for all such types is provided. This allows you to choose whether\nto implement only one of `AsBitsMut<T>` or `AsMut<[T]>`, and gain a bit-slice\nview with either choice.\n\n# Type Parameters\n\n- `T`: The underlying storage region.\n\n# Notes\n\nYou are not *forbidden* from creating multiple views with different element\ntypes to the same region, but doing so is likely to cause inconsistent and\nunsurprising behavior.\n\nRefrain from implementing this trait with more than one storage argument unless\nyou are sure that you can uphold the memory region requirements of all of them,\nand are aware of the behavior conflicts that may arise.\n\n[`AsMut`]: https://doc.rust-lang.org/core/convert/trait.AsMut.html\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":458583,"byte_end":459538,"line_start":303,"line_end":328,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":2407},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":459870,"byte_end":459881,"line_start":345,"line_end":345,"column_start":5,"column_end":16},"name":"as_bits_mut","qualname":"::view::AsBitsMut::as_bits_mut","value":"pub fn as_bits_mut<O>(&mut Self) -> &mut BitSlice<O, T> where O: BitOrder","parent":{"krate":0,"index":2405},"children":[],"decl_id":null,"docs":" Views memory as a slice of mutable bits.","sig":null,"attributes":[{"value":"/ Views memory as a slice of mutable bits.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":459583,"byte_end":459627,"line_start":332,"line_end":332,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":459629,"byte_end":459632,"line_start":333,"line_end":333,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":459634,"byte_end":459655,"line_start":334,"line_end":334,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":459657,"byte_end":459660,"line_start":335,"line_end":335,"column_start":2,"column_end":5}},{"value":"/ - `O`: The bit ordering used for the region.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":459662,"byte_end":459710,"line_start":336,"line_end":336,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":459712,"byte_end":459715,"line_start":337,"line_end":337,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":459717,"byte_end":459733,"line_start":338,"line_end":338,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":459735,"byte_end":459738,"line_start":339,"line_end":339,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`: The value that is providing a bit-slice view.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":459740,"byte_end":459804,"line_start":340,"line_end":340,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":459806,"byte_end":459809,"line_start":341,"line_end":341,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":459811,"byte_end":459824,"line_start":342,"line_end":342,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":459826,"byte_end":459829,"line_start":343,"line_end":343,"column_start":2,"column_end":5}},{"value":"/ A mutable view into some bits.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":459831,"byte_end":459865,"line_start":344,"line_end":344,"column_start":2,"column_end":36}}]},{"kind":"Mod","id":{"krate":0,"index":2419},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"boxed","qualname":"::boxed","value":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","parent":null,"children":[{"krate":0,"index":2420},{"krate":0,"index":2421},{"krate":0,"index":2424},{"krate":0,"index":2427},{"krate":0,"index":2428},{"krate":0,"index":2431},{"krate":0,"index":2432},{"krate":0,"index":2434},{"krate":0,"index":2437},{"krate":0,"index":2440},{"krate":0,"index":2443},{"krate":0,"index":2446},{"krate":0,"index":2447},{"krate":0,"index":2450},{"krate":0,"index":2453},{"krate":0,"index":2456},{"krate":0,"index":2459},{"krate":0,"index":2463},{"krate":0,"index":2481},{"krate":0,"index":2526},{"krate":0,"index":2644}],"decl_id":null,"docs":" A dynamically-allocated, fixed-size, buffer containing a `BitSlice` region.","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/lib.rs","byte_start":6327,"byte_end":6352,"line_start":171,"line_end":171,"column_start":1,"column_end":26}},{"value":"* A dynamically-allocated, fixed-size, buffer containing a `BitSlice` region.\n\nYou can read the standard library’s [`alloc::boxed` module documentation][std]\nhere.\n\nThis module defines the [`BitBox`] buffer, and all of its associated support\ncode.\n\n`BitBox` is equivalent to `Box<[bool]>`, in its operation and in its\nrelationship to the `BitSlice` and [`BitVec`] types. Most of the interesting\nwork to be done on a bit-sequence is implemented in `BitSlice`, to which\n`BitBox` dereferences, and the box container itself only exists to maintain\nwonership and provide some specializations that cannot safely be done on\n`BitSlice` alone.\n\nThere is almost never a reason to use this type, as it is a mixture of\n[`BitArray`]’s fixed width and [`BitVec`]’s heap allocation. You should only use\nit when you have a bit-sequence whose width is either unknowable at compile-time\nor inexpressable in `BitArray`, and are constructing the sequence in a `BitVec`\nbefore freezing it.\n\n[`BitArray`]: ../array/struct.BitArray.html\n[`BitBox`]: struct.BitBox.html\n[`BitSlice`]: ../slice/struct.BitSlice.html\n[`BitVec`]: ../vec/struct.BitVec.html\n[std]: https://doc.rust-lang.org/alloc/boxed\n!*/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":460405,"byte_end":461588,"line_start":1,"line_end":27,"column_start":1,"column_end":4}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":461590,"byte_end":461616,"line_start":29,"line_end":29,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":2459},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":464908,"byte_end":464914,"line_start":128,"line_end":128,"column_start":12,"column_end":18},"name":"BitBox","qualname":"::boxed::BitBox","value":"BitBox {  }","parent":null,"children":[{"krate":0,"index":2462}],"decl_id":null,"docs":" A frozen heap-allocated buffer of individual bits.","sig":null,"attributes":[{"value":"* A frozen heap-allocated buffer of individual bits.\n\nThis is essentially a [`BitVec`] that has frozen its allocation, and given up\nthe ability to change size. It is analagous to `Box<[bool]>`, and is written to\nbe as close as possible to drop-in replacable for it. This type contains almost\nno interesting behavior in its own right; it dereferences to [`BitSlice`] to\nmanipulate its contents, and it converts to and from `BitVec` for allocation\ncontrol.\n\nIf you know the length of your bit sequence at compile-time, and it is\nexpressible within the limits of [`BitArray`], you should prefer that type\ninstead. Large `BitArray`s can be `Box`ed normally as desired.\n\n# Documentation\n\nAll APIs that mirror something in the standard library will have an `Original`\nsection linking to the corresponding item. All APIs that have a different\nsignature or behavior than the original will have an `API Differences` section\nexplaining what has changed, and how to adapt your existing code to the change.\n\nThese sections look like this:\n\n# Original\n\n[`Box<[T]>`](https://doc.rust-lang.org/alloc/boxed/struct.Box.html)\n\n# API Differences\n\nThe buffer type `Box<[bool]>` has no type parameters. `BitBox<O, T>` has the\nsame two type parameters as `BitSlice<O, T>`. Otherwise, `BitBox` is able to\nimplement the full API surface of `Box<[bool]>`.\n\n# Behavior\n\nBecause `BitBox` is a fully-owned buffer, it is able to operate on its memory\nwithout concern for any other views that may alias. This enables it to\nspecialize some `BitSlice` behavior to be faster or more efficient.\n\n# Type Parameters\n\nThis takes the same two type parameters, `O: BitOrder` and `T: BitStore`, as\n`BitSlice`.\n\n# Safety\n\nLike `BitSlice`, `BitBox` is exactly equal in size to `Box<[bool]>`, and is also\nabsolutely representation-incompatible with it. You must never attempt to\ntype-cast between `Box<[bool]>` and `BitBox` in any way, nor attempt to modify\nthe memory value of a `BitBox` handle. Doing so will cause allocator and memory\nerrors in your program, likely inducing a panic.\n\nEverything in the `BitBox` public API, even the `unsafe` parts, are guaranteed\nto have no more unsafety than their equivalent items in the standard library.\nAll `unsafe` APIs will have documentation explicitly detailing what the API\nrequires you to uphold in order for it to function safely and correctly. All\nsafe APIs will do so themselves.\n\n# Performance\n\nIteration over the buffer is governed by the `BitSlice` characteristics on the\ntype parameter. You are generally better off using larger types when your buffer\nis a data collection rather than a specific I/O protocol buffer.\n\n# Macro Construction\n\nHeap allocation can only occur at runtime, but the [`bitbox!`] macro will\nconstruct an appropriate `BitSlice` buffer at compile-time, and at run-time,\nonly copy the buffer into a heap allocation.\n\n[`BitArray`]: ../array/struct.BitArray.html\n[`BitSlice`]: ../slice/struct.BitSlice.html\n[`BitVec`]: ../vec/struct.BitVec.html\n[`bitbox!`]: ../macro.bitbox.html\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":461861,"byte_end":464875,"line_start":53,"line_end":126,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":464876,"byte_end":464896,"line_start":127,"line_end":127,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":2466},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":465781,"byte_end":465794,"line_start":164,"line_end":164,"column_start":9,"column_end":22},"name":"from_bitslice","qualname":"<BitBox<O, T>>::from_bitslice","value":"pub fn from_bitslice(&BitSlice<O, T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Clones a `&BitSlice` into a `BitVec`.","sig":null,"attributes":[{"value":"/ Clones a `&BitSlice` into a `BitVec`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":465142,"byte_end":465183,"line_start":142,"line_end":142,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":465185,"byte_end":465188,"line_start":143,"line_end":143,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":465190,"byte_end":465204,"line_start":144,"line_end":144,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":465206,"byte_end":465209,"line_start":145,"line_end":145,"column_start":2,"column_end":5}},{"value":"/ [`<Box<T: Clone> as Clone>::clone`](https://doc.rust-lang.org/alloc/boxed/struct.Box.html#impl-Clone)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":465211,"byte_end":465316,"line_start":146,"line_end":146,"column_start":2,"column_end":107}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":465318,"byte_end":465321,"line_start":147,"line_end":147,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":465323,"byte_end":465336,"line_start":148,"line_end":148,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":465338,"byte_end":465341,"line_start":149,"line_end":149,"column_start":2,"column_end":5}},{"value":"/ This performs a direct element-wise copy from the source slice to the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":465343,"byte_end":465416,"line_start":150,"line_end":150,"column_start":2,"column_end":75}},{"value":"/ newly-allocated buffer, then sets the box to have the same starting bit","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":465418,"byte_end":465493,"line_start":151,"line_end":151,"column_start":2,"column_end":77}},{"value":"/ as the slice did. This allows for faster behavior.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":465495,"byte_end":465549,"line_start":152,"line_end":152,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":465551,"byte_end":465554,"line_start":153,"line_end":153,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":465556,"byte_end":465570,"line_start":154,"line_end":154,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":465572,"byte_end":465575,"line_start":155,"line_end":155,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":465577,"byte_end":465588,"line_start":156,"line_end":156,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":465590,"byte_end":465617,"line_start":157,"line_end":157,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":465619,"byte_end":465622,"line_start":158,"line_end":158,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 1, 1, 0, 1, 1];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":465624,"byte_end":465669,"line_start":159,"line_end":159,"column_start":2,"column_end":47}},{"value":"/ let bb = BitBox::from_bitslice(&bits[2 ..]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":465671,"byte_end":465719,"line_start":160,"line_end":160,"column_start":2,"column_end":50}},{"value":"/ assert_eq!(bb, bits[2 ..]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":465721,"byte_end":465752,"line_start":161,"line_end":161,"column_start":2,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":465754,"byte_end":465761,"line_start":162,"line_end":162,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":465763,"byte_end":465772,"line_start":163,"line_end":163,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2467},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":466561,"byte_end":466577,"line_start":196,"line_end":196,"column_start":9,"column_end":25},"name":"from_boxed_slice","qualname":"<BitBox<O, T>>::from_boxed_slice","value":"pub fn from_boxed_slice(Box<[T]>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts a `Box<[T]>` into a `BitBox`<O, T>` without copying its buffer.","sig":null,"attributes":[{"value":"/ Converts a `Box<[T]>` into a `BitBox`<O, T>` without copying its buffer.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":465876,"byte_end":465952,"line_start":168,"line_end":168,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":465954,"byte_end":465957,"line_start":169,"line_end":169,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":465959,"byte_end":465975,"line_start":170,"line_end":170,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":465977,"byte_end":465980,"line_start":171,"line_end":171,"column_start":2,"column_end":5}},{"value":"/ - `boxed`: A boxed slice to view as bits.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":465982,"byte_end":466027,"line_start":172,"line_end":172,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":466029,"byte_end":466032,"line_start":173,"line_end":173,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":466034,"byte_end":466047,"line_start":174,"line_end":174,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":466049,"byte_end":466052,"line_start":175,"line_end":175,"column_start":2,"column_end":5}},{"value":"/ A `BitBox` over the `boxed` buffer.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":466054,"byte_end":466093,"line_start":176,"line_end":176,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":466095,"byte_end":466098,"line_start":177,"line_end":177,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":466100,"byte_end":466112,"line_start":178,"line_end":178,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":466114,"byte_end":466117,"line_start":179,"line_end":179,"column_start":2,"column_end":5}},{"value":"/ This panics if `boxed` is too long to convert into a `BitBox`. See","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":466119,"byte_end":466189,"line_start":180,"line_end":180,"column_start":2,"column_end":72}},{"value":"/ [`BitSlice::MAX_ELTS`].","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":466191,"byte_end":466218,"line_start":181,"line_end":181,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":466220,"byte_end":466223,"line_start":182,"line_end":182,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":466225,"byte_end":466239,"line_start":183,"line_end":183,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":466241,"byte_end":466244,"line_start":184,"line_end":184,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":466246,"byte_end":466257,"line_start":185,"line_end":185,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":466259,"byte_end":466286,"line_start":186,"line_end":186,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":466288,"byte_end":466291,"line_start":187,"line_end":187,"column_start":2,"column_end":5}},{"value":"/ let boxed: Box<[u8]> = Box::new([0; 4]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":466293,"byte_end":466337,"line_start":188,"line_end":188,"column_start":2,"column_end":46}},{"value":"/ let bb = BitBox::<LocalBits, _>::from_boxed_slice(boxed);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":466339,"byte_end":466400,"line_start":189,"line_end":189,"column_start":2,"column_end":63}},{"value":"/ assert_eq!(bb, bits![0; 32]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":466402,"byte_end":466435,"line_start":190,"line_end":190,"column_start":2,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":466437,"byte_end":466444,"line_start":191,"line_end":191,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":466446,"byte_end":466449,"line_start":192,"line_end":192,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice::MAX_ELTS`]:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":466451,"byte_end":466478,"line_start":193,"line_end":193,"column_start":2,"column_end":29}},{"value":"/ ../slice/struct.BitSlice.html#associatedconstant.MAX_ELTS","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":466480,"byte_end":466541,"line_start":194,"line_end":194,"column_start":2,"column_end":63}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":466543,"byte_end":466552,"line_start":195,"line_end":195,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2468},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":467608,"byte_end":467628,"line_start":228,"line_end":228,"column_start":9,"column_end":29},"name":"try_from_boxed_slice","qualname":"<BitBox<O, T>>::try_from_boxed_slice","value":"pub fn try_from_boxed_slice(Box<[T]>) -> Result<Self, Box<[T]>>","parent":null,"children":[],"decl_id":null,"docs":" Converts a `Box<[T]>` into a `BitBox<O, T>` without copying its buffer.","sig":null,"attributes":[{"value":"/ Converts a `Box<[T]>` into a `BitBox<O, T>` without copying its buffer.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":466711,"byte_end":466786,"line_start":201,"line_end":201,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":466788,"byte_end":466791,"line_start":202,"line_end":202,"column_start":2,"column_end":5}},{"value":"/ This method takes ownership of a memory buffer and enables it to be used","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":466793,"byte_end":466869,"line_start":203,"line_end":203,"column_start":2,"column_end":78}},{"value":"/ as a bit-box. Because `Box<[T]>` can be longer than `BitBox`es, this is","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":466871,"byte_end":466946,"line_start":204,"line_end":204,"column_start":2,"column_end":77}},{"value":"/ a fallible method, and the original box will be returned if it cannot be","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":466948,"byte_end":467024,"line_start":205,"line_end":205,"column_start":2,"column_end":78}},{"value":"/ converted.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":467026,"byte_end":467040,"line_start":206,"line_end":206,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":467042,"byte_end":467045,"line_start":207,"line_end":207,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":467047,"byte_end":467063,"line_start":208,"line_end":208,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":467065,"byte_end":467068,"line_start":209,"line_end":209,"column_start":2,"column_end":5}},{"value":"/ - `boxed`: Some boxed slice of memory, to be viewed as bits.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":467070,"byte_end":467134,"line_start":210,"line_end":210,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":467136,"byte_end":467139,"line_start":211,"line_end":211,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":467141,"byte_end":467154,"line_start":212,"line_end":212,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":467156,"byte_end":467159,"line_start":213,"line_end":213,"column_start":2,"column_end":5}},{"value":"/ If `boxed` is short enough to be viewed as a `BitBox`, then this returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":467161,"byte_end":467237,"line_start":214,"line_end":214,"column_start":2,"column_end":78}},{"value":"/ a `BitBox` over the `boxed` buffer. If `boxed` is too long, then this","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":467239,"byte_end":467312,"line_start":215,"line_end":215,"column_start":2,"column_end":75}},{"value":"/ returns `boxed` unmodified.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":467314,"byte_end":467345,"line_start":216,"line_end":216,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":467347,"byte_end":467350,"line_start":217,"line_end":217,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":467352,"byte_end":467366,"line_start":218,"line_end":218,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":467368,"byte_end":467371,"line_start":219,"line_end":219,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":467373,"byte_end":467384,"line_start":220,"line_end":220,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":467386,"byte_end":467413,"line_start":221,"line_end":221,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":467415,"byte_end":467418,"line_start":222,"line_end":222,"column_start":2,"column_end":5}},{"value":"/ let boxed: Box<[u8]> = Box::new([0; 4]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":467420,"byte_end":467464,"line_start":223,"line_end":223,"column_start":2,"column_end":46}},{"value":"/ let bb = BitBox::<LocalBits, _>::try_from_boxed_slice(boxed).unwrap();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":467466,"byte_end":467540,"line_start":224,"line_end":224,"column_start":2,"column_end":76}},{"value":"/ assert_eq!(bb[..], bits![0; 32]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":467542,"byte_end":467579,"line_start":225,"line_end":225,"column_start":2,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":467581,"byte_end":467588,"line_start":226,"line_end":226,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":467590,"byte_end":467599,"line_start":227,"line_end":227,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2469},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":468517,"byte_end":468533,"line_start":271,"line_end":271,"column_start":9,"column_end":25},"name":"into_boxed_slice","qualname":"<BitBox<O, T>>::into_boxed_slice","value":"pub fn into_boxed_slice(Self) -> Box<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Converts the slice back into an ordinary slice of memory elements.","sig":null,"attributes":[{"value":"/ Converts the slice back into an ordinary slice of memory elements.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":467998,"byte_end":468068,"line_start":248,"line_end":248,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":468070,"byte_end":468073,"line_start":249,"line_end":249,"column_start":2,"column_end":5}},{"value":"/ This does not affect the slice’s buffer, only the handle used to control","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":468075,"byte_end":468153,"line_start":250,"line_end":250,"column_start":2,"column_end":78}},{"value":"/ it.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":468155,"byte_end":468162,"line_start":251,"line_end":251,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":468164,"byte_end":468167,"line_start":252,"line_end":252,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":468169,"byte_end":468185,"line_start":253,"line_end":253,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":468187,"byte_end":468190,"line_start":254,"line_end":254,"column_start":2,"column_end":5}},{"value":"/ - `self`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":468192,"byte_end":468204,"line_start":255,"line_end":255,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":468206,"byte_end":468209,"line_start":256,"line_end":256,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":468211,"byte_end":468224,"line_start":257,"line_end":257,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":468226,"byte_end":468229,"line_start":258,"line_end":258,"column_start":2,"column_end":5}},{"value":"/ An ordinary boxed slice containing all of the bit-slice’s memory buffer.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":468231,"byte_end":468309,"line_start":259,"line_end":259,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":468311,"byte_end":468314,"line_start":260,"line_end":260,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":468316,"byte_end":468330,"line_start":261,"line_end":261,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":468332,"byte_end":468335,"line_start":262,"line_end":262,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":468337,"byte_end":468348,"line_start":263,"line_end":263,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":468350,"byte_end":468377,"line_start":264,"line_end":264,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":468379,"byte_end":468382,"line_start":265,"line_end":265,"column_start":2,"column_end":5}},{"value":"/ let bb = bitbox![0; 5];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":468384,"byte_end":468411,"line_start":266,"line_end":266,"column_start":2,"column_end":29}},{"value":"/ let boxed = bb.into_boxed_slice();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":468413,"byte_end":468451,"line_start":267,"line_end":267,"column_start":2,"column_end":40}},{"value":"/ assert_eq!(boxed[..], [0][..]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":468453,"byte_end":468488,"line_start":268,"line_end":268,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":468490,"byte_end":468497,"line_start":269,"line_end":269,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":468499,"byte_end":468508,"line_start":270,"line_end":270,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2470},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":469086,"byte_end":469097,"line_start":294,"line_end":294,"column_start":9,"column_end":20},"name":"as_bitslice","qualname":"<BitBox<O, T>>::as_bitslice","value":"pub fn as_bitslice(&Self) -> &BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Views the buffer’s contents as a `BitSlice`.","sig":null,"attributes":[{"value":"/ Views the buffer’s contents as a `BitSlice`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":468649,"byte_end":468699,"line_start":276,"line_end":276,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":468701,"byte_end":468704,"line_start":277,"line_end":277,"column_start":2,"column_end":5}},{"value":"/ This is equivalent to `&bb[..]`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":468706,"byte_end":468742,"line_start":278,"line_end":278,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":468744,"byte_end":468747,"line_start":279,"line_end":279,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":468749,"byte_end":468763,"line_start":280,"line_end":280,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":468765,"byte_end":468768,"line_start":281,"line_end":281,"column_start":2,"column_end":5}},{"value":"/ [`<Box<[T]> as AsRef<[T]>>::as_ref`](https://doc.rust-lang.org/alloc/boxed/struct.Box.html#impl-AsRef%3CT%3E)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":468770,"byte_end":468883,"line_start":282,"line_end":282,"column_start":2,"column_end":115}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":468885,"byte_end":468888,"line_start":283,"line_end":283,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":468890,"byte_end":468904,"line_start":284,"line_end":284,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":468906,"byte_end":468909,"line_start":285,"line_end":285,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":468911,"byte_end":468922,"line_start":286,"line_end":286,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":468924,"byte_end":468951,"line_start":287,"line_end":287,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":468953,"byte_end":468956,"line_start":288,"line_end":288,"column_start":2,"column_end":5}},{"value":"/ let bb = bitbox![0, 1, 1, 0];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":468958,"byte_end":468991,"line_start":289,"line_end":289,"column_start":2,"column_end":35}},{"value":"/ let bits = bb.as_bitslice();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":468993,"byte_end":469025,"line_start":290,"line_end":290,"column_start":2,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":469027,"byte_end":469034,"line_start":291,"line_end":291,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":469036,"byte_end":469045,"line_start":292,"line_end":292,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":469047,"byte_end":469077,"line_start":293,"line_end":293,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2471},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":469634,"byte_end":469649,"line_start":317,"line_end":317,"column_start":9,"column_end":24},"name":"as_mut_bitslice","qualname":"<BitBox<O, T>>::as_mut_bitslice","value":"pub fn as_mut_bitslice(&mut Self) -> &mut BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Extracts a mutable bit-slice of the entire vector.","sig":null,"attributes":[{"value":"/ Extracts a mutable bit-slice of the entire vector.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":469165,"byte_end":469219,"line_start":298,"line_end":298,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":469221,"byte_end":469224,"line_start":299,"line_end":299,"column_start":2,"column_end":5}},{"value":"/ Equivalent to `&mut bv[..]`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":469226,"byte_end":469258,"line_start":300,"line_end":300,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":469260,"byte_end":469263,"line_start":301,"line_end":301,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":469265,"byte_end":469279,"line_start":302,"line_end":302,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":469281,"byte_end":469284,"line_start":303,"line_end":303,"column_start":2,"column_end":5}},{"value":"/ [`<Box<[T]> as AsMut<[T]>>::as_mut`](https://doc.rust-lang.org/alloc/boxed/struct.Box.html#impl-AsMut%3CT%3E)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":469286,"byte_end":469399,"line_start":304,"line_end":304,"column_start":2,"column_end":115}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":469401,"byte_end":469404,"line_start":305,"line_end":305,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":469406,"byte_end":469420,"line_start":306,"line_end":306,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":469422,"byte_end":469425,"line_start":307,"line_end":307,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":469427,"byte_end":469438,"line_start":308,"line_end":308,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":469440,"byte_end":469467,"line_start":309,"line_end":309,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":469469,"byte_end":469472,"line_start":310,"line_end":310,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1, 0, 1];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":469474,"byte_end":469511,"line_start":311,"line_end":311,"column_start":2,"column_end":39}},{"value":"/ let bits = bv.as_mut_bitslice();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":469513,"byte_end":469549,"line_start":312,"line_end":312,"column_start":2,"column_end":38}},{"value":"/ bits.set(0, true);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":469551,"byte_end":469573,"line_start":313,"line_end":313,"column_start":2,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":469575,"byte_end":469582,"line_start":314,"line_end":314,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":469584,"byte_end":469593,"line_start":315,"line_end":315,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":469595,"byte_end":469625,"line_start":316,"line_end":316,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2472},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":470344,"byte_end":470352,"line_start":344,"line_end":344,"column_start":9,"column_end":17},"name":"as_slice","qualname":"<BitBox<O, T>>::as_slice","value":"pub fn as_slice(&Self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" Extracts an element slice containing the entire box.","sig":null,"attributes":[{"value":"/ Extracts an element slice containing the entire box.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":469725,"byte_end":469781,"line_start":321,"line_end":321,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":469783,"byte_end":469786,"line_start":322,"line_end":322,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":469788,"byte_end":469802,"line_start":323,"line_end":323,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":469804,"byte_end":469807,"line_start":324,"line_end":324,"column_start":2,"column_end":5}},{"value":"/ [`<Box<[T]> as AsRef<[T]>>::as_ref`](https://doc.rust-lang.org/alloc/boxed/struct.Box.html#impl-AsRef%3CT%3E)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":469809,"byte_end":469922,"line_start":325,"line_end":325,"column_start":2,"column_end":115}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":469924,"byte_end":469927,"line_start":326,"line_end":326,"column_start":2,"column_end":5}},{"value":"/ # Analogue","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":469929,"byte_end":469943,"line_start":327,"line_end":327,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":469945,"byte_end":469948,"line_start":328,"line_end":328,"column_start":2,"column_end":5}},{"value":"/ See [`as_bitslice`] for a `&BitBox -> &BitSlice` transform.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":469950,"byte_end":470013,"line_start":329,"line_end":329,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":470015,"byte_end":470018,"line_start":330,"line_end":330,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":470020,"byte_end":470034,"line_start":331,"line_end":331,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":470036,"byte_end":470039,"line_start":332,"line_end":332,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":470041,"byte_end":470052,"line_start":333,"line_end":333,"column_start":2,"column_end":13}},{"value":"/ # #[cfg(feature = \"std\")] {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":470054,"byte_end":470085,"line_start":334,"line_end":334,"column_start":2,"column_end":33}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":470087,"byte_end":470114,"line_start":335,"line_end":335,"column_start":2,"column_end":29}},{"value":"/ use std::io::{self, Write};","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":470116,"byte_end":470147,"line_start":336,"line_end":336,"column_start":2,"column_end":33}},{"value":"/ let buffer = bitbox![Msb0, u8; 0, 1, 0, 1, 1, 0, 0, 0];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":470149,"byte_end":470208,"line_start":337,"line_end":337,"column_start":2,"column_end":61}},{"value":"/ io::sink().write(buffer.as_slice()).unwrap();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":470210,"byte_end":470259,"line_start":338,"line_end":338,"column_start":2,"column_end":51}},{"value":"/ # }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":470261,"byte_end":470268,"line_start":339,"line_end":339,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":470270,"byte_end":470277,"line_start":340,"line_end":340,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":470279,"byte_end":470282,"line_start":341,"line_end":341,"column_start":2,"column_end":5}},{"value":"/ [`as_bitslice`]: #method.as_bitslice","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":470284,"byte_end":470324,"line_start":342,"line_end":342,"column_start":2,"column_end":42}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":470326,"byte_end":470335,"line_start":343,"line_end":343,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2473},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":471155,"byte_end":471167,"line_start":373,"line_end":373,"column_start":9,"column_end":21},"name":"as_mut_slice","qualname":"<BitBox<O, T>>::as_mut_slice","value":"pub fn as_mut_slice(&mut Self) -> &mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Extracts a mutable slice of the entire box.","sig":null,"attributes":[{"value":"/ Extracts a mutable slice of the entire box.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":470523,"byte_end":470570,"line_start":350,"line_end":350,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":470572,"byte_end":470575,"line_start":351,"line_end":351,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":470577,"byte_end":470591,"line_start":352,"line_end":352,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":470593,"byte_end":470596,"line_start":353,"line_end":353,"column_start":2,"column_end":5}},{"value":"/ [`<Box<[T]> as AsMut<[T]>>::as_mut`](https://doc.rust-lang.org/alloc/boxed/struct.Box.html#impl-AsMut%3CT%3E)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":470598,"byte_end":470711,"line_start":354,"line_end":354,"column_start":2,"column_end":115}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":470713,"byte_end":470716,"line_start":355,"line_end":355,"column_start":2,"column_end":5}},{"value":"/ # Analogue","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":470718,"byte_end":470732,"line_start":356,"line_end":356,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":470734,"byte_end":470737,"line_start":357,"line_end":357,"column_start":2,"column_end":5}},{"value":"/ See [`as_mut_bitslice`] for a `&mut BitBox -> &mut BitSlice` transform.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":470739,"byte_end":470814,"line_start":358,"line_end":358,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":470816,"byte_end":470819,"line_start":359,"line_end":359,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":470821,"byte_end":470835,"line_start":360,"line_end":360,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":470837,"byte_end":470840,"line_start":361,"line_end":361,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":470842,"byte_end":470853,"line_start":362,"line_end":362,"column_start":2,"column_end":13}},{"value":"/ # #[cfg(feature = \"std\")] {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":470855,"byte_end":470886,"line_start":363,"line_end":363,"column_start":2,"column_end":33}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":470888,"byte_end":470915,"line_start":364,"line_end":364,"column_start":2,"column_end":29}},{"value":"/ use std::io::{self, Read};","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":470917,"byte_end":470947,"line_start":365,"line_end":365,"column_start":2,"column_end":32}},{"value":"/ let mut buffer = bitbox![Msb0, u8; 0; 24];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":470949,"byte_end":470995,"line_start":366,"line_end":366,"column_start":2,"column_end":48}},{"value":"/ io::repeat(0b101).read_exact(buffer.as_mut_slice()).unwrap();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":470997,"byte_end":471062,"line_start":367,"line_end":367,"column_start":2,"column_end":67}},{"value":"/ # }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":471064,"byte_end":471071,"line_start":368,"line_end":368,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":471073,"byte_end":471080,"line_start":369,"line_end":369,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":471082,"byte_end":471085,"line_start":370,"line_end":370,"column_start":2,"column_end":5}},{"value":"/ [`as_mut_bitslice`]: #method.as_mut_bitslice","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":471087,"byte_end":471135,"line_start":371,"line_end":371,"column_start":2,"column_end":50}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":471137,"byte_end":471146,"line_start":372,"line_end":372,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2474},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":472128,"byte_end":472145,"line_start":402,"line_end":402,"column_start":9,"column_end":26},"name":"set_uninitialized","qualname":"<BitBox<O, T>>::set_uninitialized","value":"pub fn set_uninitialized(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Sets the uninitialized bits of the vector to a fixed value.","sig":null,"attributes":[{"value":"/ Sets the uninitialized bits of the vector to a fixed value.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":471348,"byte_end":471411,"line_start":379,"line_end":379,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":471413,"byte_end":471416,"line_start":380,"line_end":380,"column_start":2,"column_end":5}},{"value":"/ This method modifies all bits in the allocated buffer that are outside","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":471418,"byte_end":471492,"line_start":381,"line_end":381,"column_start":2,"column_end":76}},{"value":"/ the `self.as_bitslice()` view so that they have a consistent value. This","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":471494,"byte_end":471570,"line_start":382,"line_end":382,"column_start":2,"column_end":78}},{"value":"/ can be used to zero the uninitialized memory so that when viewed as a","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":471572,"byte_end":471645,"line_start":383,"line_end":383,"column_start":2,"column_end":75}},{"value":"/ raw memory slice, bits outside the live region have a predictable value.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":471647,"byte_end":471723,"line_start":384,"line_end":384,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":471725,"byte_end":471728,"line_start":385,"line_end":385,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":471730,"byte_end":471744,"line_start":386,"line_end":386,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":471746,"byte_end":471749,"line_start":387,"line_end":387,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":471751,"byte_end":471762,"line_start":388,"line_end":388,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":471764,"byte_end":471791,"line_start":389,"line_end":389,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":471793,"byte_end":471796,"line_start":390,"line_end":390,"column_start":2,"column_end":5}},{"value":"/ let mut bb = BitBox::new(&220u8.view_bits::<Lsb0>()[.. 4]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":471798,"byte_end":471861,"line_start":391,"line_end":391,"column_start":2,"column_end":65}},{"value":"/ assert_eq!(bb.count_ones(), 2);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":471863,"byte_end":471898,"line_start":392,"line_end":392,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(bb.as_slice(), &[220u8]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":471900,"byte_end":471940,"line_start":393,"line_end":393,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":471942,"byte_end":471945,"line_start":394,"line_end":394,"column_start":2,"column_end":5}},{"value":"/ bb.set_uninitialized(false);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":471947,"byte_end":471979,"line_start":395,"line_end":395,"column_start":2,"column_end":34}},{"value":"/ assert_eq!(bb.as_slice(), &[12u8]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":471981,"byte_end":472020,"line_start":396,"line_end":396,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":472022,"byte_end":472025,"line_start":397,"line_end":397,"column_start":2,"column_end":5}},{"value":"/ bb.set_uninitialized(true);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":472027,"byte_end":472058,"line_start":398,"line_end":398,"column_start":2,"column_end":33}},{"value":"/ assert_eq!(bb.as_slice(), &[!3u8]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":472060,"byte_end":472099,"line_start":399,"line_end":399,"column_start":2,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":472101,"byte_end":472108,"line_start":400,"line_end":400,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":472110,"byte_end":472119,"line_start":401,"line_end":401,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2517},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":474819,"byte_end":474822,"line_start":49,"line_end":49,"column_start":9,"column_end":12},"name":"new","qualname":"<BitBox<O, T>>::new","value":"pub fn new(&BitSlice<O, T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocates memory on the heap and copies `x` into it.","sig":null,"attributes":[{"value":"/ Allocates memory on the heap and copies `x` into it.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":474133,"byte_end":474189,"line_start":25,"line_end":25,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":474191,"byte_end":474194,"line_start":26,"line_end":26,"column_start":2,"column_end":5}},{"value":"/ This doesn’t actually allocate if `x` is zero-length.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":474196,"byte_end":474255,"line_start":27,"line_end":27,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":474257,"byte_end":474260,"line_start":28,"line_end":28,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":474262,"byte_end":474276,"line_start":29,"line_end":29,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":474278,"byte_end":474281,"line_start":30,"line_end":30,"column_start":2,"column_end":5}},{"value":"/ [`Box::new`](https://doc.rust-lang.org/alloc/boxed/struct.Box.html#method.new)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":474283,"byte_end":474365,"line_start":31,"line_end":31,"column_start":2,"column_end":84}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":474367,"byte_end":474370,"line_start":32,"line_end":32,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":474372,"byte_end":474393,"line_start":33,"line_end":33,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":474395,"byte_end":474398,"line_start":34,"line_end":34,"column_start":2,"column_end":5}},{"value":"/ `Box::<[T]>::new` does not exist, because `new` cannot take unsized","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":474400,"byte_end":474471,"line_start":35,"line_end":35,"column_start":2,"column_end":73}},{"value":"/ types by value. Instead, this takes a slice reference, and boxes the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":474473,"byte_end":474545,"line_start":36,"line_end":36,"column_start":2,"column_end":74}},{"value":"/ referent slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":474547,"byte_end":474566,"line_start":37,"line_end":37,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":474568,"byte_end":474571,"line_start":38,"line_end":38,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":474573,"byte_end":474587,"line_start":39,"line_end":39,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":474589,"byte_end":474592,"line_start":40,"line_end":40,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":474594,"byte_end":474605,"line_start":41,"line_end":41,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":474607,"byte_end":474634,"line_start":42,"line_end":42,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":474636,"byte_end":474639,"line_start":43,"line_end":43,"column_start":2,"column_end":5}},{"value":"/ let boxed = BitBox::new(bits![0; 5]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":474641,"byte_end":474682,"line_start":44,"line_end":44,"column_start":2,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":474684,"byte_end":474691,"line_start":45,"line_end":45,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":474693,"byte_end":474710,"line_start":46,"line_end":46,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":474712,"byte_end":474742,"line_start":47,"line_end":47,"column_start":2,"column_end":32}},{"value":"deprecated(since = \"0.18.0\", note = \"Prefer `::from_bitslice`\")","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":474744,"byte_end":474810,"line_start":48,"line_end":48,"column_start":2,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2518},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":475305,"byte_end":475308,"line_start":66,"line_end":66,"column_start":9,"column_end":12},"name":"pin","qualname":"<BitBox<O, T>>::pin","value":"pub fn pin(&BitSlice<O, T>) -> Pin<Self> where O: Unpin, T: Unpin","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Pin<BitBox<O, T>>`.","sig":null,"attributes":[{"value":"/ Constructs a new `Pin<BitBox<O, T>>`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":474883,"byte_end":474924,"line_start":53,"line_end":53,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":474926,"byte_end":474929,"line_start":54,"line_end":54,"column_start":2,"column_end":5}},{"value":"/ `BitSlice` is always `Unpin`, so this has no actual immobility effect.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":474931,"byte_end":475005,"line_start":55,"line_end":55,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":475007,"byte_end":475010,"line_start":56,"line_end":56,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":475012,"byte_end":475026,"line_start":57,"line_end":57,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":475028,"byte_end":475031,"line_start":58,"line_end":58,"column_start":2,"column_end":5}},{"value":"/ [`Box::pin`](https://doc.rust-lang.org/alloc/boxed/struct.Box.html#method.pin)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":475033,"byte_end":475115,"line_start":59,"line_end":59,"column_start":2,"column_end":84}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":475117,"byte_end":475120,"line_start":60,"line_end":60,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":475122,"byte_end":475143,"line_start":61,"line_end":61,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":475145,"byte_end":475148,"line_start":62,"line_end":62,"column_start":2,"column_end":5}},{"value":"/ As with `::new`, this only exists on `Box` when `T` is not unsized. This","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":475150,"byte_end":475226,"line_start":63,"line_end":63,"column_start":2,"column_end":78}},{"value":"/ takes a slice reference, and pins the referent slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":475228,"byte_end":475285,"line_start":64,"line_end":64,"column_start":2,"column_end":59}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":475287,"byte_end":475296,"line_start":65,"line_end":65,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2519},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":476614,"byte_end":476622,"line_start":108,"line_end":108,"column_start":16,"column_end":24},"name":"from_raw","qualname":"<BitBox<O, T>>::from_raw","value":"pub unsafe fn from_raw(*mut BitSlice<O, T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a box from a raw pointer.","sig":null,"attributes":[{"value":"/ Constructs a box from a raw pointer.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":475426,"byte_end":475466,"line_start":74,"line_end":74,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":475468,"byte_end":475471,"line_start":75,"line_end":75,"column_start":2,"column_end":5}},{"value":"/ After calling this function, the raw pointer is owned by the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":475473,"byte_end":475537,"line_start":76,"line_end":76,"column_start":2,"column_end":66}},{"value":"/ resulting `BitBox`. Specifically, the `Box` destructor will free the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":475539,"byte_end":475611,"line_start":77,"line_end":77,"column_start":2,"column_end":74}},{"value":"/ allocated memory. For this to be safe, the memory must have been","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":475613,"byte_end":475681,"line_start":78,"line_end":78,"column_start":2,"column_end":70}},{"value":"/ allocated in accordance with the [memory layout] used by `BitBox`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":475683,"byte_end":475753,"line_start":79,"line_end":79,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":475755,"byte_end":475758,"line_start":80,"line_end":80,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":475760,"byte_end":475774,"line_start":81,"line_end":81,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":475776,"byte_end":475779,"line_start":82,"line_end":82,"column_start":2,"column_end":5}},{"value":"/ [`Box::from_raw`](https://doc.rust-lang.org/alloc/boxed/struct.Box.html#method.from_raw)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":475781,"byte_end":475873,"line_start":83,"line_end":83,"column_start":2,"column_end":94}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":475875,"byte_end":475878,"line_start":84,"line_end":84,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":475880,"byte_end":475892,"line_start":85,"line_end":85,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":475894,"byte_end":475897,"line_start":86,"line_end":86,"column_start":2,"column_end":5}},{"value":"/ This function is unsafe because improper use may lead to","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":475899,"byte_end":475959,"line_start":87,"line_end":87,"column_start":2,"column_end":62}},{"value":"/ memory problems. For example, a double-free may occur if the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":475961,"byte_end":476025,"line_start":88,"line_end":88,"column_start":2,"column_end":66}},{"value":"/ function is called twice on the same raw pointer.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":476027,"byte_end":476080,"line_start":89,"line_end":89,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":476082,"byte_end":476085,"line_start":90,"line_end":90,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":476087,"byte_end":476101,"line_start":91,"line_end":91,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":476103,"byte_end":476106,"line_start":92,"line_end":92,"column_start":2,"column_end":5}},{"value":"/ Recreate a `BitBox` which was previously converted to a raw pointer","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":476108,"byte_end":476179,"line_start":93,"line_end":93,"column_start":2,"column_end":73}},{"value":"/ using [`BitBox::into_raw`]:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":476181,"byte_end":476212,"line_start":94,"line_end":94,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":476214,"byte_end":476217,"line_start":95,"line_end":95,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":476219,"byte_end":476230,"line_start":96,"line_end":96,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":476232,"byte_end":476259,"line_start":97,"line_end":97,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":476261,"byte_end":476264,"line_start":98,"line_end":98,"column_start":2,"column_end":5}},{"value":"/ let x = bitbox![0; 10];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":476266,"byte_end":476293,"line_start":99,"line_end":99,"column_start":2,"column_end":29}},{"value":"/ let ptr = BitBox::into_raw(x);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":476295,"byte_end":476329,"line_start":100,"line_end":100,"column_start":2,"column_end":36}},{"value":"/ let x = unsafe { BitBox::from_raw(ptr) };","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":476331,"byte_end":476376,"line_start":101,"line_end":101,"column_start":2,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":476378,"byte_end":476385,"line_start":102,"line_end":102,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":476387,"byte_end":476390,"line_start":103,"line_end":103,"column_start":2,"column_end":5}},{"value":"/ [memory layout]: https://doc.rust-lang.org/alloc/boxed/index.html#memory-layout","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":476392,"byte_end":476475,"line_start":104,"line_end":104,"column_start":2,"column_end":85}},{"value":"/ [`Layout`]: https://doc.rust-lang.org/alloc/struct.Layout.html","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":476477,"byte_end":476543,"line_start":105,"line_end":105,"column_start":2,"column_end":68}},{"value":"/ [`BitBox::into_raw`]: #method.into_raw","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":476545,"byte_end":476587,"line_start":106,"line_end":106,"column_start":2,"column_end":44}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":476589,"byte_end":476598,"line_start":107,"line_end":107,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2521},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":478042,"byte_end":478050,"line_start":148,"line_end":148,"column_start":9,"column_end":17},"name":"into_raw","qualname":"<BitBox<O, T>>::into_raw","value":"pub fn into_raw(Self) -> *mut BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `BitBox`, returning a wrapped raw pointer.","sig":null,"attributes":[{"value":"/ Consumes the `BitBox`, returning a wrapped raw pointer.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":476760,"byte_end":476819,"line_start":114,"line_end":114,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":476821,"byte_end":476824,"line_start":115,"line_end":115,"column_start":2,"column_end":5}},{"value":"/ The pointer will be properly aligned and non-null.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":476826,"byte_end":476880,"line_start":116,"line_end":116,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":476882,"byte_end":476885,"line_start":117,"line_end":117,"column_start":2,"column_end":5}},{"value":"/ After calling this function, the caller is responsible for the memory","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":476887,"byte_end":476960,"line_start":118,"line_end":118,"column_start":2,"column_end":75}},{"value":"/ previously managed by the `BitBox`. In particular, the caller should","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":476962,"byte_end":477034,"line_start":119,"line_end":119,"column_start":2,"column_end":74}},{"value":"/ properly release the memory by converting the pointer back into a","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":477036,"byte_end":477105,"line_start":120,"line_end":120,"column_start":2,"column_end":71}},{"value":"/ `BitBox` with the [`BitBox::from_raw`] function, allowing the `BitBox`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":477107,"byte_end":477181,"line_start":121,"line_end":121,"column_start":2,"column_end":76}},{"value":"/ destructor to perform the cleanup.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":477183,"byte_end":477221,"line_start":122,"line_end":122,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":477223,"byte_end":477226,"line_start":123,"line_end":123,"column_start":2,"column_end":5}},{"value":"/ Note: this is an associated function, which means that you have to call","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":477228,"byte_end":477303,"line_start":124,"line_end":124,"column_start":2,"column_end":77}},{"value":"/ it as `BitBox::into_raw(b)` instead of `b.into_raw()`. This is to match","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":477305,"byte_end":477380,"line_start":125,"line_end":125,"column_start":2,"column_end":77}},{"value":"/ layout with the standard library’s `Box` API; there will never be a name","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":477382,"byte_end":477460,"line_start":126,"line_end":126,"column_start":2,"column_end":78}},{"value":"/ conflict with `BitSlice`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":477462,"byte_end":477491,"line_start":127,"line_end":127,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":477493,"byte_end":477496,"line_start":128,"line_end":128,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":477498,"byte_end":477512,"line_start":129,"line_end":129,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":477514,"byte_end":477517,"line_start":130,"line_end":130,"column_start":2,"column_end":5}},{"value":"/ [`Box::into_raw`](https://doc.rust-lang.org/alloc/boxed/struct.Box.html#method.into_raw)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":477519,"byte_end":477611,"line_start":131,"line_end":131,"column_start":2,"column_end":94}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":477613,"byte_end":477616,"line_start":132,"line_end":132,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":477618,"byte_end":477632,"line_start":133,"line_end":133,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":477634,"byte_end":477637,"line_start":134,"line_end":134,"column_start":2,"column_end":5}},{"value":"/ Converting the raw pointer back into a `BitBox` with","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":477639,"byte_end":477695,"line_start":135,"line_end":135,"column_start":2,"column_end":58}},{"value":"/ [`BitBox::from_raw`] for automatic cleanup:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":477697,"byte_end":477744,"line_start":136,"line_end":136,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":477746,"byte_end":477749,"line_start":137,"line_end":137,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":477751,"byte_end":477762,"line_start":138,"line_end":138,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":477764,"byte_end":477791,"line_start":139,"line_end":139,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":477793,"byte_end":477796,"line_start":140,"line_end":140,"column_start":2,"column_end":5}},{"value":"/ let b = BitBox::new(bits![Msb0, u32; 0; 32]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":477798,"byte_end":477847,"line_start":141,"line_end":141,"column_start":2,"column_end":51}},{"value":"/ let ptr = BitBox::into_raw(b);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":477849,"byte_end":477883,"line_start":142,"line_end":142,"column_start":2,"column_end":36}},{"value":"/ let b = unsafe { BitBox::from_raw(ptr) };","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":477885,"byte_end":477930,"line_start":143,"line_end":143,"column_start":2,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":477932,"byte_end":477939,"line_start":144,"line_end":144,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":477941,"byte_end":477944,"line_start":145,"line_end":145,"column_start":2,"column_end":5}},{"value":"/ [`BitBox::from_raw`]: #method.from_raw","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":477946,"byte_end":477988,"line_start":146,"line_end":146,"column_start":2,"column_end":44}},{"value":"inline(always)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":478017,"byte_end":478031,"line_start":147,"line_end":147,"column_start":29,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":2522},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":479426,"byte_end":479430,"line_start":187,"line_end":187,"column_start":9,"column_end":13},"name":"leak","qualname":"<BitBox<O, T>>::leak","value":"pub fn leak<'a>(Self) -> &'a mut BitSlice<O, T> where T: 'a","parent":null,"children":[],"decl_id":null,"docs":" Consumes and leaks the `BitBox`, returning a mutable reference,\n `&'a mut BitSlice<O, T>`. Note that the memory region `[T]` must outlive\n the chosen lifetime `'a`.","sig":null,"attributes":[{"value":"/ Consumes and leaks the `BitBox`, returning a mutable reference,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":478106,"byte_end":478173,"line_start":152,"line_end":152,"column_start":2,"column_end":69}},{"value":"/ `&'a mut BitSlice<O, T>`. Note that the memory region `[T]` must outlive","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":478175,"byte_end":478251,"line_start":153,"line_end":153,"column_start":2,"column_end":78}},{"value":"/ the chosen lifetime `'a`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":478253,"byte_end":478282,"line_start":154,"line_end":154,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":478284,"byte_end":478287,"line_start":155,"line_end":155,"column_start":2,"column_end":5}},{"value":"/ This function is mainly useful for bit regions that live for the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":478289,"byte_end":478357,"line_start":156,"line_end":156,"column_start":2,"column_end":70}},{"value":"/ remainder of the program’s life. Dropping the returned reference will","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":478359,"byte_end":478434,"line_start":157,"line_end":157,"column_start":2,"column_end":75}},{"value":"/ cause a memory leak. If this is not acceptable, the reference should","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":478436,"byte_end":478508,"line_start":158,"line_end":158,"column_start":2,"column_end":74}},{"value":"/ first be wrapped with the [`BitBox::from_raw`] function, producing a","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":478510,"byte_end":478582,"line_start":159,"line_end":159,"column_start":2,"column_end":74}},{"value":"/ `BitBox`. This `BitBox` can then be dropped which will properly","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":478584,"byte_end":478651,"line_start":160,"line_end":160,"column_start":2,"column_end":69}},{"value":"/ deallocate the memory.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":478653,"byte_end":478679,"line_start":161,"line_end":161,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":478681,"byte_end":478684,"line_start":162,"line_end":162,"column_start":2,"column_end":5}},{"value":"/ Note: this is an associated function, which means that you have to call","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":478686,"byte_end":478761,"line_start":163,"line_end":163,"column_start":2,"column_end":77}},{"value":"/ it as `BitBox::leak(b)` instead of `b.leak()`. This is to match layout","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":478763,"byte_end":478837,"line_start":164,"line_end":164,"column_start":2,"column_end":76}},{"value":"/ with the standard library’s `Box` API; there will never be a name","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":478839,"byte_end":478910,"line_start":165,"line_end":165,"column_start":2,"column_end":71}},{"value":"/ conflict with `BitSlice`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":478912,"byte_end":478941,"line_start":166,"line_end":166,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":478943,"byte_end":478946,"line_start":167,"line_end":167,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":478948,"byte_end":478962,"line_start":168,"line_end":168,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":478964,"byte_end":478967,"line_start":169,"line_end":169,"column_start":2,"column_end":5}},{"value":"/ [`Box::leak`](https://doc.rust-lang.org/alloc/boxed/struct.Box.html#method.leak)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":478969,"byte_end":479053,"line_start":170,"line_end":170,"column_start":2,"column_end":86}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":479055,"byte_end":479058,"line_start":171,"line_end":171,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":479060,"byte_end":479074,"line_start":172,"line_end":172,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":479076,"byte_end":479079,"line_start":173,"line_end":173,"column_start":2,"column_end":5}},{"value":"/ Simple usage:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":479081,"byte_end":479098,"line_start":174,"line_end":174,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":479100,"byte_end":479103,"line_start":175,"line_end":175,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":479105,"byte_end":479116,"line_start":176,"line_end":176,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":479118,"byte_end":479145,"line_start":177,"line_end":177,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":479147,"byte_end":479150,"line_start":178,"line_end":178,"column_start":2,"column_end":5}},{"value":"/ let b = bitbox![LocalBits, u32; 0; 32];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":479152,"byte_end":479195,"line_start":179,"line_end":179,"column_start":2,"column_end":45}},{"value":"/ let static_ref: &'static mut BitSlice<LocalBits, u32> = BitBox::leak(b);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":479197,"byte_end":479273,"line_start":180,"line_end":180,"column_start":2,"column_end":78}},{"value":"/ static_ref.set(0, true);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":479275,"byte_end":479303,"line_start":181,"line_end":181,"column_start":2,"column_end":30}},{"value":"/ assert_eq!(static_ref.count_ones(), 1);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":479305,"byte_end":479348,"line_start":182,"line_end":182,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":479350,"byte_end":479357,"line_start":183,"line_end":183,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":479359,"byte_end":479362,"line_start":184,"line_end":184,"column_start":2,"column_end":5}},{"value":"/ [`BitBox::from_raw`]: #method.from_raw","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":479364,"byte_end":479406,"line_start":185,"line_end":185,"column_start":2,"column_end":44}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":479408,"byte_end":479417,"line_start":186,"line_end":186,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2524},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":480586,"byte_end":480597,"line_start":230,"line_end":230,"column_start":9,"column_end":20},"name":"into_bitvec","qualname":"<BitBox<O, T>>::into_bitvec","value":"pub fn into_bitvec(Self) -> BitVec<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Converts `self` into a vector without clones or allocation.","sig":null,"attributes":[{"value":"/ Converts `self` into a vector without clones or allocation.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":479545,"byte_end":479608,"line_start":192,"line_end":192,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":479610,"byte_end":479613,"line_start":193,"line_end":193,"column_start":2,"column_end":5}},{"value":"/ The resulting vector can be converted back into a box via `BitVec<O,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":479615,"byte_end":479687,"line_start":194,"line_end":194,"column_start":2,"column_end":74}},{"value":"/ T>`’s `into_boxed_bitslice` method.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":479689,"byte_end":479730,"line_start":195,"line_end":195,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":479732,"byte_end":479735,"line_start":196,"line_end":196,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":479737,"byte_end":479751,"line_start":197,"line_end":197,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":479753,"byte_end":479756,"line_start":198,"line_end":198,"column_start":2,"column_end":5}},{"value":"/ [`slice::into_vec`](https://doc.rust-lang.org/std/primitive.slice.html#method.into_vec)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":479758,"byte_end":479849,"line_start":199,"line_end":199,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":479851,"byte_end":479854,"line_start":200,"line_end":200,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":479856,"byte_end":479877,"line_start":201,"line_end":201,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":479879,"byte_end":479882,"line_start":202,"line_end":202,"column_start":2,"column_end":5}},{"value":"/ Despite taking a `Box<[T]>` receiver, this function is written in an","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":479884,"byte_end":479956,"line_start":203,"line_end":203,"column_start":2,"column_end":74}},{"value":"/ `impl<T> [T]` block.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":479958,"byte_end":479982,"line_start":204,"line_end":204,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":479984,"byte_end":479987,"line_start":205,"line_end":205,"column_start":2,"column_end":5}},{"value":"/ Rust does not allow the text","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":479989,"byte_end":480021,"line_start":206,"line_end":206,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":480023,"byte_end":480026,"line_start":207,"line_end":207,"column_start":2,"column_end":5}},{"value":"/ ```rust,ignore","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":480028,"byte_end":480046,"line_start":208,"line_end":208,"column_start":2,"column_end":20}},{"value":"/ impl<O, T> BitSlice<O, T> {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":480048,"byte_end":480079,"line_start":209,"line_end":209,"column_start":2,"column_end":33}},{"value":"/   fn into_bitvec(self: BitBox<O, T>);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":480081,"byte_end":480122,"line_start":210,"line_end":210,"column_start":2,"column_end":43}},{"value":"/ }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":480124,"byte_end":480129,"line_start":211,"line_end":211,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":480131,"byte_end":480138,"line_start":212,"line_end":212,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":480140,"byte_end":480143,"line_start":213,"line_end":213,"column_start":2,"column_end":5}},{"value":"/ to be written, and `BitBox` exists specifically because","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":480145,"byte_end":480204,"line_start":214,"line_end":214,"column_start":2,"column_end":61}},{"value":"/ `Box<BitSlice<>>` cannot be written either, so this function must be","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":480206,"byte_end":480278,"line_start":215,"line_end":215,"column_start":2,"column_end":74}},{"value":"/ implemented directly on `BitBox` rather than on `BitSlice` with a boxed","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":480280,"byte_end":480355,"line_start":216,"line_end":216,"column_start":2,"column_end":77}},{"value":"/ receiver.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":480357,"byte_end":480370,"line_start":217,"line_end":217,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":480372,"byte_end":480375,"line_start":218,"line_end":218,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":480377,"byte_end":480391,"line_start":219,"line_end":219,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":480393,"byte_end":480396,"line_start":220,"line_end":220,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":480398,"byte_end":480409,"line_start":221,"line_end":221,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":480411,"byte_end":480438,"line_start":222,"line_end":222,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":480440,"byte_end":480443,"line_start":223,"line_end":223,"column_start":2,"column_end":5}},{"value":"/ let bb = bitbox![0, 1, 0, 1];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":480445,"byte_end":480478,"line_start":224,"line_end":224,"column_start":2,"column_end":35}},{"value":"/ let bv = bb.into_bitvec();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":480480,"byte_end":480510,"line_start":225,"line_end":225,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":480512,"byte_end":480515,"line_start":226,"line_end":226,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bv, bitvec![0, 1, 0, 1]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":480517,"byte_end":480557,"line_start":227,"line_end":227,"column_start":2,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":480559,"byte_end":480566,"line_start":228,"line_end":228,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":480568,"byte_end":480577,"line_start":229,"line_end":229,"column_start":2,"column_end":11}}]},{"kind":"Mod","id":{"krate":0,"index":2845},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"vec","qualname":"::vec","value":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","parent":null,"children":[{"krate":0,"index":2846},{"krate":0,"index":2847},{"krate":0,"index":2850},{"krate":0,"index":2853},{"krate":0,"index":2856},{"krate":0,"index":2857},{"krate":0,"index":2860},{"krate":0,"index":2861},{"krate":0,"index":2863},{"krate":0,"index":2866},{"krate":0,"index":2869},{"krate":0,"index":2872},{"krate":0,"index":2875},{"krate":0,"index":2876},{"krate":0,"index":2879},{"krate":0,"index":2882},{"krate":0,"index":2885},{"krate":0,"index":2888},{"krate":0,"index":2889},{"krate":0,"index":2892},{"krate":0,"index":2895},{"krate":0,"index":2900},{"krate":0,"index":2925},{"krate":0,"index":3031},{"krate":0,"index":3254},{"krate":0,"index":3372},{"krate":0,"index":3582},{"krate":0,"index":3583},{"krate":0,"index":3586},{"krate":0,"index":3589}],"decl_id":null,"docs":" A dynamically-allocated buffer containing a `BitSlice<O, T>` region.","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/lib.rs","byte_start":6369,"byte_end":6394,"line_start":174,"line_end":174,"column_start":1,"column_end":26}},{"value":"* A dynamically-allocated buffer containing a `BitSlice<O, T>` region.\n\nYou can read the standard library’s [`alloc::vec` module documentation][std]\nhere.\n\nThis module defines the [`BitVec`] buffer, and all of its associated support\ncode.\n\n`BitVec` is equivalent to `Vec<bool>`, in its operation and in its relationship\nto the `BitSlice` type. Most of the interesting work to be done on a\nbit-sequence is implemented in `BitSlice`, to which `BitVec` dereferences, and\nthe vector container itself only exists to maintain ownership, implement dynamic\nresizing, and provide some specializations that cannot safely be done on\n`BitSlice` alone.\n\n[`BitVec`]: struct.BitVec.html\n[std]: https://doc.rust-lang.org/alloc/vec\n!*/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":492413,"byte_end":493135,"line_start":1,"line_end":18,"column_start":1,"column_end":4}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":493137,"byte_end":493163,"line_start":20,"line_end":20,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":2895},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":496864,"byte_end":496870,"line_start":130,"line_end":130,"column_start":12,"column_end":18},"name":"BitVec","qualname":"::vec::BitVec","value":"BitVec {  }","parent":null,"children":[{"krate":0,"index":2898},{"krate":0,"index":2899}],"decl_id":null,"docs":" A vector of individual bits, allocated on the heap.","sig":null,"attributes":[{"value":"* A vector of individual bits, allocated on the heap.\n\nThis is a managed, heap-allocated, buffer that contains a `BitSlice` region. It\nis analagous to `Vec<bool>`, and is written to be as close as possible to\ndrop-in replacabale for it. This type contains little interesting behavior in\nits own right, dereferencing instead to [`BitSlice`] for manipulation of the\nbuffer contents, and serves primarily as an interface to the allocator. If you\nrequire statically-allocated, fixed-size, owned buffers, you should use the\n[`BitArray`] type.\n\nBecause `BitVec` directly owns its memory, and can guarantee that no other\nobject in a program has access to its buffers, `BitVec` is able to override some\nbehavior from `BitSlice` in more efficient manners.\n\n# Documentation\n\nAll APIs that mirror something in the standard library will have an `Original`\nsection linking to the corresponding item. All APIs that have a different\nsignature or behavior than the original will have an `API Differences` section\nexplaining what has changed, and how to adapt your existing code to the change.\n\nThese sections look like this:\n\n# Original\n\n[`Vec<T>`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html)\n\n# API Differences\n\nThe buffer type `Vec<bool>` has no type parameters. `BitVec<O, T>` has the same\ntwo type parameters as `BitSlice<O, T>`. Otherwise, `BitVec` is able to\nimplement the full API surface of `Vec<bool>`.\n\n# Behavior\n\nBecause `BitVec` is a fully-owned buffer, it is able to operate on its memory\nwithout concern for any other views that may alias. This enables it to\nspecialize some `BitSlice` behavior to be faster or more efficient.\n\n# Type Parameters\n\nThis takes the same two type parameters, `O: BitOrder` and `T: BitStore`, as\n`BitSlice`.\n\n# Safety\n\nLike `BitSlice`, `BitVec` is exactly equal in size to `Vec`, and is also\nabsolutely representation-incompatible with it. You must never attempt to\ntype-cast between `Vec<T>` and `BitVec` in any way, nor attempt to modify the\nmemory value of a `BitVec` handle. Doing so will cause allocator and memory\nerrors in your program, likely inducing a panic.\n\nEverything in the `BitVec` public API, even the `unsafe` parts, are guaranteed\nto have no more unsafety than their equivalent items in the standard library.\nAll `unsafe` APIs will have documentation explicitly detailing what the API\nrequires you to uphold in order for it to function safely and correctly. All\nsafe APIs will do so themselves.\n\n# Performance\n\nThe choice of `T: BitStore` type parameter can impact your vector’s performance,\nas the allocator operates in units of `T` rather than in bits. This means that\nlarger register types will increase the amount of memory reserved in each call\nto the allocator, meaning fewer calls to `.push()` will actually cause a\nreällocation. In addition, iteration over the vector is governed by the\n`BitSlice` characteristics on the type parameter. You are generally better off\nusing larger types when your vector is a data collection rather than a specific\nI/O protocol buffer.\n\n# Macro Construction\n\nHeap allocation can only occur at runtime, but the [`bitvec!`] macro will\nconstruct an appropriate `BitSlice` buffer at compile-time, and at run-time,\nonly copy the buffer into a heap allocation.\n\n[`BitArray`]: ../array/struct.BitArray.html\n[`BitSlice`]: ../slice/struct.BitSlice.html\n[`bitvec!`]: ../macro.bitvec.html\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":493462,"byte_end":496841,"line_start":50,"line_end":128,"column_start":1,"column_end":4}},{"value":"repr(C)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":496842,"byte_end":496852,"line_start":129,"line_end":129,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2903},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":497889,"byte_end":497895,"line_start":170,"line_end":170,"column_start":9,"column_end":15},"name":"repeat","qualname":"<BitVec<O, T>>::repeat","value":"pub fn repeat(bool, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `BitVec` from a value repeated many times.","sig":null,"attributes":[{"value":"/ Constructs a `BitVec` from a value repeated many times.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":497246,"byte_end":497305,"line_start":147,"line_end":147,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":497307,"byte_end":497310,"line_start":148,"line_end":148,"column_start":2,"column_end":5}},{"value":"/ This function is equivalent to the `bitvec![O, T; bit; len]` macro call,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":497312,"byte_end":497388,"line_start":149,"line_end":149,"column_start":2,"column_end":78}},{"value":"/ and is in fact the implementation of that macro syntax.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":497390,"byte_end":497449,"line_start":150,"line_end":150,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":497451,"byte_end":497454,"line_start":151,"line_end":151,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":497456,"byte_end":497472,"line_start":152,"line_end":152,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":497474,"byte_end":497477,"line_start":153,"line_end":153,"column_start":2,"column_end":5}},{"value":"/ - `bit`: The bit value to which all `len` allocated bits will be set.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":497479,"byte_end":497552,"line_start":154,"line_end":154,"column_start":2,"column_end":75}},{"value":"/ - `len`: The number of live bits in the constructed `BitVec`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":497554,"byte_end":497619,"line_start":155,"line_end":155,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":497621,"byte_end":497624,"line_start":156,"line_end":156,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":497626,"byte_end":497639,"line_start":157,"line_end":157,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":497641,"byte_end":497644,"line_start":158,"line_end":158,"column_start":2,"column_end":5}},{"value":"/ A `BitVec` with `len` live bits, all set to `bit`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":497646,"byte_end":497700,"line_start":159,"line_end":159,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":497702,"byte_end":497705,"line_start":160,"line_end":160,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":497707,"byte_end":497721,"line_start":161,"line_end":161,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":497723,"byte_end":497726,"line_start":162,"line_end":162,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":497728,"byte_end":497739,"line_start":163,"line_end":163,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":497741,"byte_end":497768,"line_start":164,"line_end":164,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":497770,"byte_end":497773,"line_start":165,"line_end":165,"column_start":2,"column_end":5}},{"value":"/ let bv = BitVec::<Msb0, u8>::repeat(true, 20);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":497775,"byte_end":497825,"line_start":166,"line_end":166,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(bv, bits![1; 20]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":497827,"byte_end":497860,"line_start":167,"line_end":167,"column_start":2,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":497862,"byte_end":497869,"line_start":168,"line_end":168,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":497871,"byte_end":497880,"line_start":169,"line_end":169,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2904},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":498899,"byte_end":498912,"line_start":205,"line_end":205,"column_start":9,"column_end":22},"name":"from_bitslice","qualname":"<BitVec<O, T>>::from_bitslice","value":"pub fn from_bitslice(&BitSlice<O, T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Clones a `&BitSlice` into a `BitVec`.","sig":null,"attributes":[{"value":"/ Clones a `&BitSlice` into a `BitVec`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":498084,"byte_end":498125,"line_start":179,"line_end":179,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":498127,"byte_end":498130,"line_start":180,"line_end":180,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":498132,"byte_end":498146,"line_start":181,"line_end":181,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":498148,"byte_end":498151,"line_start":182,"line_end":182,"column_start":2,"column_end":5}},{"value":"/ [`<Vec<T: Clone> as Clone>::clone`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#impl-Clone)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":498153,"byte_end":498256,"line_start":183,"line_end":183,"column_start":2,"column_end":105}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":498258,"byte_end":498261,"line_start":184,"line_end":184,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":498263,"byte_end":498276,"line_start":185,"line_end":185,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":498278,"byte_end":498281,"line_start":186,"line_end":186,"column_start":2,"column_end":5}},{"value":"/ This performs a direct element-wise copy from the source slice to the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":498283,"byte_end":498356,"line_start":187,"line_end":187,"column_start":2,"column_end":75}},{"value":"/ newly-allocated buffer, then sets the vector to have the same starting","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":498358,"byte_end":498432,"line_start":188,"line_end":188,"column_start":2,"column_end":76}},{"value":"/ bit as the slice did. This allows for faster behavior. If you require","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":498434,"byte_end":498507,"line_start":189,"line_end":189,"column_start":2,"column_end":75}},{"value":"/ that the vector start at the leading edge of the first element, use","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":498509,"byte_end":498580,"line_start":190,"line_end":190,"column_start":2,"column_end":73}},{"value":"/ [`force_align`] to guarantee this.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":498582,"byte_end":498620,"line_start":191,"line_end":191,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":498622,"byte_end":498625,"line_start":192,"line_end":192,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":498627,"byte_end":498641,"line_start":193,"line_end":193,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":498643,"byte_end":498646,"line_start":194,"line_end":194,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":498648,"byte_end":498659,"line_start":195,"line_end":195,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":498661,"byte_end":498688,"line_start":196,"line_end":196,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":498690,"byte_end":498693,"line_start":197,"line_end":197,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 1, 1, 0, 1, 1];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":498695,"byte_end":498740,"line_start":198,"line_end":198,"column_start":2,"column_end":47}},{"value":"/ let bv = BitVec::from_bitslice(&bits[2 ..]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":498742,"byte_end":498790,"line_start":199,"line_end":199,"column_start":2,"column_end":50}},{"value":"/ assert_eq!(bv, bits[2 ..]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":498792,"byte_end":498823,"line_start":200,"line_end":200,"column_start":2,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":498825,"byte_end":498832,"line_start":201,"line_end":201,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":498834,"byte_end":498837,"line_start":202,"line_end":202,"column_start":2,"column_end":5}},{"value":"/ [`force_align`]: #method.force_align","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":498839,"byte_end":498879,"line_start":203,"line_end":203,"column_start":2,"column_end":42}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":498881,"byte_end":498890,"line_start":204,"line_end":204,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2906},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":500064,"byte_end":500072,"line_start":254,"line_end":254,"column_start":9,"column_end":17},"name":"from_vec","qualname":"<BitVec<O, T>>::from_vec","value":"pub fn from_vec(Vec<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts a `Vec<T>` into a `BitVec<O, T>` without copying its buffer.","sig":null,"attributes":[{"value":"/ Converts a `Vec<T>` into a `BitVec<O, T>` without copying its buffer.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":499420,"byte_end":499493,"line_start":226,"line_end":226,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":499495,"byte_end":499498,"line_start":227,"line_end":227,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":499500,"byte_end":499516,"line_start":228,"line_end":228,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":499518,"byte_end":499521,"line_start":229,"line_end":229,"column_start":2,"column_end":5}},{"value":"/ - `vec`: A vector to view as bits.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":499523,"byte_end":499561,"line_start":230,"line_end":230,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":499563,"byte_end":499566,"line_start":231,"line_end":231,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":499568,"byte_end":499581,"line_start":232,"line_end":232,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":499583,"byte_end":499586,"line_start":233,"line_end":233,"column_start":2,"column_end":5}},{"value":"/ A `BitVec` over the `vec` buffer.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":499588,"byte_end":499625,"line_start":234,"line_end":234,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":499627,"byte_end":499630,"line_start":235,"line_end":235,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":499632,"byte_end":499644,"line_start":236,"line_end":236,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":499646,"byte_end":499649,"line_start":237,"line_end":237,"column_start":2,"column_end":5}},{"value":"/ This panics if `vec` is too long to convert into a `BitVec`. See","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":499651,"byte_end":499719,"line_start":238,"line_end":238,"column_start":2,"column_end":70}},{"value":"/ [`BitSlice::MAX_ELTS`].","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":499721,"byte_end":499748,"line_start":239,"line_end":239,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":499750,"byte_end":499753,"line_start":240,"line_end":240,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":499755,"byte_end":499769,"line_start":241,"line_end":241,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":499771,"byte_end":499774,"line_start":242,"line_end":242,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":499776,"byte_end":499787,"line_start":243,"line_end":243,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":499789,"byte_end":499816,"line_start":244,"line_end":244,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":499818,"byte_end":499821,"line_start":245,"line_end":245,"column_start":2,"column_end":5}},{"value":"/ let vec = vec![0u8; 4];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":499823,"byte_end":499850,"line_start":246,"line_end":246,"column_start":2,"column_end":29}},{"value":"/ let bv = BitVec::<LocalBits, _>::from_vec(vec);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":499852,"byte_end":499903,"line_start":247,"line_end":247,"column_start":2,"column_end":53}},{"value":"/ assert_eq!(bv, bits![0; 32]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":499905,"byte_end":499938,"line_start":248,"line_end":248,"column_start":2,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":499940,"byte_end":499947,"line_start":249,"line_end":249,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":499949,"byte_end":499952,"line_start":250,"line_end":250,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice::MAX_ELTS`]:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":499954,"byte_end":499981,"line_start":251,"line_end":251,"column_start":2,"column_end":29}},{"value":"/ ../slice/struct.BitSlice.html#associatedconstant.MAX_ELTS","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":499983,"byte_end":500044,"line_start":252,"line_end":252,"column_start":2,"column_end":63}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":500046,"byte_end":500055,"line_start":253,"line_end":253,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2907},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":501198,"byte_end":501210,"line_start":289,"line_end":289,"column_start":9,"column_end":21},"name":"try_from_vec","qualname":"<BitVec<O, T>>::try_from_vec","value":"pub fn try_from_vec(Vec<T>) -> Result<Self, Vec<T>>","parent":null,"children":[],"decl_id":null,"docs":" Converts a `Vec<T>` into a `BitVec<O, T>` without copying its buffer.","sig":null,"attributes":[{"value":"/ Converts a `Vec<T>` into a `BitVec<O, T>` without copying its buffer.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":500193,"byte_end":500266,"line_start":259,"line_end":259,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":500268,"byte_end":500271,"line_start":260,"line_end":260,"column_start":2,"column_end":5}},{"value":"/ This method takes ownership of a memory buffer and enables it to be used","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":500273,"byte_end":500349,"line_start":261,"line_end":261,"column_start":2,"column_end":78}},{"value":"/ as a bit-vector. Because `Vec` can be longer than `BitVec`s, this is a","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":500351,"byte_end":500425,"line_start":262,"line_end":262,"column_start":2,"column_end":76}},{"value":"/ fallible method, and the original vector will be returned if it cannot","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":500427,"byte_end":500501,"line_start":263,"line_end":263,"column_start":2,"column_end":76}},{"value":"/ be converted.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":500503,"byte_end":500520,"line_start":264,"line_end":264,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":500522,"byte_end":500525,"line_start":265,"line_end":265,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":500527,"byte_end":500543,"line_start":266,"line_end":266,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":500545,"byte_end":500548,"line_start":267,"line_end":267,"column_start":2,"column_end":5}},{"value":"/ - `vec`: Some vector of memory, to be viewed as bits.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":500550,"byte_end":500607,"line_start":268,"line_end":268,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":500609,"byte_end":500612,"line_start":269,"line_end":269,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":500614,"byte_end":500627,"line_start":270,"line_end":270,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":500629,"byte_end":500632,"line_start":271,"line_end":271,"column_start":2,"column_end":5}},{"value":"/ If `vec` is short enough to be viewed as a `BitVec`, then this returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":500634,"byte_end":500708,"line_start":272,"line_end":272,"column_start":2,"column_end":76}},{"value":"/ a `BitVec` over the `vec` buffer. If `vec` is too long, then this","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":500710,"byte_end":500779,"line_start":273,"line_end":273,"column_start":2,"column_end":71}},{"value":"/ returns `vec` unmodified.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":500781,"byte_end":500810,"line_start":274,"line_end":274,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":500812,"byte_end":500815,"line_start":275,"line_end":275,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":500817,"byte_end":500831,"line_start":276,"line_end":276,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":500833,"byte_end":500836,"line_start":277,"line_end":277,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":500838,"byte_end":500849,"line_start":278,"line_end":278,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":500851,"byte_end":500878,"line_start":279,"line_end":279,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":500880,"byte_end":500883,"line_start":280,"line_end":280,"column_start":2,"column_end":5}},{"value":"/ let vec = vec![0u8; 4];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":500885,"byte_end":500912,"line_start":281,"line_end":281,"column_start":2,"column_end":29}},{"value":"/ let bv = BitVec::<LocalBits, _>::try_from_vec(vec).unwrap();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":500914,"byte_end":500978,"line_start":282,"line_end":282,"column_start":2,"column_end":66}},{"value":"/ assert_eq!(bv, bits![0; 32]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":500980,"byte_end":501013,"line_start":283,"line_end":283,"column_start":2,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":501015,"byte_end":501022,"line_start":284,"line_end":284,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":501024,"byte_end":501027,"line_start":285,"line_end":285,"column_start":2,"column_end":5}},{"value":"/ An example showing this function failing would require an allocation","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":501029,"byte_end":501101,"line_start":286,"line_end":286,"column_start":2,"column_end":74}},{"value":"/ exceeding `!0usize >> 3` bytes in size, which is infeasible to produce.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":501103,"byte_end":501178,"line_start":287,"line_end":287,"column_start":2,"column_end":77}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":501180,"byte_end":501189,"line_start":288,"line_end":288,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2908},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":502394,"byte_end":502414,"line_start":337,"line_end":337,"column_start":9,"column_end":29},"name":"extend_from_bitslice","qualname":"<BitVec<O, T>>::extend_from_bitslice","value":"pub fn extend_from_bitslice(&mut Self, &BitSlice<O, T>)","parent":null,"children":[],"decl_id":null,"docs":" Copies all bits in a `BitSlice` into the `BitVec`.","sig":null,"attributes":[{"value":"/ Copies all bits in a `BitSlice` into the `BitVec`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":501607,"byte_end":501661,"line_start":310,"line_end":310,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":501663,"byte_end":501666,"line_start":311,"line_end":311,"column_start":2,"column_end":5}},{"value":"/ This is provided for API completeness; it has no performance benefits","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":501668,"byte_end":501741,"line_start":312,"line_end":312,"column_start":2,"column_end":75}},{"value":"/ compared to use of the [`Extend`] implementation.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":501743,"byte_end":501796,"line_start":313,"line_end":313,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":501798,"byte_end":501801,"line_start":314,"line_end":314,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":501803,"byte_end":501819,"line_start":315,"line_end":315,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":501821,"byte_end":501824,"line_start":316,"line_end":316,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":501826,"byte_end":501843,"line_start":317,"line_end":317,"column_start":2,"column_end":19}},{"value":"/ - `other`: A `BitSlice` reference of the same type parameters as `self`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":501845,"byte_end":501921,"line_start":318,"line_end":318,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":501923,"byte_end":501926,"line_start":319,"line_end":319,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":501928,"byte_end":501942,"line_start":320,"line_end":320,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":501944,"byte_end":501947,"line_start":321,"line_end":321,"column_start":2,"column_end":5}},{"value":"/ `self` is extended by the length of `other`, and then the contents of","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":501949,"byte_end":502022,"line_start":322,"line_end":322,"column_start":2,"column_end":75}},{"value":"/ `other` are copied into the newly-allocated end of `self`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":502024,"byte_end":502086,"line_start":323,"line_end":323,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":502088,"byte_end":502091,"line_start":324,"line_end":324,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":502093,"byte_end":502104,"line_start":325,"line_end":325,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":502106,"byte_end":502133,"line_start":326,"line_end":326,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":502135,"byte_end":502138,"line_start":327,"line_end":327,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":502140,"byte_end":502171,"line_start":328,"line_end":328,"column_start":2,"column_end":33}},{"value":"/ bv.extend_from_bitslice(bits![1, 1, 0, 1]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":502173,"byte_end":502220,"line_start":329,"line_end":329,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":502222,"byte_end":502225,"line_start":330,"line_end":330,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bv, bits![0, 1, 1, 1, 0, 1]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":502227,"byte_end":502271,"line_start":331,"line_end":331,"column_start":2,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":502273,"byte_end":502280,"line_start":332,"line_end":332,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":502282,"byte_end":502285,"line_start":333,"line_end":333,"column_start":2,"column_end":5}},{"value":"/ [`Extend`]: #impl-Extend<%26'a bool>","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":502287,"byte_end":502327,"line_start":334,"line_end":334,"column_start":2,"column_end":42}},{"value":"/ [`.as_bitslice()`]: #method.as_bitslice()","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":502329,"byte_end":502374,"line_start":335,"line_end":335,"column_start":2,"column_end":47}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":502376,"byte_end":502385,"line_start":336,"line_end":336,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2909},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":503124,"byte_end":503143,"line_start":364,"line_end":364,"column_start":9,"column_end":28},"name":"into_boxed_bitslice","qualname":"<BitVec<O, T>>::into_boxed_bitslice","value":"pub fn into_boxed_bitslice(Self) -> BitBox<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Converts the vector into [`BitBox<O, T>`].","sig":null,"attributes":[{"value":"/ Converts the vector into [`BitBox<O, T>`].","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":502613,"byte_end":502659,"line_start":344,"line_end":344,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":502661,"byte_end":502664,"line_start":345,"line_end":345,"column_start":2,"column_end":5}},{"value":"/ Note that this will drop any excess capacity.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":502666,"byte_end":502715,"line_start":346,"line_end":346,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":502717,"byte_end":502720,"line_start":347,"line_end":347,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":502722,"byte_end":502736,"line_start":348,"line_end":348,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":502738,"byte_end":502741,"line_start":349,"line_end":349,"column_start":2,"column_end":5}},{"value":"/ [`Vec::into_boxed_slice`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.into_boxed_slice)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":502743,"byte_end":502849,"line_start":350,"line_end":350,"column_start":2,"column_end":108}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":502851,"byte_end":502854,"line_start":351,"line_end":351,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":502856,"byte_end":502870,"line_start":352,"line_end":352,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":502872,"byte_end":502875,"line_start":353,"line_end":353,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":502877,"byte_end":502888,"line_start":354,"line_end":354,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":502890,"byte_end":502917,"line_start":355,"line_end":355,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":502919,"byte_end":502922,"line_start":356,"line_end":356,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![1; 50];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":502924,"byte_end":502956,"line_start":357,"line_end":357,"column_start":2,"column_end":34}},{"value":"/ let bb: BitBox = bv.into_boxed_bitslice();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":502958,"byte_end":503004,"line_start":358,"line_end":358,"column_start":2,"column_end":48}},{"value":"/ assert_eq!(bb, bits![1; 50]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":503006,"byte_end":503039,"line_start":359,"line_end":359,"column_start":2,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":503041,"byte_end":503048,"line_start":360,"line_end":360,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":503050,"byte_end":503053,"line_start":361,"line_end":361,"column_start":2,"column_end":5}},{"value":"/ [`BitBox<O, T>`]: ../boxed/struct.BitBox.html","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":503055,"byte_end":503104,"line_start":362,"line_end":362,"column_start":2,"column_end":51}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":503106,"byte_end":503115,"line_start":363,"line_end":363,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2910},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":503887,"byte_end":503895,"line_start":396,"line_end":396,"column_start":9,"column_end":17},"name":"into_vec","qualname":"<BitVec<O, T>>::into_vec","value":"pub fn into_vec(Self) -> Vec<T>","parent":null,"children":[],"decl_id":null,"docs":" Converts the vector back into an ordinary vector of memory elements.","sig":null,"attributes":[{"value":"/ Converts the vector back into an ordinary vector of memory elements.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":503389,"byte_end":503461,"line_start":373,"line_end":373,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":503463,"byte_end":503466,"line_start":374,"line_end":374,"column_start":2,"column_end":5}},{"value":"/ This does not affect the vector’s buffer, only the handle used to","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":503468,"byte_end":503539,"line_start":375,"line_end":375,"column_start":2,"column_end":71}},{"value":"/ control it.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":503541,"byte_end":503556,"line_start":376,"line_end":376,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":503558,"byte_end":503561,"line_start":377,"line_end":377,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":503563,"byte_end":503579,"line_start":378,"line_end":378,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":503581,"byte_end":503584,"line_start":379,"line_end":379,"column_start":2,"column_end":5}},{"value":"/ - `self`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":503586,"byte_end":503598,"line_start":380,"line_end":380,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":503600,"byte_end":503603,"line_start":381,"line_end":381,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":503605,"byte_end":503618,"line_start":382,"line_end":382,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":503620,"byte_end":503623,"line_start":383,"line_end":383,"column_start":2,"column_end":5}},{"value":"/ An ordinary vector containing all of the bit-vector’s memory buffer.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":503625,"byte_end":503699,"line_start":384,"line_end":384,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":503701,"byte_end":503704,"line_start":385,"line_end":385,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":503706,"byte_end":503720,"line_start":386,"line_end":386,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":503722,"byte_end":503725,"line_start":387,"line_end":387,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":503727,"byte_end":503738,"line_start":388,"line_end":388,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":503740,"byte_end":503767,"line_start":389,"line_end":389,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":503769,"byte_end":503772,"line_start":390,"line_end":390,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![0; 5];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":503774,"byte_end":503801,"line_start":391,"line_end":391,"column_start":2,"column_end":29}},{"value":"/ let vec = bv.into_vec();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":503803,"byte_end":503831,"line_start":392,"line_end":392,"column_start":2,"column_end":30}},{"value":"/ assert_eq!(vec, [0]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":503833,"byte_end":503858,"line_start":393,"line_end":393,"column_start":2,"column_end":27}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":503860,"byte_end":503867,"line_start":394,"line_end":394,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":503869,"byte_end":503878,"line_start":395,"line_end":395,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2911},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":504360,"byte_end":504368,"line_start":419,"line_end":419,"column_start":9,"column_end":17},"name":"elements","qualname":"<BitVec<O, T>>::elements","value":"pub fn elements(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Gets the number of elements `T` that contain live bits of the vector.","sig":null,"attributes":[{"value":"/ Gets the number of elements `T` that contain live bits of the vector.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":504104,"byte_end":504177,"line_start":408,"line_end":408,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":504179,"byte_end":504182,"line_start":409,"line_end":409,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":504184,"byte_end":504198,"line_start":410,"line_end":410,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":504200,"byte_end":504203,"line_start":411,"line_end":411,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":504205,"byte_end":504216,"line_start":412,"line_end":412,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":504218,"byte_end":504245,"line_start":413,"line_end":413,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":504247,"byte_end":504250,"line_start":414,"line_end":414,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![LocalBits, u16; 1; 50];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":504252,"byte_end":504296,"line_start":415,"line_end":415,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(bv.elements(), 4);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":504298,"byte_end":504331,"line_start":416,"line_end":416,"column_start":2,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":504333,"byte_end":504340,"line_start":417,"line_end":417,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":504342,"byte_end":504351,"line_start":418,"line_end":418,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2912},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":505254,"byte_end":505271,"line_start":448,"line_end":448,"column_start":9,"column_end":26},"name":"set_uninitialized","qualname":"<BitVec<O, T>>::set_uninitialized","value":"pub fn set_uninitialized(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Sets the uninitialized bits of the vector to a fixed value.","sig":null,"attributes":[{"value":"/ Sets the uninitialized bits of the vector to a fixed value.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":504419,"byte_end":504482,"line_start":423,"line_end":423,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":504484,"byte_end":504487,"line_start":424,"line_end":424,"column_start":2,"column_end":5}},{"value":"/ This method modifies all bits in the allocated buffer that are outside","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":504489,"byte_end":504563,"line_start":425,"line_end":425,"column_start":2,"column_end":76}},{"value":"/ the `self.as_bitslice()` view so that they have a consistent value. This","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":504565,"byte_end":504641,"line_start":426,"line_end":426,"column_start":2,"column_end":78}},{"value":"/ can be used to zero the uninitialized memory so that when viewed as a","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":504643,"byte_end":504716,"line_start":427,"line_end":427,"column_start":2,"column_end":75}},{"value":"/ raw memory slice, bits outside the live region have a predictable value.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":504718,"byte_end":504794,"line_start":428,"line_end":428,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":504796,"byte_end":504799,"line_start":429,"line_end":429,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":504801,"byte_end":504815,"line_start":430,"line_end":430,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":504817,"byte_end":504820,"line_start":431,"line_end":431,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":504822,"byte_end":504833,"line_start":432,"line_end":432,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":504835,"byte_end":504862,"line_start":433,"line_end":433,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":504864,"byte_end":504867,"line_start":434,"line_end":434,"column_start":2,"column_end":5}},{"value":"/ let mut bv = 220u8.view_bits::<Lsb0>().to_bitvec();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":504869,"byte_end":504924,"line_start":435,"line_end":435,"column_start":2,"column_end":57}},{"value":"/ assert_eq!(bv.as_slice(), &[220u8]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":504926,"byte_end":504966,"line_start":436,"line_end":436,"column_start":2,"column_end":42}},{"value":"/ bv.truncate(4);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":504968,"byte_end":504987,"line_start":437,"line_end":437,"column_start":2,"column_end":21}},{"value":"/ assert_eq!(bv.count_ones(), 2);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":504989,"byte_end":505024,"line_start":438,"line_end":438,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(bv.as_slice(), &[220u8]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":505026,"byte_end":505066,"line_start":439,"line_end":439,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":505068,"byte_end":505071,"line_start":440,"line_end":440,"column_start":2,"column_end":5}},{"value":"/ bv.set_uninitialized(false);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":505073,"byte_end":505105,"line_start":441,"line_end":441,"column_start":2,"column_end":34}},{"value":"/ assert_eq!(bv.as_slice(), &[12u8]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":505107,"byte_end":505146,"line_start":442,"line_end":442,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":505148,"byte_end":505151,"line_start":443,"line_end":443,"column_start":2,"column_end":5}},{"value":"/ bv.set_uninitialized(true);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":505153,"byte_end":505184,"line_start":444,"line_end":444,"column_start":2,"column_end":33}},{"value":"/ assert_eq!(bv.as_slice(), &[!3u8]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":505186,"byte_end":505225,"line_start":445,"line_end":445,"column_start":2,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":505227,"byte_end":505234,"line_start":446,"line_end":446,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":505236,"byte_end":505245,"line_start":447,"line_end":447,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2913},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":506241,"byte_end":506252,"line_start":483,"line_end":483,"column_start":9,"column_end":20},"name":"force_align","qualname":"<BitVec<O, T>>::force_align","value":"pub fn force_align(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Ensures that the live region of the vector’s contents begins at the\n leading edge of the buffer.","sig":null,"attributes":[{"value":"/ Ensures that the live region of the vector’s contents begins at the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":505656,"byte_end":505729,"line_start":462,"line_end":462,"column_start":2,"column_end":73}},{"value":"/ leading edge of the buffer.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":505731,"byte_end":505762,"line_start":463,"line_end":463,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":505764,"byte_end":505767,"line_start":464,"line_end":464,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":505769,"byte_end":505783,"line_start":465,"line_end":465,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":505785,"byte_end":505788,"line_start":466,"line_end":466,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":505790,"byte_end":505801,"line_start":467,"line_end":467,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":505803,"byte_end":505830,"line_start":468,"line_end":468,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":505832,"byte_end":505835,"line_start":469,"line_end":469,"column_start":2,"column_end":5}},{"value":"/ let data = 0x3Cu8;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":505837,"byte_end":505859,"line_start":470,"line_end":470,"column_start":2,"column_end":24}},{"value":"/ let bits = data.view_bits::<Msb0>();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":505861,"byte_end":505901,"line_start":471,"line_end":471,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":505903,"byte_end":505906,"line_start":472,"line_end":472,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bits[2 .. 6].to_bitvec();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":505908,"byte_end":505950,"line_start":473,"line_end":473,"column_start":2,"column_end":44}},{"value":"/ assert_eq!(bv, bits[2 .. 6]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":505952,"byte_end":505985,"line_start":474,"line_end":474,"column_start":2,"column_end":35}},{"value":"/ assert_eq!(bv.as_slice()[0], data);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":505987,"byte_end":506026,"line_start":475,"line_end":475,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":506028,"byte_end":506031,"line_start":476,"line_end":476,"column_start":2,"column_end":5}},{"value":"/ bv.force_align();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":506033,"byte_end":506054,"line_start":477,"line_end":477,"column_start":2,"column_end":23}},{"value":"/ assert_eq!(bv, bits[2 .. 6]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":506056,"byte_end":506089,"line_start":478,"line_end":478,"column_start":2,"column_end":35}},{"value":"/ //  It is not specified what happens to bits that are no longer used.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":506091,"byte_end":506164,"line_start":479,"line_end":479,"column_start":2,"column_end":75}},{"value":"/ assert_eq!(bv.as_slice()[0] & 0xF0, 0xF0);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":506166,"byte_end":506212,"line_start":480,"line_end":480,"column_start":2,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":506214,"byte_end":506221,"line_start":481,"line_end":481,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":506223,"byte_end":506232,"line_start":482,"line_end":482,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2915},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":507303,"byte_end":507315,"line_start":522,"line_end":522,"column_start":9,"column_end":21},"name":"set_elements","qualname":"<BitVec<O, T>>::set_elements","value":"pub fn set_elements(&mut Self, T::Mem)","parent":null,"children":[],"decl_id":null,"docs":" Writes a value into every element that the vector considers live.","sig":null,"attributes":[{"value":"/ Writes a value into every element that the vector considers live.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":506558,"byte_end":506627,"line_start":497,"line_end":497,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":506629,"byte_end":506632,"line_start":498,"line_end":498,"column_start":2,"column_end":5}},{"value":"/ This unconditionally writes `element` into each live location in the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":506634,"byte_end":506706,"line_start":499,"line_end":499,"column_start":2,"column_end":74}},{"value":"/ backing buffer, without altering the `BitVec`’s length or capacity.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":506708,"byte_end":506781,"line_start":500,"line_end":500,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":506783,"byte_end":506786,"line_start":501,"line_end":501,"column_start":2,"column_end":5}},{"value":"/ It is unspecified what effects this has on the allocated but dead","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":506788,"byte_end":506857,"line_start":502,"line_end":502,"column_start":2,"column_end":71}},{"value":"/ elements in the buffer.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":506859,"byte_end":506886,"line_start":503,"line_end":503,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":506888,"byte_end":506891,"line_start":504,"line_end":504,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":506893,"byte_end":506909,"line_start":505,"line_end":505,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":506911,"byte_end":506914,"line_start":506,"line_end":506,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":506916,"byte_end":506933,"line_start":507,"line_end":507,"column_start":2,"column_end":19}},{"value":"/ - `element`: The value which will be written to each live location in","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":506935,"byte_end":507008,"line_start":508,"line_end":508,"column_start":2,"column_end":75}},{"value":"/   the vector’s buffer.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":507010,"byte_end":507038,"line_start":509,"line_end":509,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":507040,"byte_end":507043,"line_start":510,"line_end":510,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":507045,"byte_end":507059,"line_start":511,"line_end":511,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":507061,"byte_end":507064,"line_start":512,"line_end":512,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":507066,"byte_end":507077,"line_start":513,"line_end":513,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":507079,"byte_end":507106,"line_start":514,"line_end":514,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":507108,"byte_end":507111,"line_start":515,"line_end":515,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![LocalBits, u8; 0; 10];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":507113,"byte_end":507160,"line_start":516,"line_end":516,"column_start":2,"column_end":49}},{"value":"/ assert_eq!(bv.as_slice(), [0, 0]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":507162,"byte_end":507200,"line_start":517,"line_end":517,"column_start":2,"column_end":40}},{"value":"/ bv.set_elements(0xA5);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":507202,"byte_end":507228,"line_start":518,"line_end":518,"column_start":2,"column_end":28}},{"value":"/ assert_eq!(bv.as_slice(), [0xA5, 0xA5]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":507230,"byte_end":507274,"line_start":519,"line_end":519,"column_start":2,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":507276,"byte_end":507283,"line_start":520,"line_end":520,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":507285,"byte_end":507294,"line_start":521,"line_end":521,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2917},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":507845,"byte_end":507856,"line_start":546,"line_end":546,"column_start":9,"column_end":20},"name":"as_bitslice","qualname":"<BitVec<O, T>>::as_bitslice","value":"pub fn as_bitslice(&Self) -> &BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Views the buffer’s contents as a `BitSlice`.","sig":null,"attributes":[{"value":"/ Views the buffer’s contents as a `BitSlice`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":507431,"byte_end":507481,"line_start":528,"line_end":528,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":507483,"byte_end":507486,"line_start":529,"line_end":529,"column_start":2,"column_end":5}},{"value":"/ This is equivalent to `&bv[..]`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":507488,"byte_end":507524,"line_start":530,"line_end":530,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":507526,"byte_end":507529,"line_start":531,"line_end":531,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":507531,"byte_end":507545,"line_start":532,"line_end":532,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":507547,"byte_end":507550,"line_start":533,"line_end":533,"column_start":2,"column_end":5}},{"value":"/ [`Vec::as_slice`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.as_slice)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":507552,"byte_end":507642,"line_start":534,"line_end":534,"column_start":2,"column_end":92}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":507644,"byte_end":507647,"line_start":535,"line_end":535,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":507649,"byte_end":507663,"line_start":536,"line_end":536,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":507665,"byte_end":507668,"line_start":537,"line_end":537,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":507670,"byte_end":507681,"line_start":538,"line_end":538,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":507683,"byte_end":507710,"line_start":539,"line_end":539,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":507712,"byte_end":507715,"line_start":540,"line_end":540,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![0, 1, 1, 0];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":507717,"byte_end":507750,"line_start":541,"line_end":541,"column_start":2,"column_end":35}},{"value":"/ let bits = bv.as_bitslice();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":507752,"byte_end":507784,"line_start":542,"line_end":542,"column_start":2,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":507786,"byte_end":507793,"line_start":543,"line_end":543,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":507795,"byte_end":507804,"line_start":544,"line_end":544,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":507806,"byte_end":507836,"line_start":545,"line_end":545,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2918},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":508381,"byte_end":508396,"line_start":569,"line_end":569,"column_start":9,"column_end":24},"name":"as_mut_bitslice","qualname":"<BitVec<O, T>>::as_mut_bitslice","value":"pub fn as_mut_bitslice(&mut Self) -> &mut BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Extracts a mutable bit-slice of the entire vector.","sig":null,"attributes":[{"value":"/ Extracts a mutable bit-slice of the entire vector.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":507927,"byte_end":507981,"line_start":550,"line_end":550,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":507983,"byte_end":507986,"line_start":551,"line_end":551,"column_start":2,"column_end":5}},{"value":"/ Equivalent to `&mut bv[..]`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":507988,"byte_end":508020,"line_start":552,"line_end":552,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":508022,"byte_end":508025,"line_start":553,"line_end":553,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":508027,"byte_end":508041,"line_start":554,"line_end":554,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":508043,"byte_end":508046,"line_start":555,"line_end":555,"column_start":2,"column_end":5}},{"value":"/ [`Vec::as_mut_slice`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.as_mut_slice)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":508048,"byte_end":508146,"line_start":556,"line_end":556,"column_start":2,"column_end":100}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":508148,"byte_end":508151,"line_start":557,"line_end":557,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":508153,"byte_end":508167,"line_start":558,"line_end":558,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":508169,"byte_end":508172,"line_start":559,"line_end":559,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":508174,"byte_end":508185,"line_start":560,"line_end":560,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":508187,"byte_end":508214,"line_start":561,"line_end":561,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":508216,"byte_end":508219,"line_start":562,"line_end":562,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1, 0, 1];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":508221,"byte_end":508258,"line_start":563,"line_end":563,"column_start":2,"column_end":39}},{"value":"/ let bits = bv.as_mut_bitslice();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":508260,"byte_end":508296,"line_start":564,"line_end":564,"column_start":2,"column_end":38}},{"value":"/ bits.set(0, true);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":508298,"byte_end":508320,"line_start":565,"line_end":565,"column_start":2,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":508322,"byte_end":508329,"line_start":566,"line_end":566,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":508331,"byte_end":508340,"line_start":567,"line_end":567,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":508342,"byte_end":508372,"line_start":568,"line_end":568,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2919},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":509623,"byte_end":509632,"line_start":605,"line_end":605,"column_start":9,"column_end":18},"name":"as_bitptr","qualname":"<BitVec<O, T>>::as_bitptr","value":"pub fn as_bitptr(&Self) -> *const BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw pointer to the vector’s region.","sig":null,"attributes":[{"value":"/ Returns a raw pointer to the vector’s region.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":508479,"byte_end":508530,"line_start":573,"line_end":573,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":508532,"byte_end":508535,"line_start":574,"line_end":574,"column_start":2,"column_end":5}},{"value":"/ The caller must ensure that the vector outlives the pointer this","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":508537,"byte_end":508605,"line_start":575,"line_end":575,"column_start":2,"column_end":70}},{"value":"/ function returns, or else it will end up pointing to garbage. Modifying","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":508607,"byte_end":508682,"line_start":576,"line_end":576,"column_start":2,"column_end":77}},{"value":"/ the vector may cause its buffer to be reallocated, which would also make","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":508684,"byte_end":508760,"line_start":577,"line_end":577,"column_start":2,"column_end":78}},{"value":"/ any pointers to it invalid.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":508762,"byte_end":508793,"line_start":578,"line_end":578,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":508795,"byte_end":508798,"line_start":579,"line_end":579,"column_start":2,"column_end":5}},{"value":"/ The caller must also ensure that the memory the pointer","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":508800,"byte_end":508859,"line_start":580,"line_end":580,"column_start":2,"column_end":61}},{"value":"/ (non-transitively) points to is never written to (except inside an","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":508861,"byte_end":508931,"line_start":581,"line_end":581,"column_start":2,"column_end":72}},{"value":"/ `UnsafeCell`) using this pointer or any pointer derived from it. If you","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":508933,"byte_end":509008,"line_start":582,"line_end":582,"column_start":2,"column_end":77}},{"value":"/ need to mutate the contents of the region, use [`as_mut_bitptr`].","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":509010,"byte_end":509079,"line_start":583,"line_end":583,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":509081,"byte_end":509084,"line_start":584,"line_end":584,"column_start":2,"column_end":5}},{"value":"/ This pointer is an opaque crate-internal type. Its in-memory","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":509086,"byte_end":509150,"line_start":585,"line_end":585,"column_start":2,"column_end":66}},{"value":"/ representation is unsafe to modify in any way. The only safe action to","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":509152,"byte_end":509226,"line_start":586,"line_end":586,"column_start":2,"column_end":76}},{"value":"/ take with this pointer is to pass it, unchanged, back into a `bitvec`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":509228,"byte_end":509301,"line_start":587,"line_end":587,"column_start":2,"column_end":75}},{"value":"/ API.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":509303,"byte_end":509311,"line_start":588,"line_end":588,"column_start":2,"column_end":10}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":509313,"byte_end":509316,"line_start":589,"line_end":589,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":509318,"byte_end":509332,"line_start":590,"line_end":590,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":509334,"byte_end":509337,"line_start":591,"line_end":591,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":509339,"byte_end":509350,"line_start":592,"line_end":592,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":509352,"byte_end":509379,"line_start":593,"line_end":593,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":509381,"byte_end":509384,"line_start":594,"line_end":594,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![0; 20];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":509386,"byte_end":509414,"line_start":595,"line_end":595,"column_start":2,"column_end":30}},{"value":"/ let ptr = bv.as_bitptr();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":509416,"byte_end":509445,"line_start":596,"line_end":596,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":509447,"byte_end":509450,"line_start":597,"line_end":597,"column_start":2,"column_end":5}},{"value":"/ let bits = unsafe { &*ptr };","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":509452,"byte_end":509484,"line_start":598,"line_end":598,"column_start":2,"column_end":34}},{"value":"/ assert_eq!(bv, bits);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":509486,"byte_end":509511,"line_start":599,"line_end":599,"column_start":2,"column_end":27}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":509513,"byte_end":509520,"line_start":600,"line_end":600,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":509522,"byte_end":509525,"line_start":601,"line_end":601,"column_start":2,"column_end":5}},{"value":"/ [`as_mut_bitptr`]: #method.as_mut_bitptr","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":509527,"byte_end":509571,"line_start":602,"line_end":602,"column_start":2,"column_end":46}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":509573,"byte_end":509582,"line_start":603,"line_end":603,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":509584,"byte_end":509614,"line_start":604,"line_end":604,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2920},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":510552,"byte_end":510565,"line_start":634,"line_end":634,"column_start":9,"column_end":22},"name":"as_mut_bitptr","qualname":"<BitVec<O, T>>::as_mut_bitptr","value":"pub fn as_mut_bitptr(&mut Self) -> *mut BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an unsafe mutable pointer to the vector’s region.","sig":null,"attributes":[{"value":"/ Returns an unsafe mutable pointer to the vector’s region.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":509721,"byte_end":509784,"line_start":609,"line_end":609,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":509786,"byte_end":509789,"line_start":610,"line_end":610,"column_start":2,"column_end":5}},{"value":"/ The caller must ensure that the vector outlives the pointer this","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":509791,"byte_end":509859,"line_start":611,"line_end":611,"column_start":2,"column_end":70}},{"value":"/ function returns, or else it will end up pointing to garbage. Modifying","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":509861,"byte_end":509936,"line_start":612,"line_end":612,"column_start":2,"column_end":77}},{"value":"/ the vector may cause its buffer to be reallocated, which would also make","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":509938,"byte_end":510014,"line_start":613,"line_end":613,"column_start":2,"column_end":78}},{"value":"/ any pointers to it invalid.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":510016,"byte_end":510047,"line_start":614,"line_end":614,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":510049,"byte_end":510052,"line_start":615,"line_end":615,"column_start":2,"column_end":5}},{"value":"/ This pointer is an opaque crate-internal type. Its in-memory","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":510054,"byte_end":510118,"line_start":616,"line_end":616,"column_start":2,"column_end":66}},{"value":"/ representation is unsafe to modify in any way. The only safe action to","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":510120,"byte_end":510194,"line_start":617,"line_end":617,"column_start":2,"column_end":76}},{"value":"/ take with this pointer is to pass it, unchanged, back into a `bitvec`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":510196,"byte_end":510269,"line_start":618,"line_end":618,"column_start":2,"column_end":75}},{"value":"/ API.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":510271,"byte_end":510279,"line_start":619,"line_end":619,"column_start":2,"column_end":10}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":510281,"byte_end":510284,"line_start":620,"line_end":620,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":510286,"byte_end":510300,"line_start":621,"line_end":621,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":510302,"byte_end":510305,"line_start":622,"line_end":622,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":510307,"byte_end":510318,"line_start":623,"line_end":623,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":510320,"byte_end":510347,"line_start":624,"line_end":624,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":510349,"byte_end":510352,"line_start":625,"line_end":625,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0; 20];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":510354,"byte_end":510386,"line_start":626,"line_end":626,"column_start":2,"column_end":34}},{"value":"/ let ptr = bv.as_mut_bitptr();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":510388,"byte_end":510421,"line_start":627,"line_end":627,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":510423,"byte_end":510426,"line_start":628,"line_end":628,"column_start":2,"column_end":5}},{"value":"/ let bits = unsafe { &mut *ptr };","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":510428,"byte_end":510464,"line_start":629,"line_end":629,"column_start":2,"column_end":38}},{"value":"/ assert_eq!(bv, bits);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":510466,"byte_end":510491,"line_start":630,"line_end":630,"column_start":2,"column_end":27}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":510493,"byte_end":510500,"line_start":631,"line_end":631,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":510502,"byte_end":510511,"line_start":632,"line_end":632,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":510513,"byte_end":510543,"line_start":633,"line_end":633,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2986},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":513030,"byte_end":513033,"line_start":58,"line_end":58,"column_start":9,"column_end":12},"name":"new","qualname":"<BitVec<O, T>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new, empty `BitVec<O, T>`.","sig":null,"attributes":[{"value":"/ Constructs a new, empty `BitVec<O, T>`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":512654,"byte_end":512697,"line_start":42,"line_end":42,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":512699,"byte_end":512702,"line_start":43,"line_end":43,"column_start":2,"column_end":5}},{"value":"/ The vector will not allocate until bits are pushed into it.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":512704,"byte_end":512767,"line_start":44,"line_end":44,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":512769,"byte_end":512772,"line_start":45,"line_end":45,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":512774,"byte_end":512788,"line_start":46,"line_end":46,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":512790,"byte_end":512793,"line_start":47,"line_end":47,"column_start":2,"column_end":5}},{"value":"/ [`Vec::new`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.new)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":512795,"byte_end":512875,"line_start":48,"line_end":48,"column_start":2,"column_end":82}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":512877,"byte_end":512880,"line_start":49,"line_end":49,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":512882,"byte_end":512896,"line_start":50,"line_end":50,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":512898,"byte_end":512901,"line_start":51,"line_end":51,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":512903,"byte_end":512914,"line_start":52,"line_end":52,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":512916,"byte_end":512943,"line_start":53,"line_end":53,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":512945,"byte_end":512948,"line_start":54,"line_end":54,"column_start":2,"column_end":5}},{"value":"/ let mut bv = BitVec::<LocalBits, usize>::new();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":512950,"byte_end":513001,"line_start":55,"line_end":55,"column_start":2,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":513003,"byte_end":513010,"line_start":56,"line_end":56,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":513012,"byte_end":513021,"line_start":57,"line_end":57,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2987},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":514343,"byte_end":514356,"line_start":104,"line_end":104,"column_start":9,"column_end":22},"name":"with_capacity","qualname":"<BitVec<O, T>>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new, empty `BitVec<O, T>` with the specified capacity.","sig":null,"attributes":[{"value":"/ Constructs a new, empty `BitVec<O, T>` with the specified capacity.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":513125,"byte_end":513196,"line_start":65,"line_end":65,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":513198,"byte_end":513201,"line_start":66,"line_end":66,"column_start":2,"column_end":5}},{"value":"/ The vector will be able to hold at least `capacity` bits without","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":513203,"byte_end":513271,"line_start":67,"line_end":67,"column_start":2,"column_end":70}},{"value":"/ reällocating. If `capacity` is 0, the vector will not allocate.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":513273,"byte_end":513341,"line_start":68,"line_end":68,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":513343,"byte_end":513346,"line_start":69,"line_end":69,"column_start":2,"column_end":5}},{"value":"/ It is important to note that although the returned vector has the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":513348,"byte_end":513417,"line_start":70,"line_end":70,"column_start":2,"column_end":71}},{"value":"/ *capacity* specified, the vector will have a zero *length*. For an","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":513419,"byte_end":513489,"line_start":71,"line_end":71,"column_start":2,"column_end":72}},{"value":"/ explanation of the difference between length and capacity, see","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":513491,"byte_end":513557,"line_start":72,"line_end":72,"column_start":2,"column_end":68}},{"value":"/ *[Capacity and reällocation]*.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":513559,"byte_end":513594,"line_start":73,"line_end":73,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":513596,"byte_end":513599,"line_start":74,"line_end":74,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":513601,"byte_end":513615,"line_start":75,"line_end":75,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":513617,"byte_end":513620,"line_start":76,"line_end":76,"column_start":2,"column_end":5}},{"value":"/ [`Vec::with_capacity`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.with_capacity)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":513622,"byte_end":513722,"line_start":77,"line_end":77,"column_start":2,"column_end":102}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":513724,"byte_end":513727,"line_start":78,"line_end":78,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":513729,"byte_end":513741,"line_start":79,"line_end":79,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":513743,"byte_end":513746,"line_start":80,"line_end":80,"column_start":2,"column_end":5}},{"value":"/ Panics if the requested capacity exceeds the vector’s limits.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":513748,"byte_end":513815,"line_start":81,"line_end":81,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":513817,"byte_end":513820,"line_start":82,"line_end":82,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":513822,"byte_end":513836,"line_start":83,"line_end":83,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":513838,"byte_end":513841,"line_start":84,"line_end":84,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":513843,"byte_end":513854,"line_start":85,"line_end":85,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":513856,"byte_end":513883,"line_start":86,"line_end":86,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":513885,"byte_end":513888,"line_start":87,"line_end":87,"column_start":2,"column_end":5}},{"value":"/ let mut bv = BitVec::<LocalBits, usize>::with_capacity(10);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":513890,"byte_end":513953,"line_start":88,"line_end":88,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":513955,"byte_end":513958,"line_start":89,"line_end":89,"column_start":2,"column_end":5}},{"value":"/ // The vector contains no items, even though it has capacity for more","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":513960,"byte_end":514033,"line_start":90,"line_end":90,"column_start":2,"column_end":75}},{"value":"/ assert_eq!(bv.len(), 0);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":514035,"byte_end":514063,"line_start":91,"line_end":91,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":514065,"byte_end":514068,"line_start":92,"line_end":92,"column_start":2,"column_end":5}},{"value":"/ // These are all done without reallocating...","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":514070,"byte_end":514119,"line_start":93,"line_end":93,"column_start":2,"column_end":51}},{"value":"/ for i in 0..10 {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":514121,"byte_end":514141,"line_start":94,"line_end":94,"column_start":2,"column_end":22}},{"value":"/   bv.push(true);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":514143,"byte_end":514163,"line_start":95,"line_end":95,"column_start":2,"column_end":22}},{"value":"/ }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":514165,"byte_end":514170,"line_start":96,"line_end":96,"column_start":2,"column_end":7}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":514172,"byte_end":514175,"line_start":97,"line_end":97,"column_start":2,"column_end":5}},{"value":"/ // ...but this may make the vector reallocate","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":514177,"byte_end":514226,"line_start":98,"line_end":98,"column_start":2,"column_end":51}},{"value":"/ bv.push(false);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":514228,"byte_end":514247,"line_start":99,"line_end":99,"column_start":2,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":514249,"byte_end":514256,"line_start":100,"line_end":100,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":514258,"byte_end":514261,"line_start":101,"line_end":101,"column_start":2,"column_end":5}},{"value":"/ [Capacity and reällocation]: #capacity-and-reallocation","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":514263,"byte_end":514323,"line_start":102,"line_end":102,"column_start":2,"column_end":61}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":514325,"byte_end":514334,"line_start":103,"line_end":103,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2989},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":518302,"byte_end":518316,"line_start":209,"line_end":209,"column_start":16,"column_end":30},"name":"from_raw_parts","qualname":"<BitVec<O, T>>::from_raw_parts","value":"pub unsafe fn from_raw_parts(*mut BitSlice<O, T>, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `BitVec<O, T>` directly from the raw components of another\n bit-vector.","sig":null,"attributes":[{"value":"/ Creates a `BitVec<O, T>` directly from the raw components of another","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":514803,"byte_end":514875,"line_start":121,"line_end":121,"column_start":2,"column_end":74}},{"value":"/ bit-vector.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":514877,"byte_end":514892,"line_start":122,"line_end":122,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":514894,"byte_end":514897,"line_start":123,"line_end":123,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":514899,"byte_end":514913,"line_start":124,"line_end":124,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":514915,"byte_end":514918,"line_start":125,"line_end":125,"column_start":2,"column_end":5}},{"value":"/ [`Vec::from_raw_parts`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.from_raw_parts)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":514920,"byte_end":515022,"line_start":126,"line_end":126,"column_start":2,"column_end":104}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":515024,"byte_end":515027,"line_start":127,"line_end":127,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":515029,"byte_end":515050,"line_start":128,"line_end":128,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":515052,"byte_end":515055,"line_start":129,"line_end":129,"column_start":2,"column_end":5}},{"value":"/ Ordinary vectors decompose into their buffer pointer and element length","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":515057,"byte_end":515132,"line_start":130,"line_end":130,"column_start":2,"column_end":77}},{"value":"/ separately; bit vectors must keep these two components bundled into the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":515134,"byte_end":515209,"line_start":131,"line_end":131,"column_start":2,"column_end":77}},{"value":"/ `*BitSlice` region pointer. As such, this only accepts two components;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":515211,"byte_end":515285,"line_start":132,"line_end":132,"column_start":2,"column_end":76}},{"value":"/ the slice pointer and the buffer capacity.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":515287,"byte_end":515333,"line_start":133,"line_end":133,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":515335,"byte_end":515338,"line_start":134,"line_end":134,"column_start":2,"column_end":5}},{"value":"/ `Vec` could define its raw parts as `*[T]` and `usize` also, but Rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":515340,"byte_end":515413,"line_start":135,"line_end":135,"column_start":2,"column_end":75}},{"value":"/ does not make working with raw slice pointers easy.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":515415,"byte_end":515470,"line_start":136,"line_end":136,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":515472,"byte_end":515475,"line_start":137,"line_end":137,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":515477,"byte_end":515489,"line_start":138,"line_end":138,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":515491,"byte_end":515494,"line_start":139,"line_end":139,"column_start":2,"column_end":5}},{"value":"/ This function panics if `pointer` is the null pointer.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":515496,"byte_end":515554,"line_start":140,"line_end":140,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":515556,"byte_end":515559,"line_start":141,"line_end":141,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":515561,"byte_end":515573,"line_start":142,"line_end":142,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":515575,"byte_end":515578,"line_start":143,"line_end":143,"column_start":2,"column_end":5}},{"value":"/ This is highly unsafe, due to the number of invariants that aren’t","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":515580,"byte_end":515652,"line_start":144,"line_end":144,"column_start":2,"column_end":72}},{"value":"/ checked:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":515654,"byte_end":515666,"line_start":145,"line_end":145,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":515668,"byte_end":515671,"line_start":146,"line_end":146,"column_start":2,"column_end":5}},{"value":"/ - `pointer` needs to have been previously allocated via `BitVec<O, T>`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":515673,"byte_end":515747,"line_start":147,"line_end":147,"column_start":2,"column_end":76}},{"value":"/   (at least, it’s highly likely to be incorrect if it wasn’t).","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":515749,"byte_end":515819,"line_start":148,"line_end":148,"column_start":2,"column_end":68}},{"value":"/ - `T` needs to have the same size and alignment as what `pointer` was","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":515821,"byte_end":515894,"line_start":149,"line_end":149,"column_start":2,"column_end":75}},{"value":"/   allocated with. (`T` having a less strict alignment is not sufficient;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":515896,"byte_end":515972,"line_start":150,"line_end":150,"column_start":2,"column_end":78}},{"value":"/   the alignment really needs to be equal to satisfy the [`dealloc`]","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":515974,"byte_end":516045,"line_start":151,"line_end":151,"column_start":2,"column_end":73}},{"value":"/   requirement that memory must be allocated and deällocated with the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":516047,"byte_end":516120,"line_start":152,"line_end":152,"column_start":2,"column_end":74}},{"value":"/   same layout.)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":516122,"byte_end":516141,"line_start":153,"line_end":153,"column_start":2,"column_end":21}},{"value":"/ - `capacity` needs to be the capacity that the pointer was allocated","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":516143,"byte_end":516215,"line_start":154,"line_end":154,"column_start":2,"column_end":74}},{"value":"/   with.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":516217,"byte_end":516228,"line_start":155,"line_end":155,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":516230,"byte_end":516233,"line_start":156,"line_end":156,"column_start":2,"column_end":5}},{"value":"/ In addition to the invariants inherited from `Vec::from_raw_parts`, the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":516235,"byte_end":516310,"line_start":157,"line_end":157,"column_start":2,"column_end":77}},{"value":"/ fact that this function takes a bit-slice pointer adds another one:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":516312,"byte_end":516383,"line_start":158,"line_end":158,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":516385,"byte_end":516388,"line_start":159,"line_end":159,"column_start":2,"column_end":5}},{"value":"/ - **`pointer` MUST NOT have had its value modified in any way in the**","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":516390,"byte_end":516464,"line_start":160,"line_end":160,"column_start":2,"column_end":76}},{"value":"/ **time when it was outside of a `bitvec` container type.**","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":516466,"byte_end":516528,"line_start":161,"line_end":161,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":516530,"byte_end":516533,"line_start":162,"line_end":162,"column_start":2,"column_end":5}},{"value":"/ Violating these *will* cause problems like corrupting the allocator’s","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":516535,"byte_end":516610,"line_start":163,"line_end":163,"column_start":2,"column_end":75}},{"value":"/ internal data structures. For example it is **not** safe to build a","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":516612,"byte_end":516683,"line_start":164,"line_end":164,"column_start":2,"column_end":73}},{"value":"/ `BitVec<_, u8>` from a pointer to a C `char` array with length `size_t`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":516685,"byte_end":516761,"line_start":165,"line_end":165,"column_start":2,"column_end":78}},{"value":"/ It’s also not safe to build one from a `BitVec<_, u16>` and its length,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":516763,"byte_end":516840,"line_start":166,"line_end":166,"column_start":2,"column_end":77}},{"value":"/ becauset the allocator cares about the alignment, and these two types","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":516842,"byte_end":516915,"line_start":167,"line_end":167,"column_start":2,"column_end":75}},{"value":"/ have different alignments. The buffer was allocated with alignment 2","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":516917,"byte_end":516989,"line_start":168,"line_end":168,"column_start":2,"column_end":74}},{"value":"/ (for `u16`), but after turning it into a `BitVec<_, u8>`, it’ll be","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":516991,"byte_end":517063,"line_start":169,"line_end":169,"column_start":2,"column_end":72}},{"value":"/ deällocated with alignment 1.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":517065,"byte_end":517099,"line_start":170,"line_end":170,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":517101,"byte_end":517104,"line_start":171,"line_end":171,"column_start":2,"column_end":5}},{"value":"/ The ownership of `pointer` is effectively transferred to the `BitVec<O,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":517106,"byte_end":517181,"line_start":172,"line_end":172,"column_start":2,"column_end":77}},{"value":"/ T>` which may then deällocate, reällocate, or change the contents of","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":517183,"byte_end":517257,"line_start":173,"line_end":173,"column_start":2,"column_end":74}},{"value":"/ memory pointed to by the pointer at will. Ensure that nothing else uses","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":517259,"byte_end":517334,"line_start":174,"line_end":174,"column_start":2,"column_end":77}},{"value":"/ the pointer after calling this function.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":517336,"byte_end":517380,"line_start":175,"line_end":175,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":517382,"byte_end":517385,"line_start":176,"line_end":176,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":517387,"byte_end":517401,"line_start":177,"line_end":177,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":517403,"byte_end":517406,"line_start":178,"line_end":178,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":517408,"byte_end":517419,"line_start":179,"line_end":179,"column_start":2,"column_end":13}},{"value":"/ # extern crate core;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":517421,"byte_end":517445,"line_start":180,"line_end":180,"column_start":2,"column_end":26}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":517447,"byte_end":517474,"line_start":181,"line_end":181,"column_start":2,"column_end":29}},{"value":"/ use bitvec as bv;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":517476,"byte_end":517497,"line_start":182,"line_end":182,"column_start":2,"column_end":23}},{"value":"/ use core::mem;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":517499,"byte_end":517517,"line_start":183,"line_end":183,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":517519,"byte_end":517522,"line_start":184,"line_end":184,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![0, 1, 0, 1];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":517524,"byte_end":517557,"line_start":185,"line_end":185,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":517559,"byte_end":517562,"line_start":186,"line_end":186,"column_start":2,"column_end":5}},{"value":"/ // Prevent running `bv`’s destructor so we are in complete control","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":517564,"byte_end":517636,"line_start":187,"line_end":187,"column_start":2,"column_end":72}},{"value":"/ // of the allocation.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":517638,"byte_end":517663,"line_start":188,"line_end":188,"column_start":2,"column_end":27}},{"value":"/ let mut bv = mem::ManuallyDrop::new(bv);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":517665,"byte_end":517709,"line_start":189,"line_end":189,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":517711,"byte_end":517714,"line_start":190,"line_end":190,"column_start":2,"column_end":5}},{"value":"/ // Pull out the various important pieces of information about `bv`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":517716,"byte_end":517786,"line_start":191,"line_end":191,"column_start":2,"column_end":72}},{"value":"/ let p = bv.as_mut_ptr();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":517788,"byte_end":517816,"line_start":192,"line_end":192,"column_start":2,"column_end":30}},{"value":"/ let e = bv.elements();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":517818,"byte_end":517844,"line_start":193,"line_end":193,"column_start":2,"column_end":28}},{"value":"/ let cap = bv.capacity();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":517846,"byte_end":517874,"line_start":194,"line_end":194,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":517876,"byte_end":517879,"line_start":195,"line_end":195,"column_start":2,"column_end":5}},{"value":"/ unsafe {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":517881,"byte_end":517893,"line_start":196,"line_end":196,"column_start":2,"column_end":14}},{"value":"/   let bits = bv::slice::from_raw_parts_mut::<LocalBits, _>(p, e);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":517895,"byte_end":517964,"line_start":197,"line_end":197,"column_start":2,"column_end":71}},{"value":"/   let len = bits.len();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":517966,"byte_end":517993,"line_start":198,"line_end":198,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":517995,"byte_end":517998,"line_start":199,"line_end":199,"column_start":2,"column_end":5}},{"value":"/   // Overwrite memory with a new pattern","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":518000,"byte_end":518044,"line_start":200,"line_end":200,"column_start":2,"column_end":46}},{"value":"/   bits.iter_mut().for_each(|mut b| *b = true);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":518046,"byte_end":518096,"line_start":201,"line_end":201,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":518098,"byte_end":518101,"line_start":202,"line_end":202,"column_start":2,"column_end":5}},{"value":"/   // Put everything back together into a BitVec","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":518103,"byte_end":518154,"line_start":203,"line_end":203,"column_start":2,"column_end":53}},{"value":"/   let rebuilt = BitVec::from_raw_parts(bits as *mut _, cap);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":518156,"byte_end":518220,"line_start":204,"line_end":204,"column_start":2,"column_end":66}},{"value":"/   assert_eq!(rebuilt.len(), len);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":518222,"byte_end":518259,"line_start":205,"line_end":205,"column_start":2,"column_end":39}},{"value":"/ }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":518261,"byte_end":518266,"line_start":206,"line_end":206,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":518268,"byte_end":518275,"line_start":207,"line_end":207,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":518277,"byte_end":518286,"line_start":208,"line_end":208,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2991},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":519012,"byte_end":519020,"line_start":237,"line_end":237,"column_start":9,"column_end":17},"name":"capacity","qualname":"<BitVec<O, T>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bits the vector can hold without reällocating.","sig":null,"attributes":[{"value":"/ Returns the number of bits the vector can hold without reällocating.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":518615,"byte_end":518688,"line_start":222,"line_end":222,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":518690,"byte_end":518693,"line_start":223,"line_end":223,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":518695,"byte_end":518709,"line_start":224,"line_end":224,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":518711,"byte_end":518714,"line_start":225,"line_end":225,"column_start":2,"column_end":5}},{"value":"/ [`Vec::capacity`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.capacity)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":518716,"byte_end":518806,"line_start":226,"line_end":226,"column_start":2,"column_end":92}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":518808,"byte_end":518811,"line_start":227,"line_end":227,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":518813,"byte_end":518827,"line_start":228,"line_end":228,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":518829,"byte_end":518832,"line_start":229,"line_end":229,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":518834,"byte_end":518845,"line_start":230,"line_end":230,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":518847,"byte_end":518874,"line_start":231,"line_end":231,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":518876,"byte_end":518879,"line_start":232,"line_end":232,"column_start":2,"column_end":5}},{"value":"/ let bv: BitVec<LocalBits, usize> = BitVec::with_capacity(100);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":518881,"byte_end":518947,"line_start":233,"line_end":233,"column_start":2,"column_end":68}},{"value":"/ assert!(bv.capacity() >= 100);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":518949,"byte_end":518983,"line_start":234,"line_end":234,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":518985,"byte_end":518992,"line_start":235,"line_end":235,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":518994,"byte_end":519003,"line_start":236,"line_end":236,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2992},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":520093,"byte_end":520100,"line_start":271,"line_end":271,"column_start":9,"column_end":16},"name":"reserve","qualname":"<BitVec<O, T>>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for at least `additional` more bits to be inserted in\n the given `BitVec<O, T>`. The collection may reserve more space to avoid\n frequent reällocations. After calling `reserve`, capacity will be\n greater than or equal to `self.len() + additional`. Does nothing if\n capacity is already sufficient.","sig":null,"attributes":[{"value":"/ Reserves capacity for at least `additional` more bits to be inserted in","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":519365,"byte_end":519440,"line_start":247,"line_end":247,"column_start":2,"column_end":77}},{"value":"/ the given `BitVec<O, T>`. The collection may reserve more space to avoid","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":519442,"byte_end":519518,"line_start":248,"line_end":248,"column_start":2,"column_end":78}},{"value":"/ frequent reällocations. After calling `reserve`, capacity will be","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":519520,"byte_end":519590,"line_start":249,"line_end":249,"column_start":2,"column_end":71}},{"value":"/ greater than or equal to `self.len() + additional`. Does nothing if","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":519592,"byte_end":519663,"line_start":250,"line_end":250,"column_start":2,"column_end":73}},{"value":"/ capacity is already sufficient.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":519665,"byte_end":519700,"line_start":251,"line_end":251,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":519702,"byte_end":519705,"line_start":252,"line_end":252,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":519707,"byte_end":519721,"line_start":253,"line_end":253,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":519723,"byte_end":519726,"line_start":254,"line_end":254,"column_start":2,"column_end":5}},{"value":"/ [`Vec::reserve`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.reserve)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":519728,"byte_end":519816,"line_start":255,"line_end":255,"column_start":2,"column_end":90}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":519818,"byte_end":519821,"line_start":256,"line_end":256,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":519823,"byte_end":519835,"line_start":257,"line_end":257,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":519837,"byte_end":519840,"line_start":258,"line_end":258,"column_start":2,"column_end":5}},{"value":"/ Panics if the new capacity exceeds the vector’s limits.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":519842,"byte_end":519903,"line_start":259,"line_end":259,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":519905,"byte_end":519908,"line_start":260,"line_end":260,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":519910,"byte_end":519924,"line_start":261,"line_end":261,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":519926,"byte_end":519929,"line_start":262,"line_end":262,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":519931,"byte_end":519942,"line_start":263,"line_end":263,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":519944,"byte_end":519971,"line_start":264,"line_end":264,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":519973,"byte_end":519976,"line_start":265,"line_end":265,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![1];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":519978,"byte_end":520006,"line_start":266,"line_end":266,"column_start":2,"column_end":30}},{"value":"/ bv.reserve(100);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":520008,"byte_end":520028,"line_start":267,"line_end":267,"column_start":2,"column_end":22}},{"value":"/ assert!(bv.capacity() >= 101);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":520030,"byte_end":520064,"line_start":268,"line_end":268,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":520066,"byte_end":520073,"line_start":269,"line_end":269,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":520075,"byte_end":520084,"line_start":270,"line_end":270,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2994},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":521685,"byte_end":521698,"line_start":321,"line_end":321,"column_start":9,"column_end":22},"name":"reserve_exact","qualname":"<BitVec<O, T>>::reserve_exact","value":"pub fn reserve_exact(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserves the minimum capacity for exactly `additional` more bits to be\n inserted in the given `BitVec<O, T>`. After calling `reserve_exact`,\n capacity will be greater than or equal to `self.len() + additional`.\n Does nothing if the capacity is already sufficient.","sig":null,"attributes":[{"value":"/ Reserves the minimum capacity for exactly `additional` more bits to be","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":520778,"byte_end":520852,"line_start":294,"line_end":294,"column_start":2,"column_end":76}},{"value":"/ inserted in the given `BitVec<O, T>`. After calling `reserve_exact`,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":520854,"byte_end":520926,"line_start":295,"line_end":295,"column_start":2,"column_end":74}},{"value":"/ capacity will be greater than or equal to `self.len() + additional`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":520928,"byte_end":521000,"line_start":296,"line_end":296,"column_start":2,"column_end":74}},{"value":"/ Does nothing if the capacity is already sufficient.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":521002,"byte_end":521057,"line_start":297,"line_end":297,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":521059,"byte_end":521062,"line_start":298,"line_end":298,"column_start":2,"column_end":5}},{"value":"/ Note that the allocator may give the collection more space than it","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":521064,"byte_end":521134,"line_start":299,"line_end":299,"column_start":2,"column_end":72}},{"value":"/ requests. Therefore, capacity can not be relied upon to be precisely","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":521136,"byte_end":521208,"line_start":300,"line_end":300,"column_start":2,"column_end":74}},{"value":"/ minimal. Prefer `reserve` if future insertions are expected.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":521210,"byte_end":521274,"line_start":301,"line_end":301,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":521276,"byte_end":521279,"line_start":302,"line_end":302,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":521281,"byte_end":521295,"line_start":303,"line_end":303,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":521297,"byte_end":521300,"line_start":304,"line_end":304,"column_start":2,"column_end":5}},{"value":"/ [`Vec::reserve_exact`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.reserve_exact)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":521302,"byte_end":521402,"line_start":305,"line_end":305,"column_start":2,"column_end":102}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":521404,"byte_end":521407,"line_start":306,"line_end":306,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":521409,"byte_end":521421,"line_start":307,"line_end":307,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":521423,"byte_end":521426,"line_start":308,"line_end":308,"column_start":2,"column_end":5}},{"value":"/ Panics if the new capacity exceeds the vector’s limits.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":521428,"byte_end":521489,"line_start":309,"line_end":309,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":521491,"byte_end":521494,"line_start":310,"line_end":310,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":521496,"byte_end":521510,"line_start":311,"line_end":311,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":521512,"byte_end":521515,"line_start":312,"line_end":312,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":521517,"byte_end":521528,"line_start":313,"line_end":313,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":521530,"byte_end":521557,"line_start":314,"line_end":314,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":521559,"byte_end":521562,"line_start":315,"line_end":315,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![1];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":521564,"byte_end":521592,"line_start":316,"line_end":316,"column_start":2,"column_end":30}},{"value":"/ bv.reserve_exact(100);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":521594,"byte_end":521620,"line_start":317,"line_end":317,"column_start":2,"column_end":28}},{"value":"/ assert!(bv.capacity() >= 101);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":521622,"byte_end":521656,"line_start":318,"line_end":318,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":521658,"byte_end":521665,"line_start":319,"line_end":319,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":521667,"byte_end":521676,"line_start":320,"line_end":320,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2996},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":522892,"byte_end":522905,"line_start":362,"line_end":362,"column_start":9,"column_end":22},"name":"shrink_to_fit","qualname":"<BitVec<O, T>>::shrink_to_fit","value":"pub fn shrink_to_fit(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the vector as much as possible.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the vector as much as possible.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":522233,"byte_end":522292,"line_start":341,"line_end":341,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":522294,"byte_end":522297,"line_start":342,"line_end":342,"column_start":2,"column_end":5}},{"value":"/ It will drop down as close as possible to the length but the allocator","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":522299,"byte_end":522373,"line_start":343,"line_end":343,"column_start":2,"column_end":76}},{"value":"/ may still inform the vector that there is space for a few more bits.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":522375,"byte_end":522447,"line_start":344,"line_end":344,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":522449,"byte_end":522452,"line_start":345,"line_end":345,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":522454,"byte_end":522468,"line_start":346,"line_end":346,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":522470,"byte_end":522473,"line_start":347,"line_end":347,"column_start":2,"column_end":5}},{"value":"/ [`Vec::shrink_to_fit`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.shrink_to_fit)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":522475,"byte_end":522575,"line_start":348,"line_end":348,"column_start":2,"column_end":102}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":522577,"byte_end":522580,"line_start":349,"line_end":349,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":522582,"byte_end":522596,"line_start":350,"line_end":350,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":522598,"byte_end":522601,"line_start":351,"line_end":351,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":522603,"byte_end":522614,"line_start":352,"line_end":352,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":522616,"byte_end":522643,"line_start":353,"line_end":353,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":522645,"byte_end":522648,"line_start":354,"line_end":354,"column_start":2,"column_end":5}},{"value":"/ let mut bv = BitVec::<LocalBits, usize>::with_capacity(100);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":522650,"byte_end":522714,"line_start":355,"line_end":355,"column_start":2,"column_end":66}},{"value":"/ bv.extend([false, true, false].iter().copied());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":522716,"byte_end":522768,"line_start":356,"line_end":356,"column_start":2,"column_end":54}},{"value":"/ assert!(bv.capacity() >= 100);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":522770,"byte_end":522804,"line_start":357,"line_end":357,"column_start":2,"column_end":36}},{"value":"/ bv.shrink_to_fit();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":522806,"byte_end":522829,"line_start":358,"line_end":358,"column_start":2,"column_end":25}},{"value":"/ assert!(bv.capacity() >= 3);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":522831,"byte_end":522863,"line_start":359,"line_end":359,"column_start":2,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":522865,"byte_end":522872,"line_start":360,"line_end":360,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":522874,"byte_end":522883,"line_start":361,"line_end":361,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2998},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":523980,"byte_end":523996,"line_start":405,"line_end":405,"column_start":9,"column_end":25},"name":"into_boxed_slice","qualname":"<BitVec<O, T>>::into_boxed_slice","value":"pub fn into_boxed_slice(Self) -> Box<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Converts the vector into [`Box<[T]>`].","sig":null,"attributes":[{"value":"/ Converts the vector into [`Box<[T]>`].","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":522964,"byte_end":523006,"line_start":366,"line_end":366,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":523008,"byte_end":523011,"line_start":367,"line_end":367,"column_start":2,"column_end":5}},{"value":"/ Note that this will drop any excess capacity.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":523013,"byte_end":523062,"line_start":368,"line_end":368,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":523064,"byte_end":523067,"line_start":369,"line_end":369,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":523069,"byte_end":523083,"line_start":370,"line_end":370,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":523085,"byte_end":523088,"line_start":371,"line_end":371,"column_start":2,"column_end":5}},{"value":"/ [`Vec::into_boxed_slice`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.into_boxed_slice)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":523090,"byte_end":523196,"line_start":372,"line_end":372,"column_start":2,"column_end":108}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":523198,"byte_end":523201,"line_start":373,"line_end":373,"column_start":2,"column_end":5}},{"value":"/ # Analogue","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":523203,"byte_end":523217,"line_start":374,"line_end":374,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":523219,"byte_end":523222,"line_start":375,"line_end":375,"column_start":2,"column_end":5}},{"value":"/ See [`into_boxed_bitslice`] for a `BitVec -> BitBox` transform.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":523224,"byte_end":523291,"line_start":376,"line_end":376,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":523293,"byte_end":523296,"line_start":377,"line_end":377,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":523298,"byte_end":523312,"line_start":378,"line_end":378,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":523314,"byte_end":523317,"line_start":379,"line_end":379,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":523319,"byte_end":523330,"line_start":380,"line_end":380,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":523332,"byte_end":523359,"line_start":381,"line_end":381,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":523361,"byte_end":523364,"line_start":382,"line_end":382,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![0, 1, 0];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":523366,"byte_end":523396,"line_start":383,"line_end":383,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":523398,"byte_end":523401,"line_start":384,"line_end":384,"column_start":2,"column_end":5}},{"value":"/ let slice = bv.into_boxed_slice();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":523403,"byte_end":523441,"line_start":385,"line_end":385,"column_start":2,"column_end":40}},{"value":"/ assert_eq!(slice.len(), 1);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":523443,"byte_end":523474,"line_start":386,"line_end":386,"column_start":2,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":523476,"byte_end":523483,"line_start":387,"line_end":387,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":523485,"byte_end":523488,"line_start":388,"line_end":388,"column_start":2,"column_end":5}},{"value":"/ Any excess capacity is removed:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":523490,"byte_end":523525,"line_start":389,"line_end":389,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":523527,"byte_end":523530,"line_start":390,"line_end":390,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":523532,"byte_end":523543,"line_start":391,"line_end":391,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":523545,"byte_end":523572,"line_start":392,"line_end":392,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":523574,"byte_end":523577,"line_start":393,"line_end":393,"column_start":2,"column_end":5}},{"value":"/ let mut bv: BitVec = BitVec::with_capacity(100);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":523579,"byte_end":523631,"line_start":394,"line_end":394,"column_start":2,"column_end":54}},{"value":"/ bv.extend([false, true, false].iter().copied());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":523633,"byte_end":523685,"line_start":395,"line_end":395,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":523687,"byte_end":523690,"line_start":396,"line_end":396,"column_start":2,"column_end":5}},{"value":"/ assert!(bv.capacity() >= 100);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":523692,"byte_end":523726,"line_start":397,"line_end":397,"column_start":2,"column_end":36}},{"value":"/ let slice = bv.into_boxed_slice();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":523728,"byte_end":523766,"line_start":398,"line_end":398,"column_start":2,"column_end":40}},{"value":"/ assert_eq!(slice.into_vec().capacity(), 1);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":523768,"byte_end":523815,"line_start":399,"line_end":399,"column_start":2,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":523817,"byte_end":523824,"line_start":400,"line_end":400,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":523826,"byte_end":523829,"line_start":401,"line_end":401,"column_start":2,"column_end":5}},{"value":"/ [`Box<[T]>`]: https://doc.rust-lang.org/alloc/boxed/struct.Box.html","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":523831,"byte_end":523902,"line_start":402,"line_end":402,"column_start":2,"column_end":73}},{"value":"/ [`into_boxed_bitslice`]: #method.into_boxed_bitslice","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":523904,"byte_end":523960,"line_start":403,"line_end":403,"column_start":2,"column_end":58}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":523962,"byte_end":523971,"line_start":404,"line_end":404,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2999},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":525582,"byte_end":525590,"line_start":464,"line_end":464,"column_start":9,"column_end":17},"name":"truncate","qualname":"<BitVec<O, T>>::truncate","value":"pub fn truncate(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shortens the vector, keeping the first `len` bits and dropping the rest.","sig":null,"attributes":[{"value":"/ Shortens the vector, keeping the first `len` bits and dropping the rest.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":524059,"byte_end":524135,"line_start":409,"line_end":409,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":524137,"byte_end":524140,"line_start":410,"line_end":410,"column_start":2,"column_end":5}},{"value":"/ If `len` is greater than the vector’s current length, this has no","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":524142,"byte_end":524213,"line_start":411,"line_end":411,"column_start":2,"column_end":71}},{"value":"/ effect.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":524215,"byte_end":524226,"line_start":412,"line_end":412,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":524228,"byte_end":524231,"line_start":413,"line_end":413,"column_start":2,"column_end":5}},{"value":"/ The [`drain`] method can emulate `truncate`, but causes the excess bits","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":524233,"byte_end":524308,"line_start":414,"line_end":414,"column_start":2,"column_end":77}},{"value":"/ to be returned instead of dropped.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":524310,"byte_end":524348,"line_start":415,"line_end":415,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":524350,"byte_end":524353,"line_start":416,"line_end":416,"column_start":2,"column_end":5}},{"value":"/ Note that this method has no effect on the allocated capacity of the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":524355,"byte_end":524427,"line_start":417,"line_end":417,"column_start":2,"column_end":74}},{"value":"/ vector, **nor does it erase truncated memory**. Bits in the allocated","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":524429,"byte_end":524502,"line_start":418,"line_end":418,"column_start":2,"column_end":75}},{"value":"/ memory that are outside of the `.as_bitslice()` view always have","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":524504,"byte_end":524572,"line_start":419,"line_end":419,"column_start":2,"column_end":70}},{"value":"/ **unspecified** values, and cannot be relied upon to be zero.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":524574,"byte_end":524639,"line_start":420,"line_end":420,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":524641,"byte_end":524644,"line_start":421,"line_end":421,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":524646,"byte_end":524660,"line_start":422,"line_end":422,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":524662,"byte_end":524665,"line_start":423,"line_end":423,"column_start":2,"column_end":5}},{"value":"/ [`Vec::truncate`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.truncate)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":524667,"byte_end":524757,"line_start":424,"line_end":424,"column_start":2,"column_end":92}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":524759,"byte_end":524762,"line_start":425,"line_end":425,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":524764,"byte_end":524778,"line_start":426,"line_end":426,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":524780,"byte_end":524783,"line_start":427,"line_end":427,"column_start":2,"column_end":5}},{"value":"/ Truncating a five bit vector to two bits:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":524785,"byte_end":524830,"line_start":428,"line_end":428,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":524832,"byte_end":524835,"line_start":429,"line_end":429,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":524837,"byte_end":524848,"line_start":430,"line_end":430,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":524850,"byte_end":524877,"line_start":431,"line_end":431,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":524879,"byte_end":524882,"line_start":432,"line_end":432,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![1; 5];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":524884,"byte_end":524915,"line_start":433,"line_end":433,"column_start":2,"column_end":33}},{"value":"/ bv.truncate(2);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":524917,"byte_end":524936,"line_start":434,"line_end":434,"column_start":2,"column_end":21}},{"value":"/ assert_eq!(bv.len(), 2);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":524938,"byte_end":524966,"line_start":435,"line_end":435,"column_start":2,"column_end":30}},{"value":"/ assert!(bv.as_slice()[0].count_ones() >= 5);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":524968,"byte_end":525016,"line_start":436,"line_end":436,"column_start":2,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":525018,"byte_end":525025,"line_start":437,"line_end":437,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":525027,"byte_end":525030,"line_start":438,"line_end":438,"column_start":2,"column_end":5}},{"value":"/ No truncation occurs when `len` is greater than the vector’s current","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":525032,"byte_end":525106,"line_start":439,"line_end":439,"column_start":2,"column_end":74}},{"value":"/ length:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":525108,"byte_end":525119,"line_start":440,"line_end":440,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":525121,"byte_end":525124,"line_start":441,"line_end":441,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":525126,"byte_end":525137,"line_start":442,"line_end":442,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":525139,"byte_end":525166,"line_start":443,"line_end":443,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":525168,"byte_end":525171,"line_start":444,"line_end":444,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![1; 3];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":525173,"byte_end":525204,"line_start":445,"line_end":445,"column_start":2,"column_end":33}},{"value":"/ bv.truncate(8);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":525206,"byte_end":525225,"line_start":446,"line_end":446,"column_start":2,"column_end":21}},{"value":"/ assert_eq!(bv.len(), 3);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":525227,"byte_end":525255,"line_start":447,"line_end":447,"column_start":2,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":525257,"byte_end":525264,"line_start":448,"line_end":448,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":525266,"byte_end":525269,"line_start":449,"line_end":449,"column_start":2,"column_end":5}},{"value":"/ Truncating when `len == 0` is equivalent to calling the [`clear`]","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":525271,"byte_end":525340,"line_start":450,"line_end":450,"column_start":2,"column_end":71}},{"value":"/ method.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":525342,"byte_end":525353,"line_start":451,"line_end":451,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":525355,"byte_end":525358,"line_start":452,"line_end":452,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":525360,"byte_end":525371,"line_start":453,"line_end":453,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":525373,"byte_end":525400,"line_start":454,"line_end":454,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":525402,"byte_end":525405,"line_start":455,"line_end":455,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0; 3];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":525407,"byte_end":525438,"line_start":456,"line_end":456,"column_start":2,"column_end":33}},{"value":"/ bv.truncate(0);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":525440,"byte_end":525459,"line_start":457,"line_end":457,"column_start":2,"column_end":21}},{"value":"/ assert!(bv.is_empty());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":525461,"byte_end":525488,"line_start":458,"line_end":458,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":525490,"byte_end":525497,"line_start":459,"line_end":459,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":525499,"byte_end":525502,"line_start":460,"line_end":460,"column_start":2,"column_end":5}},{"value":"/ [`clear`]: #method.clear","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":525504,"byte_end":525532,"line_start":461,"line_end":461,"column_start":2,"column_end":30}},{"value":"/ [`drain`]: #method.drain","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":525534,"byte_end":525562,"line_start":462,"line_end":462,"column_start":2,"column_end":30}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":525564,"byte_end":525573,"line_start":463,"line_end":463,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3000},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":526312,"byte_end":526320,"line_start":494,"line_end":494,"column_start":9,"column_end":17},"name":"as_slice","qualname":"<BitVec<O, T>>::as_slice","value":"pub fn as_slice(&Self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" Extracts an element slice containing the entire vector.","sig":null,"attributes":[{"value":"/ Extracts an element slice containing the entire vector.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":525681,"byte_end":525740,"line_start":470,"line_end":470,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":525742,"byte_end":525745,"line_start":471,"line_end":471,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":525747,"byte_end":525761,"line_start":472,"line_end":472,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":525763,"byte_end":525766,"line_start":473,"line_end":473,"column_start":2,"column_end":5}},{"value":"/ [`Vec::as_slice`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.as_slice)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":525768,"byte_end":525858,"line_start":474,"line_end":474,"column_start":2,"column_end":92}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":525860,"byte_end":525863,"line_start":475,"line_end":475,"column_start":2,"column_end":5}},{"value":"/ # Analogue","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":525865,"byte_end":525879,"line_start":476,"line_end":476,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":525881,"byte_end":525884,"line_start":477,"line_end":477,"column_start":2,"column_end":5}},{"value":"/ See [`as_bitslice`] for a `&BitVec -> &BitSlice` transform.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":525886,"byte_end":525949,"line_start":478,"line_end":478,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":525951,"byte_end":525954,"line_start":479,"line_end":479,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":525956,"byte_end":525970,"line_start":480,"line_end":480,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":525972,"byte_end":525975,"line_start":481,"line_end":481,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":525977,"byte_end":525988,"line_start":482,"line_end":482,"column_start":2,"column_end":13}},{"value":"/ # #[cfg(feature = \"std\")] {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":525990,"byte_end":526021,"line_start":483,"line_end":483,"column_start":2,"column_end":33}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":526023,"byte_end":526050,"line_start":484,"line_end":484,"column_start":2,"column_end":29}},{"value":"/ use std::io::{self, Write};","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":526052,"byte_end":526083,"line_start":485,"line_end":485,"column_start":2,"column_end":33}},{"value":"/ let buffer = bitvec![Msb0, u8; 0, 1, 0, 1, 1, 0, 0, 0];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":526085,"byte_end":526144,"line_start":486,"line_end":486,"column_start":2,"column_end":61}},{"value":"/ io::sink().write(buffer.as_slice()).unwrap();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":526146,"byte_end":526195,"line_start":487,"line_end":487,"column_start":2,"column_end":51}},{"value":"/ # }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":526197,"byte_end":526204,"line_start":488,"line_end":488,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":526206,"byte_end":526213,"line_start":489,"line_end":489,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":526215,"byte_end":526218,"line_start":490,"line_end":490,"column_start":2,"column_end":5}},{"value":"/ [`as_bitslice`]: #method.as_bitslice","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":526220,"byte_end":526260,"line_start":491,"line_end":491,"column_start":2,"column_end":42}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":526262,"byte_end":526271,"line_start":492,"line_end":492,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":526273,"byte_end":526303,"line_start":493,"line_end":493,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":3001},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":527143,"byte_end":527155,"line_start":524,"line_end":524,"column_start":9,"column_end":21},"name":"as_mut_slice","qualname":"<BitVec<O, T>>::as_mut_slice","value":"pub fn as_mut_slice(&mut Self) -> &mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Extracts a mutable slice of the entire vector.","sig":null,"attributes":[{"value":"/ Extracts a mutable slice of the entire vector.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":526491,"byte_end":526541,"line_start":500,"line_end":500,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":526543,"byte_end":526546,"line_start":501,"line_end":501,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":526548,"byte_end":526562,"line_start":502,"line_end":502,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":526564,"byte_end":526567,"line_start":503,"line_end":503,"column_start":2,"column_end":5}},{"value":"/ [`Vec::as_mut_slice`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.as_mut_slice)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":526569,"byte_end":526667,"line_start":504,"line_end":504,"column_start":2,"column_end":100}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":526669,"byte_end":526672,"line_start":505,"line_end":505,"column_start":2,"column_end":5}},{"value":"/ # Analogue","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":526674,"byte_end":526688,"line_start":506,"line_end":506,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":526690,"byte_end":526693,"line_start":507,"line_end":507,"column_start":2,"column_end":5}},{"value":"/ See [`as_mut_bitslice`] for a `&mut BitVec -> &mut BitSlice` transform.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":526695,"byte_end":526770,"line_start":508,"line_end":508,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":526772,"byte_end":526775,"line_start":509,"line_end":509,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":526777,"byte_end":526791,"line_start":510,"line_end":510,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":526793,"byte_end":526796,"line_start":511,"line_end":511,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":526798,"byte_end":526809,"line_start":512,"line_end":512,"column_start":2,"column_end":13}},{"value":"/ # #[cfg(feature = \"std\")] {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":526811,"byte_end":526842,"line_start":513,"line_end":513,"column_start":2,"column_end":33}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":526844,"byte_end":526871,"line_start":514,"line_end":514,"column_start":2,"column_end":29}},{"value":"/ use std::io::{self, Read};","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":526873,"byte_end":526903,"line_start":515,"line_end":515,"column_start":2,"column_end":32}},{"value":"/ let mut buffer = bitvec![Msb0, u8; 0; 24];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":526905,"byte_end":526951,"line_start":516,"line_end":516,"column_start":2,"column_end":48}},{"value":"/ io::repeat(0b101).read_exact(buffer.as_mut_slice()).unwrap();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":526953,"byte_end":527018,"line_start":517,"line_end":517,"column_start":2,"column_end":67}},{"value":"/ # }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":527020,"byte_end":527027,"line_start":518,"line_end":518,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":527029,"byte_end":527036,"line_start":519,"line_end":519,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":527038,"byte_end":527041,"line_start":520,"line_end":520,"column_start":2,"column_end":5}},{"value":"/ [`as_mut_bitslice`]: #method.as_mut_bitslice","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":527043,"byte_end":527091,"line_start":521,"line_end":521,"column_start":2,"column_end":50}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":527093,"byte_end":527102,"line_start":522,"line_end":522,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":527104,"byte_end":527134,"line_start":523,"line_end":523,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":3002},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":528410,"byte_end":528416,"line_start":564,"line_end":564,"column_start":9,"column_end":15},"name":"as_ptr","qualname":"<BitVec<O, T>>::as_ptr","value":"pub fn as_ptr(&Self) -> *const T","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw pointer to the vector’s buffer.","sig":null,"attributes":[{"value":"/ Returns a raw pointer to the vector’s buffer.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":527336,"byte_end":527387,"line_start":530,"line_end":530,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":527389,"byte_end":527392,"line_start":531,"line_end":531,"column_start":2,"column_end":5}},{"value":"/ The caller must ensure that the vector outlives the pointer this","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":527394,"byte_end":527462,"line_start":532,"line_end":532,"column_start":2,"column_end":70}},{"value":"/ function returns, or else it will end up pointing to garbage. Modifying","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":527464,"byte_end":527539,"line_start":533,"line_end":533,"column_start":2,"column_end":77}},{"value":"/ the vector may cause its buffer to be reällocated, which would also make","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":527541,"byte_end":527618,"line_start":534,"line_end":534,"column_start":2,"column_end":78}},{"value":"/ any pointers to it invalid.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":527620,"byte_end":527651,"line_start":535,"line_end":535,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":527653,"byte_end":527656,"line_start":536,"line_end":536,"column_start":2,"column_end":5}},{"value":"/ The caller must also ensure that the memory the pointer","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":527658,"byte_end":527717,"line_start":537,"line_end":537,"column_start":2,"column_end":61}},{"value":"/ (non-transitively) points to is never written to (except inside an","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":527719,"byte_end":527789,"line_start":538,"line_end":538,"column_start":2,"column_end":72}},{"value":"/ `UnsafeCell`) using this pointer or any pointer derived from it. If you","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":527791,"byte_end":527866,"line_start":539,"line_end":539,"column_start":2,"column_end":77}},{"value":"/ need to mutate the contents of the slice, use [`as_mut_ptr`].","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":527868,"byte_end":527933,"line_start":540,"line_end":540,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":527935,"byte_end":527938,"line_start":541,"line_end":541,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":527940,"byte_end":527954,"line_start":542,"line_end":542,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":527956,"byte_end":527959,"line_start":543,"line_end":543,"column_start":2,"column_end":5}},{"value":"/ [`Vec::as_ptr`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.as_ptr)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":527961,"byte_end":528047,"line_start":544,"line_end":544,"column_start":2,"column_end":88}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":528049,"byte_end":528052,"line_start":545,"line_end":545,"column_start":2,"column_end":5}},{"value":"/ # Analogue","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":528054,"byte_end":528068,"line_start":546,"line_end":546,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":528070,"byte_end":528073,"line_start":547,"line_end":547,"column_start":2,"column_end":5}},{"value":"/ See [`as_bitptr`] for a `&BitVec -> *const BitSlice` transform.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":528075,"byte_end":528142,"line_start":548,"line_end":548,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":528144,"byte_end":528147,"line_start":549,"line_end":549,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":528149,"byte_end":528163,"line_start":550,"line_end":550,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":528165,"byte_end":528168,"line_start":551,"line_end":551,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":528170,"byte_end":528181,"line_start":552,"line_end":552,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":528183,"byte_end":528210,"line_start":553,"line_end":553,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":528212,"byte_end":528215,"line_start":554,"line_end":554,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![Lsb0; 0, 1, 0, 1];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":528217,"byte_end":528256,"line_start":555,"line_end":555,"column_start":2,"column_end":41}},{"value":"/ let bv_ptr = bv.as_ptr();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":528258,"byte_end":528287,"line_start":556,"line_end":556,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":528289,"byte_end":528292,"line_start":557,"line_end":557,"column_start":2,"column_end":5}},{"value":"/ unsafe {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":528294,"byte_end":528306,"line_start":558,"line_end":558,"column_start":2,"column_end":14}},{"value":"/   assert_eq!(*bv_ptr, 0b1010);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":528308,"byte_end":528342,"line_start":559,"line_end":559,"column_start":2,"column_end":36}},{"value":"/ }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":528344,"byte_end":528349,"line_start":560,"line_end":560,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":528351,"byte_end":528358,"line_start":561,"line_end":561,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":528360,"byte_end":528369,"line_start":562,"line_end":562,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":528371,"byte_end":528401,"line_start":563,"line_end":563,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":3003},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":529463,"byte_end":529473,"line_start":603,"line_end":603,"column_start":9,"column_end":19},"name":"as_mut_ptr","qualname":"<BitVec<O, T>>::as_mut_ptr","value":"pub fn as_mut_ptr(&mut Self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns an unsafe mutable pointer to the vector’s buffer.","sig":null,"attributes":[{"value":"/ Returns an unsafe mutable pointer to the vector’s buffer.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":528480,"byte_end":528543,"line_start":568,"line_end":568,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":528545,"byte_end":528548,"line_start":569,"line_end":569,"column_start":2,"column_end":5}},{"value":"/ The caller must ensure that the vector outlives the pointer this","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":528550,"byte_end":528618,"line_start":570,"line_end":570,"column_start":2,"column_end":70}},{"value":"/ function returns, or else it will end up pointing to garbage. Modifying","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":528620,"byte_end":528695,"line_start":571,"line_end":571,"column_start":2,"column_end":77}},{"value":"/ the vector may cause its buffer to be reällocated, which would also make","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":528697,"byte_end":528774,"line_start":572,"line_end":572,"column_start":2,"column_end":78}},{"value":"/ any pointers to it invalid.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":528776,"byte_end":528807,"line_start":573,"line_end":573,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":528809,"byte_end":528812,"line_start":574,"line_end":574,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":528814,"byte_end":528828,"line_start":575,"line_end":575,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":528830,"byte_end":528833,"line_start":576,"line_end":576,"column_start":2,"column_end":5}},{"value":"/ [`Vec::as_mut_ptr`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.as_mut_ptr)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":528835,"byte_end":528929,"line_start":577,"line_end":577,"column_start":2,"column_end":96}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":528931,"byte_end":528934,"line_start":578,"line_end":578,"column_start":2,"column_end":5}},{"value":"/ # Analogue","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":528936,"byte_end":528950,"line_start":579,"line_end":579,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":528952,"byte_end":528955,"line_start":580,"line_end":580,"column_start":2,"column_end":5}},{"value":"/ See [`as_mut_bitptr`] for a `&mut BitVec -> *mut BitSlice` transform.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":528957,"byte_end":529030,"line_start":581,"line_end":581,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":529032,"byte_end":529035,"line_start":582,"line_end":582,"column_start":2,"column_end":5}},{"value":"/ # Eaxmples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":529037,"byte_end":529051,"line_start":583,"line_end":583,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":529053,"byte_end":529056,"line_start":584,"line_end":584,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":529058,"byte_end":529069,"line_start":585,"line_end":585,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":529071,"byte_end":529098,"line_start":586,"line_end":586,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":529100,"byte_end":529103,"line_start":587,"line_end":587,"column_start":2,"column_end":5}},{"value":"/ let size = 4;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":529105,"byte_end":529122,"line_start":588,"line_end":588,"column_start":2,"column_end":19}},{"value":"/ let mut bv: BitVec<Msb0, usize> = BitVec::with_capacity(size);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":529124,"byte_end":529190,"line_start":589,"line_end":589,"column_start":2,"column_end":68}},{"value":"/ let bv_ptr = bv.as_mut_ptr();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":529192,"byte_end":529225,"line_start":590,"line_end":590,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":529227,"byte_end":529230,"line_start":591,"line_end":591,"column_start":2,"column_end":5}},{"value":"/ unsafe {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":529232,"byte_end":529244,"line_start":592,"line_end":592,"column_start":2,"column_end":14}},{"value":"/   *bv_ptr = !0;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":529246,"byte_end":529265,"line_start":593,"line_end":593,"column_start":2,"column_end":21}},{"value":"/   bv.set_len(size);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":529267,"byte_end":529290,"line_start":594,"line_end":594,"column_start":2,"column_end":25}},{"value":"/ }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":529292,"byte_end":529297,"line_start":595,"line_end":595,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bv.len(), 4);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":529299,"byte_end":529327,"line_start":596,"line_end":596,"column_start":2,"column_end":30}},{"value":"/ assert!(bv.all());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":529329,"byte_end":529351,"line_start":597,"line_end":597,"column_start":2,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":529353,"byte_end":529360,"line_start":598,"line_end":598,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":529362,"byte_end":529365,"line_start":599,"line_end":599,"column_start":2,"column_end":5}},{"value":"/ [`as_mut_bitptr`]: #method.as_mut_bitptr","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":529367,"byte_end":529411,"line_start":600,"line_end":600,"column_start":2,"column_end":46}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":529413,"byte_end":529422,"line_start":601,"line_end":601,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":529424,"byte_end":529454,"line_start":602,"line_end":602,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":3004},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":531484,"byte_end":531491,"line_start":667,"line_end":667,"column_start":16,"column_end":23},"name":"set_len","qualname":"<BitVec<O, T>>::set_len","value":"pub unsafe fn set_len(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Forces the length of the vector to `new_len`.","sig":null,"attributes":[{"value":"/ Forces the length of the vector to `new_len`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":529537,"byte_end":529586,"line_start":607,"line_end":607,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":529588,"byte_end":529591,"line_start":608,"line_end":608,"column_start":2,"column_end":5}},{"value":"/ This is a low-level operation that maintains none of the normal","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":529593,"byte_end":529660,"line_start":609,"line_end":609,"column_start":2,"column_end":69}},{"value":"/ invariants of the type. Normally changing the length of a vector is done","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":529662,"byte_end":529738,"line_start":610,"line_end":610,"column_start":2,"column_end":78}},{"value":"/ using one of the safe operations instead, such as [`truncate`],","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":529740,"byte_end":529807,"line_start":611,"line_end":611,"column_start":2,"column_end":69}},{"value":"/ [`resize`], [`extend`], or [`clear`].","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":529809,"byte_end":529850,"line_start":612,"line_end":612,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":529852,"byte_end":529855,"line_start":613,"line_end":613,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":529857,"byte_end":529871,"line_start":614,"line_end":614,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":529873,"byte_end":529876,"line_start":615,"line_end":615,"column_start":2,"column_end":5}},{"value":"/ [`Vec::set_len`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.set_len)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":529878,"byte_end":529966,"line_start":616,"line_end":616,"column_start":2,"column_end":90}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":529968,"byte_end":529971,"line_start":617,"line_end":617,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":529973,"byte_end":529985,"line_start":618,"line_end":618,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":529987,"byte_end":529990,"line_start":619,"line_end":619,"column_start":2,"column_end":5}},{"value":"/ - `new_len` must be less than or equal to [`capacity()`].","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":529992,"byte_end":530053,"line_start":620,"line_end":620,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":530055,"byte_end":530058,"line_start":621,"line_end":621,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":530060,"byte_end":530074,"line_start":622,"line_end":622,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":530076,"byte_end":530079,"line_start":623,"line_end":623,"column_start":2,"column_end":5}},{"value":"/ This method can be useful for situations in which the vector is serving","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":530081,"byte_end":530156,"line_start":624,"line_end":624,"column_start":2,"column_end":77}},{"value":"/ as a buffer for other code, particularly over FFI:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":530158,"byte_end":530212,"line_start":625,"line_end":625,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":530214,"byte_end":530217,"line_start":626,"line_end":626,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":530219,"byte_end":530230,"line_start":627,"line_end":627,"column_start":2,"column_end":13}},{"value":"/ # #![allow(dead_code)]","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":530232,"byte_end":530258,"line_start":628,"line_end":628,"column_start":2,"column_end":28}},{"value":"/ # #![allow(improper_ctypes)]","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":530260,"byte_end":530292,"line_start":629,"line_end":629,"column_start":2,"column_end":34}},{"value":"/ # const ERL_OK: i32 = 0;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":530294,"byte_end":530322,"line_start":630,"line_end":630,"column_start":2,"column_end":30}},{"value":"/ # extern \"C\" {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":530324,"byte_end":530342,"line_start":631,"line_end":631,"column_start":2,"column_end":20}},{"value":"/ #   fn erl_read_bits(","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":530344,"byte_end":530369,"line_start":632,"line_end":632,"column_start":2,"column_end":27}},{"value":"/ #     bv: *mut BitVec<Msb0, u8>,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":530371,"byte_end":530407,"line_start":633,"line_end":633,"column_start":2,"column_end":38}},{"value":"/ #     bits_reqd: usize,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":530409,"byte_end":530436,"line_start":634,"line_end":634,"column_start":2,"column_end":29}},{"value":"/ #     bits_read: *mut usize,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":530438,"byte_end":530470,"line_start":635,"line_end":635,"column_start":2,"column_end":34}},{"value":"/ #   ) -> i32;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":530472,"byte_end":530489,"line_start":636,"line_end":636,"column_start":2,"column_end":19}},{"value":"/ # }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":530491,"byte_end":530498,"line_start":637,"line_end":637,"column_start":2,"column_end":9}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":530500,"byte_end":530527,"line_start":638,"line_end":638,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":530529,"byte_end":530532,"line_start":639,"line_end":639,"column_start":2,"column_end":5}},{"value":"/ // `bitvec` could pair with `rustler` for a better bitstream","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":530534,"byte_end":530598,"line_start":640,"line_end":640,"column_start":2,"column_end":66}},{"value":"/ type ErlBitstring = BitVec<Msb0, u8>;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":530600,"byte_end":530641,"line_start":641,"line_end":641,"column_start":2,"column_end":43}},{"value":"/ # pub fn _test() {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":530643,"byte_end":530665,"line_start":642,"line_end":642,"column_start":2,"column_end":24}},{"value":"/ let mut bits_read = 0;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":530667,"byte_end":530693,"line_start":643,"line_end":643,"column_start":2,"column_end":28}},{"value":"/ // An imaginary Erlang function wants a large bit buffer.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":530695,"byte_end":530756,"line_start":644,"line_end":644,"column_start":2,"column_end":63}},{"value":"/ let mut buf = ErlBitstring::with_capacity(32_768);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":530758,"byte_end":530812,"line_start":645,"line_end":645,"column_start":2,"column_end":56}},{"value":"/ // SAFETY: When `erl_read_bits` returns `ERL_OK`, it holds that:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":530814,"byte_end":530882,"line_start":646,"line_end":646,"column_start":2,"column_end":70}},{"value":"/ // 1. `bits_read` bits were initialized.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":530884,"byte_end":530928,"line_start":647,"line_end":647,"column_start":2,"column_end":46}},{"value":"/ // 2. `bits_read` <= the capacity (32_768)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":530930,"byte_end":530976,"line_start":648,"line_end":648,"column_start":2,"column_end":48}},{"value":"/ // which makes `set_len` safe to call.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":530978,"byte_end":531020,"line_start":649,"line_end":649,"column_start":2,"column_end":44}},{"value":"/ unsafe {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":531022,"byte_end":531034,"line_start":650,"line_end":650,"column_start":2,"column_end":14}},{"value":"/   // Make the FFI call...","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":531036,"byte_end":531065,"line_start":651,"line_end":651,"column_start":2,"column_end":31}},{"value":"/   let status = erl_read_bits(&mut buf, 10, &mut bits_read);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":531067,"byte_end":531130,"line_start":652,"line_end":652,"column_start":2,"column_end":65}},{"value":"/   if status == ERL_OK {","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":531132,"byte_end":531159,"line_start":653,"line_end":653,"column_start":2,"column_end":29}},{"value":"/     // ...and update the length to what was read in.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":531161,"byte_end":531217,"line_start":654,"line_end":654,"column_start":2,"column_end":58}},{"value":"/     buf.set_len(bits_read);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":531219,"byte_end":531250,"line_start":655,"line_end":655,"column_start":2,"column_end":33}},{"value":"/   }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":531252,"byte_end":531259,"line_start":656,"line_end":656,"column_start":2,"column_end":9}},{"value":"/ }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":531261,"byte_end":531266,"line_start":657,"line_end":657,"column_start":2,"column_end":7}},{"value":"/ # }","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":531268,"byte_end":531275,"line_start":658,"line_end":658,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":531277,"byte_end":531284,"line_start":659,"line_end":659,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":531286,"byte_end":531289,"line_start":660,"line_end":660,"column_start":2,"column_end":5}},{"value":"/ [`capacity()`]: #method.capacity","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":531291,"byte_end":531327,"line_start":661,"line_end":661,"column_start":2,"column_end":38}},{"value":"/ [`clear`]: #method.clear","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":531329,"byte_end":531357,"line_start":662,"line_end":662,"column_start":2,"column_end":30}},{"value":"/ [`extend`]: #method.extend","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":531359,"byte_end":531389,"line_start":663,"line_end":663,"column_start":2,"column_end":32}},{"value":"/ [`resize`]: #method.resize","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":531391,"byte_end":531421,"line_start":664,"line_end":664,"column_start":2,"column_end":32}},{"value":"/ [`truncate`]: #method.truncate","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":531423,"byte_end":531457,"line_start":665,"line_end":665,"column_start":2,"column_end":36}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":531459,"byte_end":531468,"line_start":666,"line_end":666,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3006},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":532623,"byte_end":532634,"line_start":716,"line_end":716,"column_start":9,"column_end":20},"name":"swap_remove","qualname":"<BitVec<O, T>>::swap_remove","value":"pub fn swap_remove(&mut Self, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Removes a bit from the vector and returns it.","sig":null,"attributes":[{"value":"/ Removes a bit from the vector and returns it.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":531966,"byte_end":532015,"line_start":689,"line_end":689,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":532017,"byte_end":532020,"line_start":690,"line_end":690,"column_start":2,"column_end":5}},{"value":"/ The removed bit is replaced by the last bit of the vector.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":532022,"byte_end":532084,"line_start":691,"line_end":691,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":532086,"byte_end":532089,"line_start":692,"line_end":692,"column_start":2,"column_end":5}},{"value":"/ This does not preserve ordering, but is O(1).","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":532091,"byte_end":532140,"line_start":693,"line_end":693,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":532142,"byte_end":532145,"line_start":694,"line_end":694,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":532147,"byte_end":532161,"line_start":695,"line_end":695,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":532163,"byte_end":532166,"line_start":696,"line_end":696,"column_start":2,"column_end":5}},{"value":"/ [`Vec::swap_remove`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.swap_remove)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":532168,"byte_end":532264,"line_start":697,"line_end":697,"column_start":2,"column_end":98}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":532266,"byte_end":532269,"line_start":698,"line_end":698,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":532271,"byte_end":532283,"line_start":699,"line_end":699,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":532285,"byte_end":532288,"line_start":700,"line_end":700,"column_start":2,"column_end":5}},{"value":"/ Panics if `index` is out of bounds.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":532290,"byte_end":532329,"line_start":701,"line_end":701,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":532331,"byte_end":532334,"line_start":702,"line_end":702,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":532336,"byte_end":532350,"line_start":703,"line_end":703,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":532352,"byte_end":532355,"line_start":704,"line_end":704,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":532357,"byte_end":532368,"line_start":705,"line_end":705,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":532370,"byte_end":532397,"line_start":706,"line_end":706,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":532399,"byte_end":532402,"line_start":707,"line_end":707,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 0, 1, 0, 1];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":532404,"byte_end":532444,"line_start":708,"line_end":708,"column_start":2,"column_end":42}},{"value":"/ assert!(!bv.swap_remove(1));","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":532446,"byte_end":532478,"line_start":709,"line_end":709,"column_start":2,"column_end":34}},{"value":"/ assert_eq!(bv, bits![0, 1, 1, 0]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":532480,"byte_end":532518,"line_start":710,"line_end":710,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":532520,"byte_end":532523,"line_start":711,"line_end":711,"column_start":2,"column_end":5}},{"value":"/ assert!(!bv.swap_remove(0));","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":532525,"byte_end":532557,"line_start":712,"line_end":712,"column_start":2,"column_end":34}},{"value":"/ assert_eq!(bv, bits![0, 1, 1]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":532559,"byte_end":532594,"line_start":713,"line_end":713,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":532596,"byte_end":532603,"line_start":714,"line_end":714,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":532605,"byte_end":532614,"line_start":715,"line_end":715,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3007},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":533490,"byte_end":533496,"line_start":751,"line_end":751,"column_start":9,"column_end":15},"name":"insert","qualname":"<BitVec<O, T>>::insert","value":"pub fn insert(&mut Self, usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Inserts a bit at position `index` within the vector, shifting all bits\n after it to the right.","sig":null,"attributes":[{"value":"/ Inserts a bit at position `index` within the vector, shifting all bits","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":532940,"byte_end":533014,"line_start":728,"line_end":728,"column_start":2,"column_end":76}},{"value":"/ after it to the right.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":533016,"byte_end":533042,"line_start":729,"line_end":729,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":533044,"byte_end":533047,"line_start":730,"line_end":730,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":533049,"byte_end":533063,"line_start":731,"line_end":731,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":533065,"byte_end":533068,"line_start":732,"line_end":732,"column_start":2,"column_end":5}},{"value":"/ [`Vec::insert`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.insert)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":533070,"byte_end":533156,"line_start":733,"line_end":733,"column_start":2,"column_end":88}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":533158,"byte_end":533161,"line_start":734,"line_end":734,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":533163,"byte_end":533175,"line_start":735,"line_end":735,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":533177,"byte_end":533180,"line_start":736,"line_end":736,"column_start":2,"column_end":5}},{"value":"/ Panics if `index > len`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":533182,"byte_end":533210,"line_start":737,"line_end":737,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":533212,"byte_end":533215,"line_start":738,"line_end":738,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":533217,"byte_end":533231,"line_start":739,"line_end":739,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":533233,"byte_end":533236,"line_start":740,"line_end":740,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":533238,"byte_end":533249,"line_start":741,"line_end":741,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":533251,"byte_end":533278,"line_start":742,"line_end":742,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":533280,"byte_end":533283,"line_start":743,"line_end":743,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0; 5];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":533285,"byte_end":533316,"line_start":744,"line_end":744,"column_start":2,"column_end":33}},{"value":"/ bv.insert(4, true);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":533318,"byte_end":533341,"line_start":745,"line_end":745,"column_start":2,"column_end":25}},{"value":"/ assert_eq!(bv, bits![0, 0, 0, 0, 1, 0]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":533343,"byte_end":533387,"line_start":746,"line_end":746,"column_start":2,"column_end":46}},{"value":"/ bv.insert(2, true);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":533389,"byte_end":533412,"line_start":747,"line_end":747,"column_start":2,"column_end":25}},{"value":"/ assert_eq!(bv, bits![0, 0, 1, 0, 0, 1, 0]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":533414,"byte_end":533461,"line_start":748,"line_end":748,"column_start":2,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":533463,"byte_end":533470,"line_start":749,"line_end":749,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":533472,"byte_end":533481,"line_start":750,"line_end":750,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3008},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":534210,"byte_end":534216,"line_start":779,"line_end":779,"column_start":9,"column_end":15},"name":"remove","qualname":"<BitVec<O, T>>::remove","value":"pub fn remove(&mut Self, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the bit at position `index` within the vector,\n shifting all bits after it to the left.","sig":null,"attributes":[{"value":"/ Removes and returns the bit at position `index` within the vector,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":533716,"byte_end":533786,"line_start":758,"line_end":758,"column_start":2,"column_end":72}},{"value":"/ shifting all bits after it to the left.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":533788,"byte_end":533831,"line_start":759,"line_end":759,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":533833,"byte_end":533836,"line_start":760,"line_end":760,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":533838,"byte_end":533852,"line_start":761,"line_end":761,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":533854,"byte_end":533857,"line_start":762,"line_end":762,"column_start":2,"column_end":5}},{"value":"/ [`Vec::remove`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.remove)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":533859,"byte_end":533945,"line_start":763,"line_end":763,"column_start":2,"column_end":88}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":533947,"byte_end":533950,"line_start":764,"line_end":764,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":533952,"byte_end":533964,"line_start":765,"line_end":765,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":533966,"byte_end":533969,"line_start":766,"line_end":766,"column_start":2,"column_end":5}},{"value":"/ Panics if `index` is out of bounds.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":533971,"byte_end":534010,"line_start":767,"line_end":767,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":534012,"byte_end":534015,"line_start":768,"line_end":768,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":534017,"byte_end":534031,"line_start":769,"line_end":769,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":534033,"byte_end":534036,"line_start":770,"line_end":770,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":534038,"byte_end":534049,"line_start":771,"line_end":771,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":534051,"byte_end":534078,"line_start":772,"line_end":772,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":534080,"byte_end":534083,"line_start":773,"line_end":773,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1, 0];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":534085,"byte_end":534119,"line_start":774,"line_end":774,"column_start":2,"column_end":36}},{"value":"/ assert!(bv.remove(1));","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":534121,"byte_end":534147,"line_start":775,"line_end":775,"column_start":2,"column_end":28}},{"value":"/ assert_eq!(bv, bits![0, 0]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":534149,"byte_end":534181,"line_start":776,"line_end":776,"column_start":2,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":534183,"byte_end":534190,"line_start":777,"line_end":777,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":534192,"byte_end":534201,"line_start":778,"line_end":778,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3009},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":535307,"byte_end":535313,"line_start":816,"line_end":816,"column_start":9,"column_end":15},"name":"retain","qualname":"<BitVec<O, T>>::retain","value":"pub fn retain<F>(&mut Self, F) where F: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Retains only the bits specified by the predicate.","sig":null,"attributes":[{"value":"/ Retains only the bits specified by the predicate.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":534488,"byte_end":534541,"line_start":790,"line_end":790,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":534543,"byte_end":534546,"line_start":791,"line_end":791,"column_start":2,"column_end":5}},{"value":"/ In other words, remove all bits `b` such that `func(idx(b), &b)` returns","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":534548,"byte_end":534624,"line_start":792,"line_end":792,"column_start":2,"column_end":78}},{"value":"/ `false`. This method operates in place, visiting each bit exactly once","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":534626,"byte_end":534700,"line_start":793,"line_end":793,"column_start":2,"column_end":76}},{"value":"/ in the original order, and preserves the order of the retained bits.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":534702,"byte_end":534774,"line_start":794,"line_end":794,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":534776,"byte_end":534779,"line_start":795,"line_end":795,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":534781,"byte_end":534795,"line_start":796,"line_end":796,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":534797,"byte_end":534800,"line_start":797,"line_end":797,"column_start":2,"column_end":5}},{"value":"/ [`Vec::retain`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.retain)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":534802,"byte_end":534888,"line_start":798,"line_end":798,"column_start":2,"column_end":88}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":534890,"byte_end":534893,"line_start":799,"line_end":799,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":534895,"byte_end":534916,"line_start":800,"line_end":800,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":534918,"byte_end":534921,"line_start":801,"line_end":801,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":534923,"byte_end":534991,"line_start":802,"line_end":802,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":534993,"byte_end":535067,"line_start":803,"line_end":803,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":535069,"byte_end":535079,"line_start":804,"line_end":804,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":535081,"byte_end":535084,"line_start":805,"line_end":805,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":535086,"byte_end":535100,"line_start":806,"line_end":806,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":535102,"byte_end":535105,"line_start":807,"line_end":807,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":535107,"byte_end":535118,"line_start":808,"line_end":808,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":535120,"byte_end":535147,"line_start":809,"line_end":809,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":535149,"byte_end":535152,"line_start":810,"line_end":810,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1, 1, 0, 0, 1];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":535154,"byte_end":535197,"line_start":811,"line_end":811,"column_start":2,"column_end":45}},{"value":"/ bv.retain(|i, b| (i % 2 == 0) ^ b);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":535199,"byte_end":535238,"line_start":812,"line_end":812,"column_start":2,"column_end":41}},{"value":"/ assert_eq!(bv, bits![0, 1, 0, 1]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":535240,"byte_end":535278,"line_start":813,"line_end":813,"column_start":2,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":535280,"byte_end":535287,"line_start":814,"line_end":814,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":535289,"byte_end":535298,"line_start":815,"line_end":815,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3011},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":535965,"byte_end":535969,"line_start":846,"line_end":846,"column_start":9,"column_end":13},"name":"push","qualname":"<BitVec<O, T>>::push","value":"pub fn push(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Appends a bit to the back of a collection.","sig":null,"attributes":[{"value":"/ Appends a bit to the back of a collection.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":535503,"byte_end":535549,"line_start":825,"line_end":825,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":535551,"byte_end":535554,"line_start":826,"line_end":826,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":535556,"byte_end":535570,"line_start":827,"line_end":827,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":535572,"byte_end":535575,"line_start":828,"line_end":828,"column_start":2,"column_end":5}},{"value":"/ [`Vec::push`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.push)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":535577,"byte_end":535659,"line_start":829,"line_end":829,"column_start":2,"column_end":84}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":535661,"byte_end":535664,"line_start":830,"line_end":830,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":535666,"byte_end":535678,"line_start":831,"line_end":831,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":535680,"byte_end":535683,"line_start":832,"line_end":832,"column_start":2,"column_end":5}},{"value":"/ Panics if the number of bits in the vector exceeds the maximum vector","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":535685,"byte_end":535758,"line_start":833,"line_end":833,"column_start":2,"column_end":75}},{"value":"/ capacity.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":535760,"byte_end":535773,"line_start":834,"line_end":834,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":535775,"byte_end":535778,"line_start":835,"line_end":835,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":535780,"byte_end":535794,"line_start":836,"line_end":836,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":535796,"byte_end":535799,"line_start":837,"line_end":837,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":535801,"byte_end":535812,"line_start":838,"line_end":838,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":535814,"byte_end":535841,"line_start":839,"line_end":839,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":535843,"byte_end":535846,"line_start":840,"line_end":840,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 0];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":535848,"byte_end":535879,"line_start":841,"line_end":841,"column_start":2,"column_end":33}},{"value":"/ bv.push(true);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":535881,"byte_end":535899,"line_start":842,"line_end":842,"column_start":2,"column_end":20}},{"value":"/ assert_eq!(bv.count_ones(), 1);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":535901,"byte_end":535936,"line_start":843,"line_end":843,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":535938,"byte_end":535945,"line_start":844,"line_end":844,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":535947,"byte_end":535956,"line_start":845,"line_end":845,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3014},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":536958,"byte_end":536961,"line_start":887,"line_end":887,"column_start":9,"column_end":12},"name":"pop","qualname":"<BitVec<O, T>>::pop","value":"pub fn pop(&mut Self) -> Option<bool>","parent":null,"children":[],"decl_id":null,"docs":" Removes the last bit from a vector and returns it, or [`None`] if it is\n empty.","sig":null,"attributes":[{"value":"/ Removes the last bit from a vector and returns it, or [`None`] if it is","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":536470,"byte_end":536545,"line_start":868,"line_end":868,"column_start":2,"column_end":77}},{"value":"/ empty.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":536547,"byte_end":536557,"line_start":869,"line_end":869,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":536559,"byte_end":536562,"line_start":870,"line_end":870,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":536564,"byte_end":536578,"line_start":871,"line_end":871,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":536580,"byte_end":536583,"line_start":872,"line_end":872,"column_start":2,"column_end":5}},{"value":"/ [`Vec::pop`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.pop)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":536585,"byte_end":536665,"line_start":873,"line_end":873,"column_start":2,"column_end":82}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":536667,"byte_end":536670,"line_start":874,"line_end":874,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":536672,"byte_end":536686,"line_start":875,"line_end":875,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":536688,"byte_end":536691,"line_start":876,"line_end":876,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":536693,"byte_end":536704,"line_start":877,"line_end":877,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":536706,"byte_end":536733,"line_start":878,"line_end":878,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":536735,"byte_end":536738,"line_start":879,"line_end":879,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 0, 1];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":536740,"byte_end":536774,"line_start":880,"line_end":880,"column_start":2,"column_end":36}},{"value":"/ assert_eq!(bv.pop(), Some(true));","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":536776,"byte_end":536813,"line_start":881,"line_end":881,"column_start":2,"column_end":39}},{"value":"/ assert!(bv.not_any());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":536815,"byte_end":536841,"line_start":882,"line_end":882,"column_start":2,"column_end":28}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":536843,"byte_end":536850,"line_start":883,"line_end":883,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":536852,"byte_end":536855,"line_start":884,"line_end":884,"column_start":2,"column_end":5}},{"value":"/ [`None`]: https://doc.rust-lang.org/core/option/enum.Option.html#variant.None","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":536857,"byte_end":536938,"line_start":885,"line_end":885,"column_start":2,"column_end":83}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":536940,"byte_end":536949,"line_start":886,"line_end":886,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3016},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":537700,"byte_end":537706,"line_start":921,"line_end":921,"column_start":9,"column_end":15},"name":"append","qualname":"<BitVec<O, T>>::append","value":"pub fn append<O2, T2>(&mut Self, &mut BitVec<O2, T2>) where O2: BitOrder,\nT2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Moves all the bits of `other` into `self`, leaving `other` empty.","sig":null,"attributes":[{"value":"/ Moves all the bits of `other` into `self`, leaving `other` empty.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":537142,"byte_end":537211,"line_start":897,"line_end":897,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":537213,"byte_end":537216,"line_start":898,"line_end":898,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":537218,"byte_end":537232,"line_start":899,"line_end":899,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":537234,"byte_end":537237,"line_start":900,"line_end":900,"column_start":2,"column_end":5}},{"value":"/ [`Vec::append`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.append)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":537239,"byte_end":537325,"line_start":901,"line_end":901,"column_start":2,"column_end":88}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":537327,"byte_end":537330,"line_start":902,"line_end":902,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":537332,"byte_end":537344,"line_start":903,"line_end":903,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":537346,"byte_end":537349,"line_start":904,"line_end":904,"column_start":2,"column_end":5}},{"value":"/ Panics if the number of bits overflows the maximum vector capacity.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":537351,"byte_end":537422,"line_start":905,"line_end":905,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":537424,"byte_end":537427,"line_start":906,"line_end":906,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":537429,"byte_end":537443,"line_start":907,"line_end":907,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":537445,"byte_end":537448,"line_start":908,"line_end":908,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":537450,"byte_end":537461,"line_start":909,"line_end":909,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":537463,"byte_end":537490,"line_start":910,"line_end":910,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":537492,"byte_end":537495,"line_start":911,"line_end":911,"column_start":2,"column_end":5}},{"value":"/ let mut bv1 = bitvec![0; 10];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":537497,"byte_end":537530,"line_start":912,"line_end":912,"column_start":2,"column_end":35}},{"value":"/ let mut bv2 = bitvec![1; 10];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":537532,"byte_end":537565,"line_start":913,"line_end":913,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":537567,"byte_end":537570,"line_start":914,"line_end":914,"column_start":2,"column_end":5}},{"value":"/ bv1.append(&mut bv2);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":537572,"byte_end":537597,"line_start":915,"line_end":915,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":537599,"byte_end":537602,"line_start":916,"line_end":916,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bv1.count_ones(), 10);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":537604,"byte_end":537641,"line_start":917,"line_end":917,"column_start":2,"column_end":39}},{"value":"/ assert!(bv2.is_empty());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":537643,"byte_end":537671,"line_start":918,"line_end":918,"column_start":2,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":537673,"byte_end":537680,"line_start":919,"line_end":919,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":537682,"byte_end":537691,"line_start":920,"line_end":920,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3019},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":538857,"byte_end":538862,"line_start":964,"line_end":964,"column_start":9,"column_end":14},"name":"drain","qualname":"<BitVec<O, T>>::drain","value":"pub fn drain<R>(&mut Self, R) -> Drain<, O, T> where R: RangeBounds<usize>","parent":null,"children":[],"decl_id":null,"docs":" Creates a draining iterator that removes the specified range in the\n vector and yields the removed items.","sig":null,"attributes":[{"value":"/ Creates a draining iterator that removes the specified range in the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":537856,"byte_end":537927,"line_start":930,"line_end":930,"column_start":2,"column_end":73}},{"value":"/ vector and yields the removed items.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":537929,"byte_end":537969,"line_start":931,"line_end":931,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":537971,"byte_end":537974,"line_start":932,"line_end":932,"column_start":2,"column_end":5}},{"value":"/ Note 1: The bit range is removed even if the iterator is only partially","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":537976,"byte_end":538051,"line_start":933,"line_end":933,"column_start":2,"column_end":77}},{"value":"/ consumed or not consumed at all.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":538053,"byte_end":538089,"line_start":934,"line_end":934,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":538091,"byte_end":538094,"line_start":935,"line_end":935,"column_start":2,"column_end":5}},{"value":"/ Note 2: It is unspecified how many bits are removed from the vector if","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":538096,"byte_end":538170,"line_start":936,"line_end":936,"column_start":2,"column_end":76}},{"value":"/ the `Drain` value is leaked.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":538172,"byte_end":538204,"line_start":937,"line_end":937,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":538206,"byte_end":538209,"line_start":938,"line_end":938,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":538211,"byte_end":538225,"line_start":939,"line_end":939,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":538227,"byte_end":538230,"line_start":940,"line_end":940,"column_start":2,"column_end":5}},{"value":"/ [`Vec::drain`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.drain)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":538232,"byte_end":538316,"line_start":941,"line_end":941,"column_start":2,"column_end":86}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":538318,"byte_end":538321,"line_start":942,"line_end":942,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":538323,"byte_end":538335,"line_start":943,"line_end":943,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":538337,"byte_end":538340,"line_start":944,"line_end":944,"column_start":2,"column_end":5}},{"value":"/ Panics if the starting point is greater than the end point or if the end","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":538342,"byte_end":538418,"line_start":945,"line_end":945,"column_start":2,"column_end":78}},{"value":"/ point is greater than the length of the vector.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":538420,"byte_end":538471,"line_start":946,"line_end":946,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":538473,"byte_end":538476,"line_start":947,"line_end":947,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":538478,"byte_end":538492,"line_start":948,"line_end":948,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":538494,"byte_end":538497,"line_start":949,"line_end":949,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":538499,"byte_end":538510,"line_start":950,"line_end":950,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":538512,"byte_end":538539,"line_start":951,"line_end":951,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":538541,"byte_end":538544,"line_start":952,"line_end":952,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1, 1];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":538546,"byte_end":538580,"line_start":953,"line_end":953,"column_start":2,"column_end":36}},{"value":"/ let bv2: BitVec = bv.drain(1 ..).collect();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":538582,"byte_end":538629,"line_start":954,"line_end":954,"column_start":2,"column_end":49}},{"value":"/ assert_eq!(bv, bits![0]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":538631,"byte_end":538660,"line_start":955,"line_end":955,"column_start":2,"column_end":31}},{"value":"/ assert_eq!(bv2, bits![1, 1]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":538662,"byte_end":538695,"line_start":956,"line_end":956,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":538697,"byte_end":538700,"line_start":957,"line_end":957,"column_start":2,"column_end":5}},{"value":"/ // A full range clears the vector","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":538702,"byte_end":538739,"line_start":958,"line_end":958,"column_start":2,"column_end":39}},{"value":"/ bv.drain(..);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":538741,"byte_end":538758,"line_start":959,"line_end":959,"column_start":2,"column_end":19}},{"value":"/ assert_eq!(bv, bits![]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":538760,"byte_end":538788,"line_start":960,"line_end":960,"column_start":2,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":538790,"byte_end":538797,"line_start":961,"line_end":961,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":538799,"byte_end":538816,"line_start":962,"line_end":962,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":538818,"byte_end":538848,"line_start":963,"line_end":963,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":3021},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":539442,"byte_end":539447,"line_start":990,"line_end":990,"column_start":9,"column_end":14},"name":"clear","qualname":"<BitVec<O, T>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clears the vector, removing all values.","sig":null,"attributes":[{"value":"/ Clears the vector, removing all values.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":538964,"byte_end":539007,"line_start":969,"line_end":969,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":539009,"byte_end":539012,"line_start":970,"line_end":970,"column_start":2,"column_end":5}},{"value":"/ Note that this method has no effect on the allocated capacity of the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":539014,"byte_end":539086,"line_start":971,"line_end":971,"column_start":2,"column_end":74}},{"value":"/ vector.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":539088,"byte_end":539099,"line_start":972,"line_end":972,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":539101,"byte_end":539104,"line_start":973,"line_end":973,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":539106,"byte_end":539120,"line_start":974,"line_end":974,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":539122,"byte_end":539125,"line_start":975,"line_end":975,"column_start":2,"column_end":5}},{"value":"/ [`Vec::clear`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.clear)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":539127,"byte_end":539211,"line_start":976,"line_end":976,"column_start":2,"column_end":86}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":539213,"byte_end":539216,"line_start":977,"line_end":977,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":539218,"byte_end":539232,"line_start":978,"line_end":978,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":539234,"byte_end":539237,"line_start":979,"line_end":979,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":539239,"byte_end":539250,"line_start":980,"line_end":980,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":539252,"byte_end":539279,"line_start":981,"line_end":981,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":539281,"byte_end":539284,"line_start":982,"line_end":982,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1, 0, 1];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":539286,"byte_end":539323,"line_start":983,"line_end":983,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":539325,"byte_end":539328,"line_start":984,"line_end":984,"column_start":2,"column_end":5}},{"value":"/ bv.clear();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":539330,"byte_end":539345,"line_start":985,"line_end":985,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":539347,"byte_end":539350,"line_start":986,"line_end":986,"column_start":2,"column_end":5}},{"value":"/ assert!(bv.is_empty());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":539352,"byte_end":539379,"line_start":987,"line_end":987,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":539381,"byte_end":539388,"line_start":988,"line_end":988,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":539417,"byte_end":539431,"line_start":989,"line_end":989,"column_start":29,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":3022},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":540178,"byte_end":540187,"line_start":1021,"line_end":1021,"column_start":9,"column_end":18},"name":"split_off","qualname":"<BitVec<O, T>>::split_off","value":"pub fn split_off(&mut Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Splits the collection into two at the given index.","sig":null,"attributes":[{"value":"/ Splits the collection into two at the given index.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":539501,"byte_end":539555,"line_start":996,"line_end":996,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":539557,"byte_end":539560,"line_start":997,"line_end":997,"column_start":2,"column_end":5}},{"value":"/ Returns a newly allocated vector containing the elements in range `[at,","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":539562,"byte_end":539637,"line_start":998,"line_end":998,"column_start":2,"column_end":77}},{"value":"/ len)`. After the call, the original vector will be left containing the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":539639,"byte_end":539713,"line_start":999,"line_end":999,"column_start":2,"column_end":76}},{"value":"/ bits `[0, at)` with its previous capacity unchanged.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":539715,"byte_end":539771,"line_start":1000,"line_end":1000,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":539773,"byte_end":539776,"line_start":1001,"line_end":1001,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":539778,"byte_end":539792,"line_start":1002,"line_end":1002,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":539794,"byte_end":539797,"line_start":1003,"line_end":1003,"column_start":2,"column_end":5}},{"value":"/ [`Vec::split_off`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.split_off)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":539799,"byte_end":539891,"line_start":1004,"line_end":1004,"column_start":2,"column_end":94}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":539893,"byte_end":539896,"line_start":1005,"line_end":1005,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":539898,"byte_end":539910,"line_start":1006,"line_end":1006,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":539912,"byte_end":539915,"line_start":1007,"line_end":1007,"column_start":2,"column_end":5}},{"value":"/ Panics if `at > len`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":539917,"byte_end":539942,"line_start":1008,"line_end":1008,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":539944,"byte_end":539947,"line_start":1009,"line_end":1009,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":539949,"byte_end":539963,"line_start":1010,"line_end":1010,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":539965,"byte_end":539968,"line_start":1011,"line_end":1011,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":539970,"byte_end":539981,"line_start":1012,"line_end":1012,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":539983,"byte_end":540010,"line_start":1013,"line_end":1013,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":540012,"byte_end":540015,"line_start":1014,"line_end":1014,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 0, 1];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":540017,"byte_end":540051,"line_start":1015,"line_end":1015,"column_start":2,"column_end":36}},{"value":"/ let bv2 = bv.split_off(1);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":540053,"byte_end":540083,"line_start":1016,"line_end":1016,"column_start":2,"column_end":32}},{"value":"/ assert_eq!(bv, bits![0]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":540085,"byte_end":540114,"line_start":1017,"line_end":1017,"column_start":2,"column_end":31}},{"value":"/ assert_eq!(bv2, bits![0, 1]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":540116,"byte_end":540149,"line_start":1018,"line_end":1018,"column_start":2,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":540151,"byte_end":540158,"line_start":1019,"line_end":1019,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":540160,"byte_end":540169,"line_start":1020,"line_end":1020,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3023},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":541977,"byte_end":541988,"line_start":1072,"line_end":1072,"column_start":9,"column_end":20},"name":"resize_with","qualname":"<BitVec<O, T>>::resize_with","value":"pub fn resize_with<F>(&mut Self, usize, F) where F: FnMut() -> bool","parent":null,"children":[],"decl_id":null,"docs":" Resizes the `BitVec` in-place so that `len` is equal to `new_len`.","sig":null,"attributes":[{"value":"/ Resizes the `BitVec` in-place so that `len` is equal to `new_len`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":540516,"byte_end":540586,"line_start":1034,"line_end":1034,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":540588,"byte_end":540591,"line_start":1035,"line_end":1035,"column_start":2,"column_end":5}},{"value":"/ If `new_len` is greater than `len`, the `BitVec` is extended by the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":540593,"byte_end":540664,"line_start":1036,"line_end":1036,"column_start":2,"column_end":73}},{"value":"/ difference, with each additional slot filled with the result of calling","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":540666,"byte_end":540741,"line_start":1037,"line_end":1037,"column_start":2,"column_end":77}},{"value":"/ the closure `func`. The return values from `func` will end up in the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":540743,"byte_end":540815,"line_start":1038,"line_end":1038,"column_start":2,"column_end":74}},{"value":"/ `BitVec` in the order they have been generated.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":540817,"byte_end":540868,"line_start":1039,"line_end":1039,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":540870,"byte_end":540873,"line_start":1040,"line_end":1040,"column_start":2,"column_end":5}},{"value":"/ If `new_len` is less than `len`, the `Vec` is simply truncated.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":540875,"byte_end":540942,"line_start":1041,"line_end":1041,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":540944,"byte_end":540947,"line_start":1042,"line_end":1042,"column_start":2,"column_end":5}},{"value":"/ This method uses a closure to create new values on every push. If you’d","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":540949,"byte_end":541026,"line_start":1043,"line_end":1043,"column_start":2,"column_end":77}},{"value":"/ rather [`Clone`] a given bit, use [`resize`]. If you want to use the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":541028,"byte_end":541100,"line_start":1044,"line_end":1044,"column_start":2,"column_end":74}},{"value":"/ [`Default`] trait to generate values, you can pass [`Default::default`]","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":541102,"byte_end":541177,"line_start":1045,"line_end":1045,"column_start":2,"column_end":77}},{"value":"/ as the second argument.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":541179,"byte_end":541206,"line_start":1046,"line_end":1046,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":541208,"byte_end":541211,"line_start":1047,"line_end":1047,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":541213,"byte_end":541227,"line_start":1048,"line_end":1048,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":541229,"byte_end":541232,"line_start":1049,"line_end":1049,"column_start":2,"column_end":5}},{"value":"/ [`Vec::resize_with`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.resize_with)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":541234,"byte_end":541330,"line_start":1050,"line_end":1050,"column_start":2,"column_end":98}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":541332,"byte_end":541335,"line_start":1051,"line_end":1051,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":541337,"byte_end":541351,"line_start":1052,"line_end":1052,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":541353,"byte_end":541356,"line_start":1053,"line_end":1053,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":541358,"byte_end":541369,"line_start":1054,"line_end":1054,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":541371,"byte_end":541398,"line_start":1055,"line_end":1055,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":541400,"byte_end":541403,"line_start":1056,"line_end":1056,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![1; 3];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":541405,"byte_end":541436,"line_start":1057,"line_end":1057,"column_start":2,"column_end":33}},{"value":"/ bv.resize_with(5, Default::default);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":541438,"byte_end":541478,"line_start":1058,"line_end":1058,"column_start":2,"column_end":42}},{"value":"/ assert_eq!(bv, bits![1, 1, 1, 0, 0]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":541480,"byte_end":541521,"line_start":1059,"line_end":1059,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":541523,"byte_end":541526,"line_start":1060,"line_end":1060,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":541528,"byte_end":541555,"line_start":1061,"line_end":1061,"column_start":2,"column_end":29}},{"value":"/ let mut p = 0;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":541557,"byte_end":541575,"line_start":1062,"line_end":1062,"column_start":2,"column_end":20}},{"value":"/ bv.resize_with(4, || { p += 1; p % 2 == 0 });","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":541577,"byte_end":541626,"line_start":1063,"line_end":1063,"column_start":2,"column_end":51}},{"value":"/ assert_eq!(bv, bits![0, 1, 0, 1]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":541628,"byte_end":541666,"line_start":1064,"line_end":1064,"column_start":2,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":541668,"byte_end":541675,"line_start":1065,"line_end":1065,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":541677,"byte_end":541680,"line_start":1066,"line_end":1066,"column_start":2,"column_end":5}},{"value":"/ [`Clone`]: https://doc.rust-lang.org/std/clone/trait.Clone.html","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":541682,"byte_end":541749,"line_start":1067,"line_end":1067,"column_start":2,"column_end":69}},{"value":"/ [`Default`]: https://doc.rust-lang.org/std/default/trait.Default.html","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":541751,"byte_end":541824,"line_start":1068,"line_end":1068,"column_start":2,"column_end":75}},{"value":"/ [`Default::default`]: https://doc.rust-lang.org/std/default/trait.Default.html#tymethod.default","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":541826,"byte_end":541925,"line_start":1069,"line_end":1069,"column_start":2,"column_end":101}},{"value":"/ [`resize`]: #method.resize","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":541927,"byte_end":541957,"line_start":1070,"line_end":1070,"column_start":2,"column_end":32}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":541959,"byte_end":541968,"line_start":1071,"line_end":1071,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3026},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":543144,"byte_end":543150,"line_start":1117,"line_end":1117,"column_start":9,"column_end":15},"name":"resize","qualname":"<BitVec<O, T>>::resize","value":"pub fn resize(&mut Self, usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Resizes the `BitVec` in-place so that `len` is equal to `new_len`.","sig":null,"attributes":[{"value":"/ Resizes the `BitVec` in-place so that `len` is equal to `new_len`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":542296,"byte_end":542366,"line_start":1088,"line_end":1088,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":542368,"byte_end":542371,"line_start":1089,"line_end":1089,"column_start":2,"column_end":5}},{"value":"/ If `new_len` is greater than `len`, the `BitVec` is extended by the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":542373,"byte_end":542444,"line_start":1090,"line_end":1090,"column_start":2,"column_end":73}},{"value":"/ difference, with each additional slot filled with `value`. If `new_len`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":542446,"byte_end":542521,"line_start":1091,"line_end":1091,"column_start":2,"column_end":77}},{"value":"/ is less than `len`, the `BitVec` is simply truncated.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":542523,"byte_end":542580,"line_start":1092,"line_end":1092,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":542582,"byte_end":542585,"line_start":1093,"line_end":1093,"column_start":2,"column_end":5}},{"value":"/ This method requires a single `bool` value. If you need more","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":542587,"byte_end":542651,"line_start":1094,"line_end":1094,"column_start":2,"column_end":66}},{"value":"/ flexibility, use [`resize_with`].","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":542653,"byte_end":542690,"line_start":1095,"line_end":1095,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":542692,"byte_end":542695,"line_start":1096,"line_end":1096,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":542697,"byte_end":542711,"line_start":1097,"line_end":1097,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":542713,"byte_end":542716,"line_start":1098,"line_end":1098,"column_start":2,"column_end":5}},{"value":"/ [`Vec::resize`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.resize)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":542718,"byte_end":542804,"line_start":1099,"line_end":1099,"column_start":2,"column_end":88}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":542806,"byte_end":542809,"line_start":1100,"line_end":1100,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":542811,"byte_end":542825,"line_start":1101,"line_end":1101,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":542827,"byte_end":542830,"line_start":1102,"line_end":1102,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":542832,"byte_end":542843,"line_start":1103,"line_end":1103,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":542845,"byte_end":542872,"line_start":1104,"line_end":1104,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":542874,"byte_end":542877,"line_start":1105,"line_end":1105,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![1];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":542879,"byte_end":542907,"line_start":1106,"line_end":1106,"column_start":2,"column_end":30}},{"value":"/ bv.resize(3, false);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":542909,"byte_end":542933,"line_start":1107,"line_end":1107,"column_start":2,"column_end":26}},{"value":"/ assert_eq!(bv, bits![1, 0, 0]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":542935,"byte_end":542970,"line_start":1108,"line_end":1108,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":542972,"byte_end":542975,"line_start":1109,"line_end":1109,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![1; 4];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":542977,"byte_end":543008,"line_start":1110,"line_end":1110,"column_start":2,"column_end":33}},{"value":"/ bv.resize(2, false);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":543010,"byte_end":543034,"line_start":1111,"line_end":1111,"column_start":2,"column_end":26}},{"value":"/ assert_eq!(bv, bits![1; 2]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":543036,"byte_end":543068,"line_start":1112,"line_end":1112,"column_start":2,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":543070,"byte_end":543077,"line_start":1113,"line_end":1113,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":543079,"byte_end":543082,"line_start":1114,"line_end":1114,"column_start":2,"column_end":5}},{"value":"/ [`resize_with`]: #method.resize_with","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":543084,"byte_end":543124,"line_start":1115,"line_end":1115,"column_start":2,"column_end":42}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":543126,"byte_end":543135,"line_start":1116,"line_end":1116,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3027},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":544944,"byte_end":544961,"line_start":1172,"line_end":1172,"column_start":9,"column_end":26},"name":"extend_from_slice","qualname":"<BitVec<O, T>>::extend_from_slice","value":"pub fn extend_from_slice(&mut Self, &[bool])","parent":null,"children":[],"decl_id":null,"docs":" Clones and appends all `bool`s in a slice to the `BitVec`.","sig":null,"attributes":[{"value":"/ Clones and appends all `bool`s in a slice to the `BitVec`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":543970,"byte_end":544032,"line_start":1142,"line_end":1142,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":544034,"byte_end":544037,"line_start":1143,"line_end":1143,"column_start":2,"column_end":5}},{"value":"/ Iterates over the slice `other`, clones each `bool`, and then appends it","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":544039,"byte_end":544115,"line_start":1144,"line_end":1144,"column_start":2,"column_end":78}},{"value":"/ to the `BitVec`. The `other` slice is traversed in-order.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":544117,"byte_end":544178,"line_start":1145,"line_end":1145,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":544180,"byte_end":544183,"line_start":1146,"line_end":1146,"column_start":2,"column_end":5}},{"value":"/ Prefer the [`Extend`] implementation; this method is retained only for","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":544185,"byte_end":544259,"line_start":1147,"line_end":1147,"column_start":2,"column_end":76}},{"value":"/ API compatibility, and offers no performance benefit.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":544261,"byte_end":544318,"line_start":1148,"line_end":1148,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":544320,"byte_end":544323,"line_start":1149,"line_end":1149,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":544325,"byte_end":544339,"line_start":1150,"line_end":1150,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":544341,"byte_end":544344,"line_start":1151,"line_end":1151,"column_start":2,"column_end":5}},{"value":"/ [`Vec::extend_from_slice`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.extend_from_slice)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":544346,"byte_end":544454,"line_start":1152,"line_end":1152,"column_start":2,"column_end":110}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":544456,"byte_end":544459,"line_start":1153,"line_end":1153,"column_start":2,"column_end":5}},{"value":"/ # Analogue","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":544461,"byte_end":544475,"line_start":1154,"line_end":1154,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":544477,"byte_end":544480,"line_start":1155,"line_end":1155,"column_start":2,"column_end":5}},{"value":"/ See [`extend_from_bitslice`] for the method to append a bit-slice of the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":544482,"byte_end":544558,"line_start":1156,"line_end":1156,"column_start":2,"column_end":78}},{"value":"/ same type parameters to a bit-vector.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":544560,"byte_end":544601,"line_start":1157,"line_end":1157,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":544603,"byte_end":544606,"line_start":1158,"line_end":1158,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":544608,"byte_end":544622,"line_start":1159,"line_end":1159,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":544624,"byte_end":544627,"line_start":1160,"line_end":1160,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":544629,"byte_end":544640,"line_start":1161,"line_end":1161,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":544642,"byte_end":544669,"line_start":1162,"line_end":1162,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":544671,"byte_end":544674,"line_start":1163,"line_end":1163,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":544676,"byte_end":544704,"line_start":1164,"line_end":1164,"column_start":2,"column_end":30}},{"value":"/ bv.extend_from_slice(&[true]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":544706,"byte_end":544740,"line_start":1165,"line_end":1165,"column_start":2,"column_end":36}},{"value":"/ assert_eq!(bv, bits![0, 1]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":544742,"byte_end":544774,"line_start":1166,"line_end":1166,"column_start":2,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":544776,"byte_end":544783,"line_start":1167,"line_end":1167,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":544785,"byte_end":544788,"line_start":1168,"line_end":1168,"column_start":2,"column_end":5}},{"value":"/ [`extend`]: #impl-Extend<%26'a bool>","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":544790,"byte_end":544830,"line_start":1169,"line_end":1169,"column_start":2,"column_end":42}},{"value":"/ [`extend_from_bitslice`]: #method.extend_from_bitslice","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":544832,"byte_end":544890,"line_start":1170,"line_end":1170,"column_start":2,"column_end":60}},{"value":"inline(always)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":544919,"byte_end":544933,"line_start":1171,"line_end":1171,"column_start":29,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":3028},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":546299,"byte_end":546305,"line_start":1214,"line_end":1214,"column_start":9,"column_end":15},"name":"splice","qualname":"<BitVec<O, T>>::splice","value":"pub fn splice<R, I>(&mut Self, R, I) -> Splice<, O, T, I::IntoIter> where\nR: RangeBounds<usize>, I: IntoIterator<Item = bool>","parent":null,"children":[],"decl_id":null,"docs":" Creates a splicing iterator that replaces the specified range in the\n vector with the given `replace_with` iterator and yields the removed\n items. `replace_with` does not need to be the same length as `range`.","sig":null,"attributes":[{"value":"/ Creates a splicing iterator that replaces the specified range in the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":545017,"byte_end":545089,"line_start":1176,"line_end":1176,"column_start":2,"column_end":74}},{"value":"/ vector with the given `replace_with` iterator and yields the removed","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":545091,"byte_end":545163,"line_start":1177,"line_end":1177,"column_start":2,"column_end":74}},{"value":"/ items. `replace_with` does not need to be the same length as `range`.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":545165,"byte_end":545238,"line_start":1178,"line_end":1178,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":545240,"byte_end":545243,"line_start":1179,"line_end":1179,"column_start":2,"column_end":5}},{"value":"/ The element range is removed even if the iterator is not consumed until","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":545245,"byte_end":545320,"line_start":1180,"line_end":1180,"column_start":2,"column_end":77}},{"value":"/ the end.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":545322,"byte_end":545334,"line_start":1181,"line_end":1181,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":545336,"byte_end":545339,"line_start":1182,"line_end":1182,"column_start":2,"column_end":5}},{"value":"/ It is unspecified how many bits are removed from the vector if the","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":545341,"byte_end":545411,"line_start":1183,"line_end":1183,"column_start":2,"column_end":72}},{"value":"/ `Splice` value is leaked.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":545413,"byte_end":545442,"line_start":1184,"line_end":1184,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":545444,"byte_end":545447,"line_start":1185,"line_end":1185,"column_start":2,"column_end":5}},{"value":"/ The input iterator `replace_with` is only consumed when the `Splice`","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":545449,"byte_end":545521,"line_start":1186,"line_end":1186,"column_start":2,"column_end":74}},{"value":"/ value is dropped.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":545523,"byte_end":545544,"line_start":1187,"line_end":1187,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":545546,"byte_end":545549,"line_start":1188,"line_end":1188,"column_start":2,"column_end":5}},{"value":"/ This is optimal if:","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":545551,"byte_end":545574,"line_start":1189,"line_end":1189,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":545576,"byte_end":545579,"line_start":1190,"line_end":1190,"column_start":2,"column_end":5}},{"value":"/ - the tail (bits in the vector after `range`) is empty","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":545581,"byte_end":545639,"line_start":1191,"line_end":1191,"column_start":2,"column_end":60}},{"value":"/ - or `replace_with` yields fewer bits than `range`’s length","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":545641,"byte_end":545706,"line_start":1192,"line_end":1192,"column_start":2,"column_end":65}},{"value":"/ - or the lower bound of its `size_hint()` is exact","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":545708,"byte_end":545762,"line_start":1193,"line_end":1193,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":545764,"byte_end":545767,"line_start":1194,"line_end":1194,"column_start":2,"column_end":5}},{"value":"/ Otherwise, a temporary vector is allocated and the tail is moved twice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":545769,"byte_end":545844,"line_start":1195,"line_end":1195,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":545846,"byte_end":545849,"line_start":1196,"line_end":1196,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":545851,"byte_end":545865,"line_start":1197,"line_end":1197,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":545867,"byte_end":545870,"line_start":1198,"line_end":1198,"column_start":2,"column_end":5}},{"value":"/ [`Vec::splice`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.splice)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":545872,"byte_end":545958,"line_start":1199,"line_end":1199,"column_start":2,"column_end":88}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":545960,"byte_end":545963,"line_start":1200,"line_end":1200,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":545965,"byte_end":545979,"line_start":1201,"line_end":1201,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":545981,"byte_end":545984,"line_start":1202,"line_end":1202,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":545986,"byte_end":545997,"line_start":1203,"line_end":1203,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":545999,"byte_end":546026,"line_start":1204,"line_end":1204,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":546028,"byte_end":546031,"line_start":1205,"line_end":1205,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1, 0];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":546033,"byte_end":546067,"line_start":1206,"line_end":1206,"column_start":2,"column_end":36}},{"value":"/ let new = bits![1, 0];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":546069,"byte_end":546095,"line_start":1207,"line_end":1207,"column_start":2,"column_end":28}},{"value":"/ let old: BitVec = bv.splice(.. 2, new.iter().copied()).collect();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":546097,"byte_end":546166,"line_start":1208,"line_end":1208,"column_start":2,"column_end":71}},{"value":"/ assert_eq!(bv, bits![1, 0, 0]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":546168,"byte_end":546203,"line_start":1209,"line_end":1209,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(old, bits![0, 1]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":546205,"byte_end":546238,"line_start":1210,"line_end":1210,"column_start":2,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":546240,"byte_end":546247,"line_start":1211,"line_end":1211,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":546249,"byte_end":546258,"line_start":1212,"line_end":1212,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":546260,"byte_end":546290,"line_start":1213,"line_end":1213,"column_start":2,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":5690},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":549933,"byte_end":549941,"line_start":174,"line_end":174,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::vec::iter::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":5693},{"krate":0,"index":5694}],"decl_id":null,"docs":" An iterator that moves out of a vector.","sig":null,"attributes":[{"value":"* An iterator that moves out of a vector.\n\nThis `struct` is created by the `into_iter` method on [`BitVec`] (provided by\nthe [`IntoIterator`] trait).\n\n# Original\n\n[`vec::IntoIter`](https://doc.rust-lang.org/alloc/vec/struct.IntoIter.html)\n\n# API Differences\n\nThis explicitly requires that `O` and `T` type parameters are `'static`, which\nis not a bound present in the original. However, it is always *true*, so it will\nnot cause a compilation error.\n\n[`BitVec`]: struct.BitVec.html\n[`IntoIterator`]: https://doc.rust-lang.org/core/iter/trait.IntoIterator.html\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":549332,"byte_end":549897,"line_start":155,"line_end":172,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":3136},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":550851,"byte_end":550862,"line_start":210,"line_end":210,"column_start":9,"column_end":20},"name":"as_bitslice","qualname":"<IntoIter<O, T>>::as_bitslice","value":"pub fn as_bitslice(&Self) -> &BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the remaining bits of this iterator as a bitslice.","sig":null,"attributes":[{"value":"/ Returns the remaining bits of this iterator as a bitslice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":550287,"byte_end":550349,"line_start":191,"line_end":191,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":550351,"byte_end":550354,"line_start":192,"line_end":192,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":550356,"byte_end":550370,"line_start":193,"line_end":193,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":550372,"byte_end":550375,"line_start":194,"line_end":194,"column_start":2,"column_end":5}},{"value":"/ [`vec::IntoIter::as_slice`](https://doc.rust-lang.org/alloc/vec/struct.IntoIter.html#method.as_slice)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":550377,"byte_end":550482,"line_start":195,"line_end":195,"column_start":2,"column_end":107}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":550484,"byte_end":550487,"line_start":196,"line_end":196,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":550489,"byte_end":550503,"line_start":197,"line_end":197,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":550505,"byte_end":550508,"line_start":198,"line_end":198,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":550510,"byte_end":550521,"line_start":199,"line_end":199,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":550523,"byte_end":550550,"line_start":200,"line_end":200,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":550552,"byte_end":550555,"line_start":201,"line_end":201,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![0, 1, 0, 1];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":550557,"byte_end":550590,"line_start":202,"line_end":202,"column_start":2,"column_end":35}},{"value":"/ let mut into_iter = bv.into_iter();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":550592,"byte_end":550631,"line_start":203,"line_end":203,"column_start":2,"column_end":41}},{"value":"/ assert_eq!(into_iter.as_bitslice(), bits![0, 1, 0, 1]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":550633,"byte_end":550692,"line_start":204,"line_end":204,"column_start":2,"column_end":61}},{"value":"/ let _ = into_iter.next().unwrap();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":550694,"byte_end":550732,"line_start":205,"line_end":205,"column_start":2,"column_end":40}},{"value":"/ assert_eq!(into_iter.as_bitslice(), bits![1, 0, 1]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":550734,"byte_end":550790,"line_start":206,"line_end":206,"column_start":2,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":550792,"byte_end":550799,"line_start":207,"line_end":207,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":550801,"byte_end":550810,"line_start":208,"line_end":208,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":550812,"byte_end":550842,"line_start":209,"line_end":209,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":3137},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":551088,"byte_end":551096,"line_start":220,"line_end":220,"column_start":9,"column_end":17},"name":"as_slice","qualname":"<IntoIter<O, T>>::as_slice","value":"pub fn as_slice(&Self) -> &BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":550938,"byte_end":550955,"line_start":215,"line_end":215,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":550957,"byte_end":550987,"line_start":216,"line_end":216,"column_start":2,"column_end":32}},{"value":"deprecated(note =\n             \"Use `.as_bitslice()` on iterators to view the remaining data.\")","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":550989,"byte_end":551079,"line_start":217,"line_end":219,"column_start":2,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":3138},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":551801,"byte_end":551816,"line_start":245,"line_end":245,"column_start":9,"column_end":24},"name":"as_mut_bitslice","qualname":"<IntoIter<O, T>>::as_mut_bitslice","value":"pub fn as_mut_bitslice(&mut Self) -> &mut BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the remaining bits of this iterator as a mutable slice.","sig":null,"attributes":[{"value":"/ Returns the remaining bits of this iterator as a mutable slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":551151,"byte_end":551218,"line_start":224,"line_end":224,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":551220,"byte_end":551223,"line_start":225,"line_end":225,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":551225,"byte_end":551239,"line_start":226,"line_end":226,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":551241,"byte_end":551244,"line_start":227,"line_end":227,"column_start":2,"column_end":5}},{"value":"/ [`vec::IntoIter::as_mut_slice`](https://doc.rust-lang.org/alloc/vec/struct.IntoIter.html#method.as_mut_slice)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":551246,"byte_end":551359,"line_start":228,"line_end":228,"column_start":2,"column_end":115}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":551361,"byte_end":551364,"line_start":229,"line_end":229,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":551366,"byte_end":551380,"line_start":230,"line_end":230,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":551382,"byte_end":551385,"line_start":231,"line_end":231,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":551387,"byte_end":551398,"line_start":232,"line_end":232,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":551400,"byte_end":551427,"line_start":233,"line_end":233,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":551429,"byte_end":551432,"line_start":234,"line_end":234,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![0, 1, 0, 1];","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":551434,"byte_end":551467,"line_start":235,"line_end":235,"column_start":2,"column_end":35}},{"value":"/ let mut into_iter = bv.into_iter();","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":551469,"byte_end":551508,"line_start":236,"line_end":236,"column_start":2,"column_end":41}},{"value":"/ assert_eq!(into_iter.as_bitslice(), bits![0, 1, 0, 1]);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":551510,"byte_end":551569,"line_start":237,"line_end":237,"column_start":2,"column_end":61}},{"value":"/ into_iter.as_mut_bitslice().set(2, true);","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":551571,"byte_end":551616,"line_start":238,"line_end":238,"column_start":2,"column_end":47}},{"value":"/ assert!(!into_iter.next().unwrap());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":551618,"byte_end":551658,"line_start":239,"line_end":239,"column_start":2,"column_end":42}},{"value":"/ assert!(into_iter.next().unwrap());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":551660,"byte_end":551699,"line_start":240,"line_end":240,"column_start":2,"column_end":41}},{"value":"/ assert!(into_iter.next().unwrap());","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":551701,"byte_end":551740,"line_start":241,"line_end":241,"column_start":2,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":551742,"byte_end":551749,"line_start":242,"line_end":242,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":551751,"byte_end":551760,"line_start":243,"line_end":243,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":551762,"byte_end":551792,"line_start":244,"line_end":244,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":3139},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":552134,"byte_end":552146,"line_start":254,"line_end":254,"column_start":9,"column_end":21},"name":"as_mut_slice","qualname":"<IntoIter<O, T>>::as_mut_slice","value":"pub fn as_mut_slice(&mut Self) -> &mut BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":551946,"byte_end":551960,"line_start":249,"line_end":249,"column_start":37,"column_end":51}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":551980,"byte_end":552010,"line_start":251,"line_end":251,"column_start":2,"column_end":32}},{"value":"deprecated(note =\n             \"Use `.as_mut_bitslice()` on iterators to view the \\\n\t                     remaining data.\")","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":552012,"byte_end":552125,"line_start":252,"line_end":253,"column_start":2,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":3161},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":553672,"byte_end":553677,"line_start":340,"line_end":340,"column_start":12,"column_end":17},"name":"Drain","qualname":"::vec::iter::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":3165},{"krate":0,"index":3166},{"krate":0,"index":3167}],"decl_id":null,"docs":" A draining iterator for `BitVec<O, T>`.","sig":null,"attributes":[{"value":"* A draining iterator for `BitVec<O, T>`.\n\nThis `struct` is created by the [`drain`] method on [`BitVec`].\n\n# Original\n\n[`vec::Drain`](https://doc.rust-lang.org/alloc/vec/struct.Drain.html)\n\n[`BitVec`]: struct.BitVec.html\n[`drain`]: struct.BitVec.html#method.drain\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":553390,"byte_end":553660,"line_start":329,"line_end":339,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":3174},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":555444,"byte_end":555455,"line_start":403,"line_end":403,"column_start":9,"column_end":20},"name":"as_bitslice","qualname":"<Drain>::as_bitslice","value":"pub fn as_bitslice(&Self) -> &'a BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the remaining bits of this iterator as a bit-slice.","sig":null,"attributes":[{"value":"/ Returns the remaining bits of this iterator as a bit-slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":555072,"byte_end":555135,"line_start":391,"line_end":391,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":555137,"byte_end":555140,"line_start":392,"line_end":392,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":555142,"byte_end":555156,"line_start":393,"line_end":393,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":555158,"byte_end":555161,"line_start":394,"line_end":394,"column_start":2,"column_end":5}},{"value":"/ [`Drain::as_slice`](https://doc.rust-lang.org/alloc/vec/struct.Drain.html#method.as_slice)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":555163,"byte_end":555257,"line_start":395,"line_end":395,"column_start":2,"column_end":96}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":555259,"byte_end":555262,"line_start":396,"line_end":396,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":555264,"byte_end":555285,"line_start":397,"line_end":397,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":555287,"byte_end":555290,"line_start":398,"line_end":398,"column_start":2,"column_end":5}},{"value":"/ This method is renamed, as it operates on a bit-slice rather than an","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":555292,"byte_end":555364,"line_start":399,"line_end":399,"column_start":2,"column_end":74}},{"value":"/ element slice.","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":555366,"byte_end":555384,"line_start":400,"line_end":400,"column_start":2,"column_end":20}},{"value":"inline(always)","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":555386,"byte_end":555403,"line_start":401,"line_end":401,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":555405,"byte_end":555435,"line_start":402,"line_end":402,"column_start":2,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":5725},"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":561879,"byte_end":561885,"line_start":668,"line_end":668,"column_start":12,"column_end":18},"name":"Splice","qualname":"::vec::iter::Splice","value":"Splice {  }","parent":null,"children":[{"krate":0,"index":5730},{"krate":0,"index":5731}],"decl_id":null,"docs":" A splicing iterator for `BitVec`.","sig":null,"attributes":[{"value":"* A splicing iterator for `BitVec`.\n\nThis struct is created by the [`splice()`] method on [`BitVec`]. See its\ndocumentation for more.\n\n# Original\n\n[`vec::Splice`](https://doc.rust-lang.org/alloc/vec/struct.Splice.html)\n\n[`BitVec`]: struct.BitVec.html\n[`splice()`]: struct.BitVec.html#method.splice\n**/","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":561547,"byte_end":561850,"line_start":655,"line_end":666,"column_start":1,"column_end":4}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/access.rs","byte_start":38651,"byte_end":38652,"line_start":303,"line_end":303,"column_start":23,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":45010,"byte_end":45018,"line_start":153,"line_end":153,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/ops.rs","byte_start":48607,"byte_end":48615,"line_start":25,"line_end":25,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":156},{"krate":0,"index":157}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/ops.rs","byte_start":48906,"byte_end":48914,"line_start":41,"line_end":41,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":162}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/ops.rs","byte_start":49161,"byte_end":49169,"line_start":54,"line_end":54,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":167},{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/ops.rs","byte_start":49457,"byte_end":49465,"line_start":70,"line_end":70,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/ops.rs","byte_start":49711,"byte_end":49719,"line_start":83,"line_end":83,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":178},{"krate":0,"index":179}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/ops.rs","byte_start":50010,"byte_end":50018,"line_start":99,"line_end":99,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/ops.rs","byte_start":50255,"byte_end":50263,"line_start":112,"line_end":112,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":188},{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/ops.rs","byte_start":50489,"byte_end":50497,"line_start":126,"line_end":126,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":193}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/ops.rs","byte_start":50676,"byte_end":50684,"line_start":137,"line_end":137,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":198},{"krate":0,"index":199}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/ops.rs","byte_start":50966,"byte_end":50974,"line_start":151,"line_end":151,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/ops.rs","byte_start":51232,"byte_end":51240,"line_start":164,"line_end":164,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":208},{"krate":0,"index":209}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":51852,"byte_end":51860,"line_start":36,"line_end":36,"column_start":46,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":279}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":52081,"byte_end":52089,"line_start":48,"line_end":48,"column_start":49,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":283}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":52265,"byte_end":52273,"line_start":59,"line_end":59,"column_start":19,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":52376,"byte_end":52384,"line_start":67,"line_end":67,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":290}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":52620,"byte_end":52628,"line_start":79,"line_end":79,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":295}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":52853,"byte_end":52861,"line_start":92,"line_end":92,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":300}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":53125,"byte_end":53133,"line_start":106,"line_end":106,"column_start":46,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":305}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":53395,"byte_end":53403,"line_start":119,"line_end":119,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":310}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":53703,"byte_end":53711,"line_start":133,"line_end":133,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":53928,"byte_end":53936,"line_start":145,"line_end":145,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":318}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":54144,"byte_end":54152,"line_start":157,"line_end":157,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":322}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":54325,"byte_end":54333,"line_start":168,"line_end":168,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":328},{"krate":0,"index":329}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":55791,"byte_end":55799,"line_start":227,"line_end":227,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":345}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":55968,"byte_end":55976,"line_start":239,"line_end":239,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":349}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":56156,"byte_end":56164,"line_start":250,"line_end":250,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":353}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":56517,"byte_end":56525,"line_start":271,"line_end":271,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":357}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":56739,"byte_end":56747,"line_start":283,"line_end":283,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":361}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":56960,"byte_end":56968,"line_start":295,"line_end":295,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":365}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":57181,"byte_end":57189,"line_start":307,"line_end":307,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":369}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":57401,"byte_end":57409,"line_start":319,"line_end":319,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":373}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":58325,"byte_end":58333,"line_start":361,"line_end":361,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":58573,"byte_end":58593,"line_start":374,"line_end":374,"column_start":6,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":393}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":58715,"byte_end":58735,"line_start":382,"line_end":382,"column_start":18,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":396}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":58917,"byte_end":58937,"line_start":390,"line_end":390,"column_start":28,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":69541,"byte_end":69550,"line_start":342,"line_end":342,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":459}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":69677,"byte_end":69686,"line_start":353,"line_end":353,"column_start":21,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":77089,"byte_end":77095,"line_start":614,"line_end":614,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":466}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":77208,"byte_end":77214,"line_start":623,"line_end":623,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":470},{"krate":0,"index":471}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":77864,"byte_end":77870,"line_start":651,"line_end":651,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":478}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":78496,"byte_end":78502,"line_start":677,"line_end":677,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":484}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":78775,"byte_end":78781,"line_start":691,"line_end":691,"column_start":39,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":78829,"byte_end":78835,"line_start":695,"line_end":695,"column_start":18,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":90261,"byte_end":90269,"line_start":300,"line_end":300,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":572},{"krate":0,"index":574},{"krate":0,"index":576},{"krate":0,"index":578}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":94382,"byte_end":94390,"line_start":460,"line_end":460,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":582},{"krate":0,"index":584},{"krate":0,"index":586},{"krate":0,"index":588}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":97776,"byte_end":97784,"line_start":622,"line_end":622,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":593},{"krate":0,"index":595},{"krate":0,"index":597},{"krate":0,"index":599}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":98363,"byte_end":98369,"line_start":655,"line_end":655,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":604},{"krate":0,"index":606},{"krate":0,"index":608},{"krate":0,"index":610}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":98942,"byte_end":98948,"line_start":688,"line_end":688,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":615},{"krate":0,"index":617},{"krate":0,"index":619},{"krate":0,"index":621}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field/io.rs","byte_start":108349,"byte_end":108355,"line_start":104,"line_end":104,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":684},{"krate":0,"index":685}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":114426,"byte_end":114432,"line_start":151,"line_end":151,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":746},{"krate":0,"index":747},{"krate":0,"index":748},{"krate":0,"index":749},{"krate":0,"index":750},{"krate":0,"index":751},{"krate":0,"index":752},{"krate":0,"index":754},{"krate":0,"index":756},{"krate":0,"index":758},{"krate":0,"index":759},{"krate":0,"index":762},{"krate":0,"index":765},{"krate":0,"index":766}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":122391,"byte_end":122397,"line_start":409,"line_end":409,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":769}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":122597,"byte_end":122603,"line_start":419,"line_end":419,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":772}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":122854,"byte_end":122860,"line_start":431,"line_end":431,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":775}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":125938,"byte_end":125945,"line_start":546,"line_end":546,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":778},{"krate":0,"index":779},{"krate":0,"index":780},{"krate":0,"index":781},{"krate":0,"index":782}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":128604,"byte_end":128611,"line_start":648,"line_end":648,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":785}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":128863,"byte_end":128870,"line_start":660,"line_end":660,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":788}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":130525,"byte_end":130531,"line_start":708,"line_end":708,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":791},{"krate":0,"index":792},{"krate":0,"index":793},{"krate":0,"index":794},{"krate":0,"index":795}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":132741,"byte_end":132747,"line_start":804,"line_end":804,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":798}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":132998,"byte_end":133004,"line_start":816,"line_end":816,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":801}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":134183,"byte_end":134189,"line_start":857,"line_end":857,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":804},{"krate":0,"index":805},{"krate":0,"index":806},{"krate":0,"index":807},{"krate":0,"index":808}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":136109,"byte_end":136115,"line_start":937,"line_end":937,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":813}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":136315,"byte_end":136321,"line_start":947,"line_end":947,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":816}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":136567,"byte_end":136573,"line_start":959,"line_end":959,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":819}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":137401,"byte_end":137408,"line_start":989,"line_end":989,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":822},{"krate":0,"index":823},{"krate":0,"index":824},{"krate":0,"index":825},{"krate":0,"index":826},{"krate":0,"index":827},{"krate":0,"index":828}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":139339,"byte_end":139346,"line_start":1076,"line_end":1076,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":831}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":139547,"byte_end":139554,"line_start":1086,"line_end":1086,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":834}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":139801,"byte_end":139808,"line_start":1098,"line_end":1098,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":837}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":139972,"byte_end":139979,"line_start":1107,"line_end":1107,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":840}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":140140,"byte_end":140147,"line_start":1116,"line_end":1116,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":844},{"krate":0,"index":845}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":140288,"byte_end":140295,"line_start":1126,"line_end":1126,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":848},{"krate":0,"index":849}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":140430,"byte_end":140437,"line_start":1136,"line_end":1136,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":852},{"krate":0,"index":853}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":154467,"byte_end":154471,"line_start":245,"line_end":245,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":907},{"krate":0,"index":909},{"krate":0,"index":911}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":155951,"byte_end":155955,"line_start":290,"line_end":290,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":916},{"krate":0,"index":918},{"krate":0,"index":920}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/pointer.rs","byte_start":164250,"byte_end":164257,"line_start":63,"line_end":63,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":987},{"krate":0,"index":988},{"krate":0,"index":989},{"krate":0,"index":990},{"krate":0,"index":991},{"krate":0,"index":992}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/pointer.rs","byte_start":165251,"byte_end":165258,"line_start":108,"line_end":108,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":995}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/pointer.rs","byte_start":165405,"byte_end":165412,"line_start":118,"line_end":118,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":998}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/pointer.rs","byte_start":165576,"byte_end":165583,"line_start":128,"line_end":128,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1001}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/pointer.rs","byte_start":165752,"byte_end":165759,"line_start":138,"line_end":138,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1004}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/pointer.rs","byte_start":165923,"byte_end":165930,"line_start":148,"line_end":148,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1007}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/pointer.rs","byte_start":166088,"byte_end":166095,"line_start":158,"line_end":158,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1010}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/pointer.rs","byte_start":166285,"byte_end":166292,"line_start":168,"line_end":168,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1013}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/pointer.rs","byte_start":166449,"byte_end":166456,"line_start":177,"line_end":177,"column_start":18,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Inherent","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/pointer.rs","byte_start":172345,"byte_end":172351,"line_start":331,"line_end":331,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1018},{"krate":0,"index":1019},{"krate":0,"index":1020},{"krate":0,"index":1021},{"krate":0,"index":1022},{"krate":0,"index":1023},{"krate":0,"index":1024},{"krate":0,"index":1025},{"krate":0,"index":1026},{"krate":0,"index":1028},{"krate":0,"index":1030},{"krate":0,"index":1032},{"krate":0,"index":1033},{"krate":0,"index":1035},{"krate":0,"index":1036},{"krate":0,"index":1037},{"krate":0,"index":1038},{"krate":0,"index":1039},{"krate":0,"index":1040},{"krate":0,"index":1041},{"krate":0,"index":1042},{"krate":0,"index":1043},{"krate":0,"index":1045},{"krate":0,"index":1047},{"krate":0,"index":1049},{"krate":0,"index":1050},{"krate":0,"index":1052},{"krate":0,"index":1054},{"krate":0,"index":1056},{"krate":0,"index":1058},{"krate":0,"index":1061},{"krate":0,"index":1064},{"krate":0,"index":1066}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/pointer.rs","byte_start":194445,"byte_end":194451,"line_start":1018,"line_end":1018,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1071}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/pointer.rs","byte_start":194563,"byte_end":194569,"line_start":1026,"line_end":1026,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1075}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/pointer.rs","byte_start":195096,"byte_end":195102,"line_start":1044,"line_end":1044,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1078}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/pointer.rs","byte_start":195238,"byte_end":195244,"line_start":1054,"line_end":1054,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1081}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/pointer.rs","byte_start":195423,"byte_end":195429,"line_start":1064,"line_end":1064,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1084}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/pointer.rs","byte_start":195586,"byte_end":195592,"line_start":1073,"line_end":1073,"column_start":18,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":215896,"byte_end":215904,"line_start":416,"line_end":416,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1272},{"krate":0,"index":1273},{"krate":0,"index":1274},{"krate":0,"index":1275},{"krate":0,"index":1276},{"krate":0,"index":1277}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":223146,"byte_end":223154,"line_start":654,"line_end":654,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1281},{"krate":0,"index":1283},{"krate":0,"index":1285},{"krate":0,"index":1286},{"krate":0,"index":1287},{"krate":0,"index":1291},{"krate":0,"index":1295},{"krate":0,"index":1296},{"krate":0,"index":1297},{"krate":0,"index":1298},{"krate":0,"index":1302},{"krate":0,"index":1306},{"krate":0,"index":1307},{"krate":0,"index":1309},{"krate":0,"index":1310},{"krate":0,"index":1312},{"krate":0,"index":1314},{"krate":0,"index":1315},{"krate":0,"index":1316},{"krate":0,"index":1317},{"krate":0,"index":1318},{"krate":0,"index":1319},{"krate":0,"index":1320},{"krate":0,"index":1321},{"krate":0,"index":1322},{"krate":0,"index":1323},{"krate":0,"index":1325},{"krate":0,"index":1326},{"krate":0,"index":1327},{"krate":0,"index":1328},{"krate":0,"index":1329},{"krate":0,"index":1330},{"krate":0,"index":1331}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Inherent","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":258900,"byte_end":258908,"line_start":1914,"line_end":1914,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1335}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Inherent","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":259762,"byte_end":259770,"line_start":1943,"line_end":1943,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1339},{"krate":0,"index":1340}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Inherent","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":266466,"byte_end":266474,"line_start":65,"line_end":65,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1486},{"krate":0,"index":1487},{"krate":0,"index":1488},{"krate":0,"index":1489},{"krate":0,"index":1490},{"krate":0,"index":1491},{"krate":0,"index":1492},{"krate":0,"index":1493},{"krate":0,"index":1494},{"krate":0,"index":1495},{"krate":0,"index":1496},{"krate":0,"index":1499},{"krate":0,"index":1502},{"krate":0,"index":1505},{"krate":0,"index":1508},{"krate":0,"index":1509},{"krate":0,"index":1510},{"krate":0,"index":1511},{"krate":0,"index":1512},{"krate":0,"index":1513},{"krate":0,"index":1514},{"krate":0,"index":1515},{"krate":0,"index":1516},{"krate":0,"index":1517},{"krate":0,"index":1518},{"krate":0,"index":1519},{"krate":0,"index":1520},{"krate":0,"index":1521},{"krate":0,"index":1522},{"krate":0,"index":1523},{"krate":0,"index":1524},{"krate":0,"index":1525},{"krate":0,"index":1527},{"krate":0,"index":1529},{"krate":0,"index":1531},{"krate":0,"index":1533},{"krate":0,"index":1535},{"krate":0,"index":1537},{"krate":0,"index":1539},{"krate":0,"index":1541},{"krate":0,"index":1545},{"krate":0,"index":1548},{"krate":0,"index":1551},{"krate":0,"index":1552},{"krate":0,"index":1553},{"krate":0,"index":1556},{"krate":0,"index":1559},{"krate":0,"index":1560},{"krate":0,"index":1561},{"krate":0,"index":1563},{"krate":0,"index":1566},{"krate":0,"index":1569},{"krate":0,"index":1571}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Inherent","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":332780,"byte_end":332788,"line_start":2284,"line_end":2284,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1576},{"krate":0,"index":1577},{"krate":0,"index":1578}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":349098,"byte_end":349107,"line_start":2865,"line_end":2865,"column_start":44,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1627},{"krate":0,"index":1628},{"krate":0,"index":1629},{"krate":0,"index":1630},{"krate":0,"index":1631},{"krate":0,"index":1632},{"krate":0,"index":1633},{"krate":0,"index":1634}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Inherent","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":351957,"byte_end":351961,"line_start":90,"line_end":90,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1692},{"krate":0,"index":1693},{"krate":0,"index":1694},{"krate":0,"index":1695}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":354554,"byte_end":354558,"line_start":181,"line_end":181,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1699}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":354714,"byte_end":354718,"line_start":192,"line_end":192,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1703}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":355337,"byte_end":355341,"line_start":228,"line_end":228,"column_start":21,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Inherent","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":357030,"byte_end":357037,"line_start":290,"line_end":290,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1718},{"krate":0,"index":1719},{"krate":0,"index":1720},{"krate":0,"index":1721}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Inherent","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":360678,"byte_end":360682,"line_start":425,"line_end":425,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1733},{"krate":0,"index":1734},{"krate":0,"index":1735},{"krate":0,"index":1736},{"krate":0,"index":1737}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Inherent","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":361295,"byte_end":361302,"line_start":460,"line_end":460,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1742},{"krate":0,"index":1743},{"krate":0,"index":1744},{"krate":0,"index":1745},{"krate":0,"index":1746}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Inherent","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":374950,"byte_end":374961,"line_start":1038,"line_end":1038,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1753},{"krate":0,"index":1754}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Inherent","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":378033,"byte_end":378047,"line_start":1159,"line_end":1159,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1759},{"krate":0,"index":1760}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Inherent","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":387114,"byte_end":387126,"line_start":1496,"line_end":1496,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1765},{"krate":0,"index":1766}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Inherent","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":390294,"byte_end":390309,"line_start":1618,"line_end":1618,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1771},{"krate":0,"index":1772}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/ops.rs","byte_start":413585,"byte_end":413593,"line_start":32,"line_end":32,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1890}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/ops.rs","byte_start":413849,"byte_end":413857,"line_start":44,"line_end":44,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1896}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/ops.rs","byte_start":414113,"byte_end":414121,"line_start":56,"line_end":56,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1902}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/ops.rs","byte_start":414368,"byte_end":414376,"line_start":68,"line_end":68,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1907},{"krate":0,"index":1908}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Inherent","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/proxy.rs","byte_start":419536,"byte_end":419542,"line_start":101,"line_end":101,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1974},{"krate":0,"index":1975},{"krate":0,"index":1976}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/proxy.rs","byte_start":421185,"byte_end":421191,"line_start":157,"line_end":157,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1980}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/proxy.rs","byte_start":421555,"byte_end":421561,"line_start":173,"line_end":173,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1984},{"krate":0,"index":1985}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/proxy.rs","byte_start":421720,"byte_end":421726,"line_start":186,"line_end":186,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1989}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/proxy.rs","byte_start":421875,"byte_end":421881,"line_start":197,"line_end":197,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1993}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/traits.rs","byte_start":423198,"byte_end":423206,"line_start":43,"line_end":43,"column_start":19,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/traits.rs","byte_start":423271,"byte_end":423279,"line_start":50,"line_end":50,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2080}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/traits.rs","byte_start":423781,"byte_end":423789,"line_start":69,"line_end":69,"column_start":54,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":2086}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/traits.rs","byte_start":424642,"byte_end":424650,"line_start":115,"line_end":115,"column_start":55,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":2105}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/traits.rs","byte_start":424899,"byte_end":424907,"line_start":129,"line_end":129,"column_start":59,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":2111}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/traits.rs","byte_start":425475,"byte_end":425483,"line_start":149,"line_end":149,"column_start":55,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":2117}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/traits.rs","byte_start":426508,"byte_end":426516,"line_start":198,"line_end":198,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":2135}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/traits.rs","byte_start":426774,"byte_end":426782,"line_start":211,"line_end":211,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":2141}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/traits.rs","byte_start":428130,"byte_end":428138,"line_start":288,"line_end":288,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2171}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/traits.rs","byte_start":428410,"byte_end":428418,"line_start":304,"line_end":304,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2175}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/traits.rs","byte_start":428897,"byte_end":428905,"line_start":322,"line_end":322,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2179}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/traits.rs","byte_start":434480,"byte_end":434488,"line_start":479,"line_end":479,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2184}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/traits.rs","byte_start":434685,"byte_end":434693,"line_start":493,"line_end":493,"column_start":28,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/traits.rs","byte_start":434788,"byte_end":434796,"line_start":501,"line_end":501,"column_start":28,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/traits.rs","byte_start":434913,"byte_end":434921,"line_start":510,"line_end":510,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2195},{"krate":0,"index":2196}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":447456,"byte_end":447460,"line_start":247,"line_end":247,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2322},{"krate":0,"index":2323},{"krate":0,"index":2324},{"krate":0,"index":2325},{"krate":0,"index":2326},{"krate":0,"index":2328},{"krate":0,"index":2330}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":448042,"byte_end":448046,"line_start":273,"line_end":273,"column_start":26,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":454593,"byte_end":454594,"line_start":126,"line_end":126,"column_start":21,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2374},{"krate":0,"index":2375},{"krate":0,"index":2376},{"krate":0,"index":2378},{"krate":0,"index":2380}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":459998,"byte_end":459999,"line_start":350,"line_end":350,"column_start":26,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2412}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":460223,"byte_end":460224,"line_start":363,"line_end":363,"column_start":29,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2417}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Inherent","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":465092,"byte_end":465098,"line_start":137,"line_end":137,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2466},{"krate":0,"index":2467},{"krate":0,"index":2468},{"krate":0,"index":2469},{"krate":0,"index":2470},{"krate":0,"index":2471},{"krate":0,"index":2472},{"krate":0,"index":2473},{"krate":0,"index":2474},{"krate":0,"index":2475},{"krate":0,"index":2476}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Inherent","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":474083,"byte_end":474089,"line_start":20,"line_end":20,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2517},{"krate":0,"index":2518},{"krate":0,"index":2519},{"krate":0,"index":2521},{"krate":0,"index":2522},{"krate":0,"index":2524}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/ops.rs","byte_start":482247,"byte_end":482253,"line_start":29,"line_end":29,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2585},{"krate":0,"index":2586}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/ops.rs","byte_start":482530,"byte_end":482536,"line_start":45,"line_end":45,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2591}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/ops.rs","byte_start":482769,"byte_end":482775,"line_start":58,"line_end":58,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2596},{"krate":0,"index":2597}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/ops.rs","byte_start":483049,"byte_end":483055,"line_start":74,"line_end":74,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2602}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/ops.rs","byte_start":483287,"byte_end":483293,"line_start":87,"line_end":87,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2607},{"krate":0,"index":2608}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/ops.rs","byte_start":483570,"byte_end":483576,"line_start":103,"line_end":103,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2613}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/ops.rs","byte_start":483799,"byte_end":483805,"line_start":116,"line_end":116,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2617},{"krate":0,"index":2618}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/ops.rs","byte_start":484017,"byte_end":484023,"line_start":130,"line_end":130,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2622}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/ops.rs","byte_start":484184,"byte_end":484190,"line_start":141,"line_end":141,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2626}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/ops.rs","byte_start":484455,"byte_end":484461,"line_start":154,"line_end":154,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2632},{"krate":0,"index":2633}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/ops.rs","byte_start":484753,"byte_end":484759,"line_start":169,"line_end":169,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2638}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/ops.rs","byte_start":485003,"byte_end":485009,"line_start":182,"line_end":182,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2642},{"krate":0,"index":2643}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":485720,"byte_end":485726,"line_start":42,"line_end":42,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2725}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":485926,"byte_end":485932,"line_start":54,"line_end":54,"column_start":42,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2729}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":486128,"byte_end":486134,"line_start":66,"line_end":66,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2733}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":486286,"byte_end":486292,"line_start":77,"line_end":77,"column_start":19,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":486388,"byte_end":486394,"line_start":85,"line_end":85,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2740}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":486630,"byte_end":486638,"line_start":97,"line_end":97,"column_start":52,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":2746}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":487409,"byte_end":487415,"line_start":139,"line_end":139,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2763}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":487655,"byte_end":487663,"line_start":152,"line_end":152,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2767}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":487902,"byte_end":487908,"line_start":164,"line_end":164,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2772}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":488182,"byte_end":488188,"line_start":177,"line_end":177,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2776}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":488384,"byte_end":488390,"line_start":189,"line_end":189,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2780}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":488605,"byte_end":488611,"line_start":201,"line_end":201,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2785}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":488819,"byte_end":488825,"line_start":213,"line_end":213,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2789}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":489018,"byte_end":489024,"line_start":225,"line_end":225,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2793}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":489211,"byte_end":489217,"line_start":237,"line_end":237,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2797},{"krate":0,"index":2798}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":489461,"byte_end":489467,"line_start":251,"line_end":251,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2802}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":489633,"byte_end":489639,"line_start":264,"line_end":264,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2806}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":489992,"byte_end":489998,"line_start":285,"line_end":285,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2810}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":490204,"byte_end":490210,"line_start":297,"line_end":297,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2814}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":490417,"byte_end":490423,"line_start":309,"line_end":309,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2818}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":490629,"byte_end":490635,"line_start":321,"line_end":321,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2822}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":490840,"byte_end":490846,"line_start":333,"line_end":333,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2826}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":491088,"byte_end":491094,"line_start":346,"line_end":346,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2830}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":491299,"byte_end":491305,"line_start":358,"line_end":358,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2834}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":491478,"byte_end":491484,"line_start":370,"line_end":370,"column_start":28,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":491557,"byte_end":491563,"line_start":377,"line_end":377,"column_start":28,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":491630,"byte_end":491636,"line_start":384,"line_end":384,"column_start":22,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Inherent","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":497196,"byte_end":497202,"line_start":142,"line_end":142,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2903},{"krate":0,"index":2904},{"krate":0,"index":2906},{"krate":0,"index":2907},{"krate":0,"index":2908},{"krate":0,"index":2909},{"krate":0,"index":2910},{"krate":0,"index":2911},{"krate":0,"index":2912},{"krate":0,"index":2913},{"krate":0,"index":2915},{"krate":0,"index":2917},{"krate":0,"index":2918},{"krate":0,"index":2919},{"krate":0,"index":2920},{"krate":0,"index":2921},{"krate":0,"index":2922}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Inherent","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":512604,"byte_end":512610,"line_start":37,"line_end":37,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2986},{"krate":0,"index":2987},{"krate":0,"index":2989},{"krate":0,"index":2991},{"krate":0,"index":2992},{"krate":0,"index":2994},{"krate":0,"index":2996},{"krate":0,"index":2998},{"krate":0,"index":2999},{"krate":0,"index":3000},{"krate":0,"index":3001},{"krate":0,"index":3002},{"krate":0,"index":3003},{"krate":0,"index":3004},{"krate":0,"index":3006},{"krate":0,"index":3007},{"krate":0,"index":3008},{"krate":0,"index":3009},{"krate":0,"index":3011},{"krate":0,"index":3014},{"krate":0,"index":3016},{"krate":0,"index":3019},{"krate":0,"index":3021},{"krate":0,"index":3022},{"krate":0,"index":3023},{"krate":0,"index":3026},{"krate":0,"index":3027},{"krate":0,"index":3028}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":546885,"byte_end":546891,"line_start":37,"line_end":37,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3093}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":547589,"byte_end":547595,"line_start":67,"line_end":67,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3100}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":547807,"byte_end":547813,"line_start":79,"line_end":79,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3105}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":548145,"byte_end":548151,"line_start":96,"line_end":96,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3111}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":548365,"byte_end":548371,"line_start":108,"line_end":108,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3116},{"krate":0,"index":3117},{"krate":0,"index":3118}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Inherent","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":550235,"byte_end":550243,"line_start":186,"line_end":186,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3136},{"krate":0,"index":3137},{"krate":0,"index":3138},{"krate":0,"index":3139}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":552269,"byte_end":552277,"line_start":260,"line_end":260,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3143},{"krate":0,"index":3144},{"krate":0,"index":3145},{"krate":0,"index":3146},{"krate":0,"index":3147},{"krate":0,"index":3148}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":552851,"byte_end":552859,"line_start":294,"line_end":294,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3152},{"krate":0,"index":3153}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":553187,"byte_end":553195,"line_start":311,"line_end":311,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":3157}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":553336,"byte_end":553344,"line_start":322,"line_end":322,"column_start":30,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Inherent","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":554085,"byte_end":554090,"line_start":354,"line_end":354,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":3172},{"krate":0,"index":3174},{"krate":0,"index":3175},{"krate":0,"index":3177}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":558635,"byte_end":558640,"line_start":504,"line_end":504,"column_start":38,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3181}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":558828,"byte_end":558833,"line_start":516,"line_end":516,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3186}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":559087,"byte_end":559092,"line_start":530,"line_end":530,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3190},{"krate":0,"index":3191},{"krate":0,"index":3192},{"krate":0,"index":3193},{"krate":0,"index":3194},{"krate":0,"index":3195}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":559673,"byte_end":559678,"line_start":564,"line_end":564,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3199},{"krate":0,"index":3200}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":560012,"byte_end":560017,"line_start":581,"line_end":581,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3204}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":560163,"byte_end":560168,"line_start":592,"line_end":592,"column_start":30,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":560245,"byte_end":560250,"line_start":599,"line_end":599,"column_start":28,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":560327,"byte_end":560332,"line_start":606,"line_end":606,"column_start":28,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":560402,"byte_end":560407,"line_start":613,"line_end":613,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3217}],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Inherent","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":562119,"byte_end":562125,"line_start":680,"line_end":680,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":3223}],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":562479,"byte_end":562485,"line_start":694,"line_end":694,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3229},{"krate":0,"index":3230},{"krate":0,"index":3232},{"krate":0,"index":3233}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":563791,"byte_end":563797,"line_start":741,"line_end":741,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3238},{"krate":0,"index":3239}],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":564146,"byte_end":564152,"line_start":759,"line_end":759,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3244}],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":564331,"byte_end":564337,"line_start":771,"line_end":771,"column_start":33,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":239,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":564440,"byte_end":564446,"line_start":779,"line_end":779,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3253}],"docs":"","sig":null,"attributes":[]},{"id":240,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/ops.rs","byte_start":566417,"byte_end":566423,"line_start":29,"line_end":29,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3313},{"krate":0,"index":3314}],"docs":"","sig":null,"attributes":[]},{"id":241,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/ops.rs","byte_start":566700,"byte_end":566706,"line_start":45,"line_end":45,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3319}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/ops.rs","byte_start":566939,"byte_end":566945,"line_start":58,"line_end":58,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3324},{"krate":0,"index":3325}],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/ops.rs","byte_start":567219,"byte_end":567225,"line_start":74,"line_end":74,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3330}],"docs":"","sig":null,"attributes":[]},{"id":244,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/ops.rs","byte_start":567457,"byte_end":567463,"line_start":87,"line_end":87,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3335},{"krate":0,"index":3336}],"docs":"","sig":null,"attributes":[]},{"id":245,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/ops.rs","byte_start":567740,"byte_end":567746,"line_start":103,"line_end":103,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3341}],"docs":"","sig":null,"attributes":[]},{"id":246,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/ops.rs","byte_start":567969,"byte_end":567975,"line_start":116,"line_end":116,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3345},{"krate":0,"index":3346}],"docs":"","sig":null,"attributes":[]},{"id":247,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/ops.rs","byte_start":568187,"byte_end":568193,"line_start":130,"line_end":130,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3350}],"docs":"","sig":null,"attributes":[]},{"id":248,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/ops.rs","byte_start":568354,"byte_end":568360,"line_start":141,"line_end":141,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3354}],"docs":"","sig":null,"attributes":[]},{"id":249,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/ops.rs","byte_start":568688,"byte_end":568694,"line_start":156,"line_end":156,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3360},{"krate":0,"index":3361}],"docs":"","sig":null,"attributes":[]},{"id":250,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/ops.rs","byte_start":568986,"byte_end":568992,"line_start":171,"line_end":171,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3366}],"docs":"","sig":null,"attributes":[]},{"id":251,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/ops.rs","byte_start":569414,"byte_end":569420,"line_start":188,"line_end":188,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3370},{"krate":0,"index":3371}],"docs":"","sig":null,"attributes":[]},{"id":252,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":570128,"byte_end":570134,"line_start":44,"line_end":44,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3454}],"docs":"","sig":null,"attributes":[]},{"id":253,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":570334,"byte_end":570340,"line_start":56,"line_end":56,"column_start":42,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":3458}],"docs":"","sig":null,"attributes":[]},{"id":254,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":570505,"byte_end":570511,"line_start":67,"line_end":67,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3462},{"krate":0,"index":3463}],"docs":"","sig":null,"attributes":[]},{"id":255,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":571050,"byte_end":571056,"line_start":95,"line_end":95,"column_start":19,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":256,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":571152,"byte_end":571158,"line_start":103,"line_end":103,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3472}],"docs":"","sig":null,"attributes":[]},{"id":257,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":571394,"byte_end":571402,"line_start":115,"line_end":115,"column_start":52,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":3478}],"docs":"","sig":null,"attributes":[]},{"id":258,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":572173,"byte_end":572179,"line_start":157,"line_end":157,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":3495}],"docs":"","sig":null,"attributes":[]},{"id":259,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":572419,"byte_end":572427,"line_start":170,"line_end":170,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3499}],"docs":"","sig":null,"attributes":[]},{"id":260,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":572666,"byte_end":572672,"line_start":182,"line_end":182,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3504}],"docs":"","sig":null,"attributes":[]},{"id":261,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":572946,"byte_end":572952,"line_start":195,"line_end":195,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3508}],"docs":"","sig":null,"attributes":[]},{"id":262,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":573148,"byte_end":573154,"line_start":207,"line_end":207,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3512}],"docs":"","sig":null,"attributes":[]},{"id":263,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":573369,"byte_end":573375,"line_start":219,"line_end":219,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":3517}],"docs":"","sig":null,"attributes":[]},{"id":264,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":573588,"byte_end":573594,"line_start":231,"line_end":231,"column_start":49,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":3522}],"docs":"","sig":null,"attributes":[]},{"id":265,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":573797,"byte_end":573803,"line_start":243,"line_end":243,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3526}],"docs":"","sig":null,"attributes":[]},{"id":266,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":573992,"byte_end":573998,"line_start":255,"line_end":255,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3530}],"docs":"","sig":null,"attributes":[]},{"id":267,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":574173,"byte_end":574179,"line_start":267,"line_end":267,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3534},{"krate":0,"index":3535}],"docs":"","sig":null,"attributes":[]},{"id":268,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":574407,"byte_end":574413,"line_start":281,"line_end":281,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3539}],"docs":"","sig":null,"attributes":[]},{"id":269,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":574540,"byte_end":574546,"line_start":292,"line_end":292,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3543}],"docs":"","sig":null,"attributes":[]},{"id":270,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":574833,"byte_end":574839,"line_start":308,"line_end":308,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3547}],"docs":"","sig":null,"attributes":[]},{"id":271,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":575045,"byte_end":575051,"line_start":320,"line_end":320,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3551}],"docs":"","sig":null,"attributes":[]},{"id":272,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":575258,"byte_end":575264,"line_start":332,"line_end":332,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3555}],"docs":"","sig":null,"attributes":[]},{"id":273,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":575470,"byte_end":575476,"line_start":344,"line_end":344,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3559}],"docs":"","sig":null,"attributes":[]},{"id":274,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":575650,"byte_end":575656,"line_start":355,"line_end":355,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3563}],"docs":"","sig":null,"attributes":[]},{"id":275,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":575955,"byte_end":575961,"line_start":371,"line_end":371,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3567}],"docs":"","sig":null,"attributes":[]},{"id":276,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":576166,"byte_end":576172,"line_start":383,"line_end":383,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3571}],"docs":"","sig":null,"attributes":[]},{"id":277,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":576345,"byte_end":576351,"line_start":395,"line_end":395,"column_start":28,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":278,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":576424,"byte_end":576430,"line_start":402,"line_end":402,"column_start":28,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":279,"kind":"Direct","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":576497,"byte_end":576503,"line_start":409,"line_end":409,"column_start":22,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/lib.rs","byte_start":6142,"byte_end":6148,"line_start":156,"line_end":156,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":4}},{"kind":"Mod","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/macros.rs","byte_start":6629,"byte_end":6637,"line_start":5,"line_end":5,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":5}},{"kind":"Mod","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/lib.rs","byte_start":6171,"byte_end":6176,"line_start":159,"line_end":159,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":67}},{"kind":"Mod","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/lib.rs","byte_start":6186,"byte_end":6192,"line_start":160,"line_end":160,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":398}},{"kind":"Mod","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/lib.rs","byte_start":6202,"byte_end":6207,"line_start":161,"line_end":161,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":490}},{"kind":"Mod","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/lib.rs","byte_start":6217,"byte_end":6222,"line_start":162,"line_end":162,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":686}},{"kind":"Mod","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/lib.rs","byte_start":6232,"byte_end":6235,"line_start":163,"line_end":163,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":854}},{"kind":"Mod","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/lib.rs","byte_start":6245,"byte_end":6250,"line_start":164,"line_end":164,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":877}},{"kind":"Mod","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/lib.rs","byte_start":6273,"byte_end":6280,"line_start":166,"line_end":166,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":1087}},{"kind":"Mod","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/lib.rs","byte_start":6290,"byte_end":6295,"line_start":167,"line_end":167,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1191}},{"kind":"Mod","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/lib.rs","byte_start":6305,"byte_end":6310,"line_start":168,"line_end":168,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":2275}},{"kind":"Mod","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/lib.rs","byte_start":6320,"byte_end":6324,"line_start":169,"line_end":169,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":2335}},{"kind":"Mod","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/lib.rs","byte_start":6361,"byte_end":6366,"line_start":172,"line_end":172,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":2419}},{"kind":"Mod","span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/lib.rs","byte_start":6403,"byte_end":6406,"line_start":175,"line_end":175,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":2845}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/access.rs","byte_start":30776,"byte_end":30781,"line_start":39,"line_end":39,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":9293},"to":{"krate":0,"index":46}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/access.rs","byte_start":30784,"byte_end":30790,"line_start":39,"line_end":39,"column_start":30,"column_end":36},"kind":"SuperTrait","from":{"krate":20,"index":55},"to":{"krate":0,"index":46}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/access.rs","byte_start":30793,"byte_end":30798,"line_start":39,"line_end":39,"column_start":39,"column_end":44},"kind":"SuperTrait","from":{"krate":2,"index":2994},"to":{"krate":0,"index":46}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/access.rs","byte_start":38651,"byte_end":38652,"line_start":303,"line_end":303,"column_start":23,"column_end":24},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":66},"to":{"krate":0,"index":46}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array.rs","byte_start":45010,"byte_end":45018,"line_start":153,"line_end":153,"column_start":12,"column_end":20},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":3647},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/ops.rs","byte_start":48607,"byte_end":48615,"line_start":25,"line_end":25,"column_start":33,"column_end":41},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":3647},"to":{"krate":2,"index":3112}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/ops.rs","byte_start":48906,"byte_end":48914,"line_start":41,"line_end":41,"column_start":39,"column_end":47},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":3647},"to":{"krate":2,"index":3139}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/ops.rs","byte_start":49161,"byte_end":49169,"line_start":54,"line_end":54,"column_start":32,"column_end":40},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":3647},"to":{"krate":2,"index":3117}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/ops.rs","byte_start":49457,"byte_end":49465,"line_start":70,"line_end":70,"column_start":38,"column_end":46},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":3647},"to":{"krate":2,"index":3143}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/ops.rs","byte_start":49711,"byte_end":49719,"line_start":83,"line_end":83,"column_start":33,"column_end":41},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":3647},"to":{"krate":2,"index":3122}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/ops.rs","byte_start":50010,"byte_end":50018,"line_start":99,"line_end":99,"column_start":39,"column_end":47},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":3647},"to":{"krate":2,"index":3147}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/ops.rs","byte_start":50255,"byte_end":50263,"line_start":112,"line_end":112,"column_start":22,"column_end":30},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":3647},"to":{"krate":2,"index":3200}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/ops.rs","byte_start":50489,"byte_end":50497,"line_start":126,"line_end":126,"column_start":25,"column_end":33},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":3647},"to":{"krate":2,"index":3213}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/ops.rs","byte_start":50676,"byte_end":50684,"line_start":137,"line_end":137,"column_start":32,"column_end":40},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":3647},"to":{"krate":2,"index":3285}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/ops.rs","byte_start":50966,"byte_end":50974,"line_start":151,"line_end":151,"column_start":35,"column_end":43},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":3647},"to":{"krate":2,"index":3289}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/ops.rs","byte_start":51232,"byte_end":51240,"line_start":164,"line_end":164,"column_start":20,"column_end":28},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":3647},"to":{"krate":2,"index":3108}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":51852,"byte_end":51860,"line_start":36,"line_end":36,"column_start":46,"column_end":54},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":3647},"to":{"krate":2,"index":2588}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":52081,"byte_end":52089,"line_start":48,"line_end":48,"column_start":49,"column_end":57},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":3647},"to":{"krate":2,"index":2591}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":52265,"byte_end":52273,"line_start":59,"line_end":59,"column_start":19,"column_end":27},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":3647},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":52376,"byte_end":52384,"line_start":67,"line_end":67,"column_start":20,"column_end":28},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":3647},"to":{"krate":2,"index":2676}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":52620,"byte_end":52628,"line_start":79,"line_end":79,"column_start":45,"column_end":53},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1263},"to":{"krate":2,"index":2640}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":52853,"byte_end":52861,"line_start":92,"line_end":92,"column_start":36,"column_end":44},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":3647},"to":{"krate":2,"index":2640}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":53125,"byte_end":53133,"line_start":106,"line_end":106,"column_start":46,"column_end":54},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1263},"to":{"krate":2,"index":2687}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":53395,"byte_end":53403,"line_start":119,"line_end":119,"column_start":37,"column_end":45},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":3647},"to":{"krate":2,"index":2687}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":53703,"byte_end":53711,"line_start":133,"line_end":133,"column_start":45,"column_end":53},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":3647},"to":{"krate":2,"index":2886}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":53928,"byte_end":53936,"line_start":145,"line_end":145,"column_start":45,"column_end":53},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":3647},"to":{"krate":2,"index":2889}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":54144,"byte_end":54152,"line_start":157,"line_end":157,"column_start":24,"column_end":32},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":3647},"to":{"krate":2,"index":2895}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":54325,"byte_end":54333,"line_start":168,"line_end":168,"column_start":53,"column_end":61},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":3647},"to":{"krate":2,"index":2902}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":55791,"byte_end":55799,"line_start":227,"line_end":227,"column_start":24,"column_end":32},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":3647},"to":{"krate":2,"index":2967}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":55968,"byte_end":55976,"line_start":239,"line_end":239,"column_start":23,"column_end":31},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":3647},"to":{"krate":2,"index":9304}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":56156,"byte_end":56164,"line_start":250,"line_end":250,"column_start":22,"column_end":30},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":3647},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":56517,"byte_end":56525,"line_start":271,"line_end":271,"column_start":24,"column_end":32},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":3647},"to":{"krate":2,"index":9300}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":56739,"byte_end":56747,"line_start":283,"line_end":283,"column_start":25,"column_end":33},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":3647},"to":{"krate":2,"index":9306}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":56960,"byte_end":56968,"line_start":295,"line_end":295,"column_start":22,"column_end":30},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":3647},"to":{"krate":2,"index":9302}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":57181,"byte_end":57189,"line_start":307,"line_end":307,"column_start":25,"column_end":33},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":3647},"to":{"krate":2,"index":9308}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":57401,"byte_end":57409,"line_start":319,"line_end":319,"column_start":21,"column_end":29},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":3647},"to":{"krate":2,"index":9499}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":58325,"byte_end":58333,"line_start":361,"line_end":361,"column_start":22,"column_end":30},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":3647},"to":{"krate":2,"index":3030}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":58573,"byte_end":58593,"line_start":374,"line_end":374,"column_start":6,"column_end":26},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":3659},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":58715,"byte_end":58735,"line_start":382,"line_end":382,"column_start":18,"column_end":38},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":3659},"to":{"krate":2,"index":9300}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/array/traits.rs","byte_start":58917,"byte_end":58937,"line_start":390,"line_end":390,"column_start":28,"column_end":48},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":3659},"to":{"krate":1,"index":2336}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":69541,"byte_end":69550,"line_start":342,"line_end":342,"column_start":22,"column_end":31},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":3679},"to":{"krate":2,"index":2610}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":69677,"byte_end":69686,"line_start":353,"line_end":353,"column_start":21,"column_end":30},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":3679},"to":{"krate":2,"index":2999}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":77089,"byte_end":77095,"line_start":614,"line_end":614,"column_start":19,"column_end":25},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":3739},"to":{"krate":2,"index":2610}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":77208,"byte_end":77214,"line_start":623,"line_end":623,"column_start":26,"column_end":32},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":3739},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":77864,"byte_end":77870,"line_start":651,"line_end":651,"column_start":37,"column_end":43},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":3739},"to":{"krate":2,"index":7423}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":78496,"byte_end":78502,"line_start":677,"line_end":677,"column_start":31,"column_end":37},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":3739},"to":{"krate":2,"index":7448}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":78775,"byte_end":78781,"line_start":691,"line_end":691,"column_start":39,"column_end":45},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":3739},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/domain.rs","byte_start":78829,"byte_end":78835,"line_start":695,"line_end":695,"column_start":18,"column_end":24},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":3739},"to":{"krate":2,"index":2999}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":90261,"byte_end":90269,"line_start":300,"line_end":300,"column_start":22,"column_end":30},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1263},"to":{"krate":0,"index":557}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":94382,"byte_end":94390,"line_start":460,"line_end":460,"column_start":22,"column_end":30},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1263},"to":{"krate":0,"index":557}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":97776,"byte_end":97784,"line_start":622,"line_end":622,"column_start":25,"column_end":33},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":3647},"to":{"krate":0,"index":557}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":98363,"byte_end":98369,"line_start":655,"line_end":655,"column_start":25,"column_end":31},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":2459},"to":{"krate":0,"index":557}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field.rs","byte_start":98942,"byte_end":98948,"line_start":688,"line_end":688,"column_start":25,"column_end":31},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":2895},"to":{"krate":0,"index":557}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/field/io.rs","byte_start":108349,"byte_end":108355,"line_start":104,"line_end":104,"column_start":22,"column_end":28},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":2895},"to":{"krate":1,"index":4395}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":112691,"byte_end":112700,"line_start":92,"line_end":92,"column_start":24,"column_end":33},"kind":"SuperTrait","from":{"krate":0,"index":861},"to":{"krate":0,"index":741}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":112703,"byte_end":112709,"line_start":92,"line_end":92,"column_start":36,"column_end":42},"kind":"SuperTrait","from":{"krate":20,"index":74},"to":{"krate":0,"index":741}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":112712,"byte_end":112720,"line_start":92,"line_end":92,"column_start":45,"column_end":53},"kind":"SuperTrait","from":{"krate":0,"index":2306},"to":{"krate":0,"index":741}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":114426,"byte_end":114432,"line_start":151,"line_end":151,"column_start":9,"column_end":15},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":3798},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":122391,"byte_end":122397,"line_start":409,"line_end":409,"column_start":20,"column_end":26},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":3798},"to":{"krate":2,"index":9304}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":122597,"byte_end":122603,"line_start":419,"line_end":419,"column_start":19,"column_end":25},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":3798},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":122854,"byte_end":122860,"line_start":431,"line_end":431,"column_start":21,"column_end":27},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":3798},"to":{"krate":2,"index":9300}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":125938,"byte_end":125945,"line_start":546,"line_end":546,"column_start":9,"column_end":16},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":3831},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":128604,"byte_end":128611,"line_start":648,"line_end":648,"column_start":19,"column_end":26},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":3831},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":128863,"byte_end":128870,"line_start":660,"line_end":660,"column_start":21,"column_end":28},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":3831},"to":{"krate":2,"index":9300}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":130525,"byte_end":130531,"line_start":708,"line_end":708,"column_start":9,"column_end":15},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":3864},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":132741,"byte_end":132747,"line_start":804,"line_end":804,"column_start":19,"column_end":25},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":3864},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":132998,"byte_end":133004,"line_start":816,"line_end":816,"column_start":21,"column_end":27},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":3864},"to":{"krate":2,"index":9300}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":134183,"byte_end":134189,"line_start":857,"line_end":857,"column_start":9,"column_end":15},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":3897},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":136109,"byte_end":136115,"line_start":937,"line_end":937,"column_start":20,"column_end":26},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":3897},"to":{"krate":2,"index":9304}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":136315,"byte_end":136321,"line_start":947,"line_end":947,"column_start":19,"column_end":25},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":3897},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":136567,"byte_end":136573,"line_start":959,"line_end":959,"column_start":21,"column_end":27},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":3897},"to":{"krate":2,"index":9300}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":137401,"byte_end":137408,"line_start":989,"line_end":989,"column_start":9,"column_end":16},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":3929},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":139339,"byte_end":139346,"line_start":1076,"line_end":1076,"column_start":20,"column_end":27},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":3929},"to":{"krate":2,"index":9304}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":139547,"byte_end":139554,"line_start":1086,"line_end":1086,"column_start":19,"column_end":26},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":3929},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":139801,"byte_end":139808,"line_start":1098,"line_end":1098,"column_start":21,"column_end":28},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":3929},"to":{"krate":2,"index":9300}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":139972,"byte_end":139979,"line_start":1107,"line_end":1107,"column_start":28,"column_end":35},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":3929},"to":{"krate":2,"index":7338}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":140140,"byte_end":140147,"line_start":1116,"line_end":1116,"column_start":23,"column_end":30},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":3929},"to":{"krate":2,"index":3112}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":140288,"byte_end":140295,"line_start":1126,"line_end":1126,"column_start":22,"column_end":29},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":3929},"to":{"krate":2,"index":3117}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/index.rs","byte_start":140430,"byte_end":140437,"line_start":1136,"line_end":1136,"column_start":17,"column_end":24},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":3929},"to":{"krate":2,"index":3108}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/mem.rs","byte_start":143351,"byte_end":143361,"line_start":21,"line_end":21,"column_start":22,"column_end":32},"kind":"SuperTrait","from":{"krate":23,"index":267},"to":{"krate":0,"index":861}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/mem.rs","byte_start":143370,"byte_end":143376,"line_start":21,"line_end":21,"column_start":41,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":876},"to":{"krate":0,"index":861}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":154467,"byte_end":154471,"line_start":245,"line_end":245,"column_start":26,"column_end":30},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":3985},"to":{"krate":0,"index":897}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/order.rs","byte_start":155951,"byte_end":155955,"line_start":290,"line_end":290,"column_start":26,"column_end":30},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":4007},"to":{"krate":0,"index":897}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/pointer.rs","byte_start":164250,"byte_end":164257,"line_start":63,"line_end":63,"column_start":9,"column_end":16},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":4029},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/pointer.rs","byte_start":165251,"byte_end":165258,"line_start":108,"line_end":108,"column_start":19,"column_end":26},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":4029},"to":{"krate":2,"index":2610}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/pointer.rs","byte_start":165405,"byte_end":165412,"line_start":118,"line_end":118,"column_start":22,"column_end":29},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":4029},"to":{"krate":2,"index":2895}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/pointer.rs","byte_start":165576,"byte_end":165583,"line_start":128,"line_end":128,"column_start":28,"column_end":35},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":4029},"to":{"krate":2,"index":2895}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/pointer.rs","byte_start":165752,"byte_end":165759,"line_start":138,"line_end":138,"column_start":26,"column_end":33},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":4029},"to":{"krate":2,"index":2895}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/pointer.rs","byte_start":165923,"byte_end":165930,"line_start":148,"line_end":148,"column_start":26,"column_end":33},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":4029},"to":{"krate":2,"index":2895}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/pointer.rs","byte_start":166088,"byte_end":166095,"line_start":158,"line_end":158,"column_start":19,"column_end":26},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":4029},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/pointer.rs","byte_start":166285,"byte_end":166292,"line_start":168,"line_end":168,"column_start":21,"column_end":28},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":4029},"to":{"krate":2,"index":9310}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/pointer.rs","byte_start":166449,"byte_end":166456,"line_start":177,"line_end":177,"column_start":18,"column_end":25},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":4029},"to":{"krate":2,"index":2999}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/pointer.rs","byte_start":172345,"byte_end":172351,"line_start":331,"line_end":331,"column_start":9,"column_end":15},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":4054},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/pointer.rs","byte_start":194445,"byte_end":194451,"line_start":1018,"line_end":1018,"column_start":19,"column_end":25},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":4054},"to":{"krate":2,"index":2610}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/pointer.rs","byte_start":194563,"byte_end":194569,"line_start":1026,"line_end":1026,"column_start":37,"column_end":43},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":4054},"to":{"krate":2,"index":2640}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/pointer.rs","byte_start":195096,"byte_end":195102,"line_start":1044,"line_end":1044,"column_start":21,"column_end":27},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":4054},"to":{"krate":2,"index":2967}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/pointer.rs","byte_start":195238,"byte_end":195244,"line_start":1054,"line_end":1054,"column_start":19,"column_end":25},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":4054},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/pointer.rs","byte_start":195423,"byte_end":195429,"line_start":1064,"line_end":1064,"column_start":21,"column_end":27},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":4054},"to":{"krate":2,"index":9310}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/pointer.rs","byte_start":195586,"byte_end":195592,"line_start":1073,"line_end":1073,"column_start":18,"column_end":24},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":4054},"to":{"krate":2,"index":2999}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":215896,"byte_end":215904,"line_start":416,"line_end":416,"column_start":12,"column_end":20},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1263},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":223146,"byte_end":223154,"line_start":654,"line_end":654,"column_start":12,"column_end":20},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1263},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":258900,"byte_end":258908,"line_start":1914,"line_end":1914,"column_start":12,"column_end":20},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1263},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice.rs","byte_start":259762,"byte_end":259770,"line_start":1943,"line_end":1943,"column_start":12,"column_end":20},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1263},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":266466,"byte_end":266474,"line_start":65,"line_end":65,"column_start":12,"column_end":20},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1263},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":332780,"byte_end":332788,"line_start":2284,"line_end":2284,"column_start":12,"column_end":20},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1263},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/api.rs","byte_start":349098,"byte_end":349107,"line_start":2865,"line_end":2865,"column_start":44,"column_end":53},"kind":{"Impl":{"id":120}},"from":{"krate":2,"index":41715},"to":{"krate":0,"index":1596}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":351957,"byte_end":351961,"line_start":90,"line_end":90,"column_start":16,"column_end":20},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":4147},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":354554,"byte_end":354558,"line_start":181,"line_end":181,"column_start":22,"column_end":26},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":4147},"to":{"krate":2,"index":2610}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":354714,"byte_end":354718,"line_start":192,"line_end":192,"column_start":38,"column_end":42},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":4147},"to":{"krate":2,"index":2886}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":355337,"byte_end":355341,"line_start":228,"line_end":228,"column_start":21,"column_end":25},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":4147},"to":{"krate":2,"index":2999}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":357030,"byte_end":357037,"line_start":290,"line_end":290,"column_start":16,"column_end":23},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":4161},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":360678,"byte_end":360682,"line_start":425,"line_end":425,"column_start":16,"column_end":20},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":4147},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":361295,"byte_end":361302,"line_start":460,"line_end":460,"column_start":16,"column_end":23},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":4161},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":374950,"byte_end":374961,"line_start":1038,"line_end":1038,"column_start":16,"column_end":27},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":4355},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":378033,"byte_end":378047,"line_start":1159,"line_end":1159,"column_start":16,"column_end":30},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":4395},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":387114,"byte_end":387126,"line_start":1496,"line_end":1496,"column_start":16,"column_end":28},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":4503},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":390294,"byte_end":390309,"line_start":1618,"line_end":1618,"column_start":16,"column_end":31},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":4543},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/iter.rs","byte_start":401140,"byte_end":401159,"line_start":2096,"line_end":2096,"column_start":18,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":7423},"to":{"krate":0,"index":1791}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/ops.rs","byte_start":413585,"byte_end":413593,"line_start":32,"line_end":32,"column_start":39,"column_end":47},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":1263},"to":{"krate":2,"index":3139}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/ops.rs","byte_start":413849,"byte_end":413857,"line_start":44,"line_end":44,"column_start":38,"column_end":46},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":1263},"to":{"krate":2,"index":3143}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/ops.rs","byte_start":414113,"byte_end":414121,"line_start":56,"line_end":56,"column_start":39,"column_end":47},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":1263},"to":{"krate":2,"index":3147}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/ops.rs","byte_start":414368,"byte_end":414376,"line_start":68,"line_end":68,"column_start":29,"column_end":37},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":1263},"to":{"krate":2,"index":3285}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/proxy.rs","byte_start":419536,"byte_end":419542,"line_start":101,"line_end":101,"column_start":12,"column_end":18},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":1963},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/proxy.rs","byte_start":421185,"byte_end":421191,"line_start":157,"line_end":157,"column_start":22,"column_end":28},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":1963},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/proxy.rs","byte_start":421555,"byte_end":421561,"line_start":173,"line_end":173,"column_start":22,"column_end":28},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":1963},"to":{"krate":2,"index":3200}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/proxy.rs","byte_start":421720,"byte_end":421726,"line_start":186,"line_end":186,"column_start":25,"column_end":31},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":1963},"to":{"krate":2,"index":3213}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/proxy.rs","byte_start":421875,"byte_end":421881,"line_start":197,"line_end":197,"column_start":21,"column_end":27},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":1963},"to":{"krate":2,"index":3224}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/traits.rs","byte_start":423198,"byte_end":423206,"line_start":43,"line_end":43,"column_start":19,"column_end":27},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":1263},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/traits.rs","byte_start":423271,"byte_end":423279,"line_start":50,"line_end":50,"column_start":20,"column_end":28},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":1263},"to":{"krate":2,"index":2676}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/traits.rs","byte_start":423781,"byte_end":423789,"line_start":69,"line_end":69,"column_start":54,"column_end":62},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":1263},"to":{"krate":2,"index":2640}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/traits.rs","byte_start":424642,"byte_end":424650,"line_start":115,"line_end":115,"column_start":55,"column_end":63},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":1263},"to":{"krate":2,"index":2640}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/traits.rs","byte_start":424899,"byte_end":424907,"line_start":129,"line_end":129,"column_start":59,"column_end":67},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":1263},"to":{"krate":2,"index":2640}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/traits.rs","byte_start":425475,"byte_end":425483,"line_start":149,"line_end":149,"column_start":55,"column_end":63},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":1263},"to":{"krate":2,"index":2687}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/traits.rs","byte_start":426508,"byte_end":426516,"line_start":198,"line_end":198,"column_start":56,"column_end":64},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":1263},"to":{"krate":2,"index":2687}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/traits.rs","byte_start":426774,"byte_end":426782,"line_start":211,"line_end":211,"column_start":60,"column_end":68},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":1263},"to":{"krate":2,"index":2687}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/traits.rs","byte_start":428130,"byte_end":428138,"line_start":288,"line_end":288,"column_start":22,"column_end":30},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":1263},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/traits.rs","byte_start":428410,"byte_end":428418,"line_start":304,"line_end":304,"column_start":24,"column_end":32},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":1263},"to":{"krate":2,"index":9300}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/traits.rs","byte_start":428897,"byte_end":428905,"line_start":322,"line_end":322,"column_start":24,"column_end":32},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":1263},"to":{"krate":2,"index":9310}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/traits.rs","byte_start":434480,"byte_end":434488,"line_start":479,"line_end":479,"column_start":21,"column_end":29},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":1263},"to":{"krate":2,"index":9499}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/traits.rs","byte_start":434685,"byte_end":434693,"line_start":493,"line_end":493,"column_start":28,"column_end":36},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":1263},"to":{"krate":2,"index":2989}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/traits.rs","byte_start":434788,"byte_end":434796,"line_start":501,"line_end":501,"column_start":28,"column_end":36},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":1263},"to":{"krate":2,"index":3001}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/slice/traits.rs","byte_start":434913,"byte_end":434921,"line_start":510,"line_end":510,"column_start":24,"column_end":32},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":1263},"to":{"krate":5,"index":537}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":442846,"byte_end":442852,"line_start":82,"line_end":82,"column_start":27,"column_end":33},"kind":"SuperTrait","from":{"krate":0,"index":2334},"to":{"krate":0,"index":2306}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":442855,"byte_end":442860,"line_start":82,"line_end":82,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":2994},"to":{"krate":0,"index":2306}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":442863,"byte_end":442868,"line_start":82,"line_end":82,"column_start":44,"column_end":49},"kind":"SuperTrait","from":{"krate":2,"index":9293},"to":{"krate":0,"index":2306}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":447456,"byte_end":447460,"line_start":247,"line_end":247,"column_start":22,"column_end":26},"kind":{"Impl":{"id":166}},"from":{"krate":2,"index":4151},"to":{"krate":0,"index":2306}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/store.rs","byte_start":448042,"byte_end":448046,"line_start":273,"line_end":273,"column_start":26,"column_end":30},"kind":{"Impl":{"id":167}},"from":{"krate":2,"index":4151},"to":{"krate":0,"index":2334}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":454593,"byte_end":454594,"line_start":126,"line_end":126,"column_start":21,"column_end":22},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":2373},"to":{"krate":0,"index":2359}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":459998,"byte_end":459999,"line_start":350,"line_end":350,"column_start":26,"column_end":27},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":2410},"to":{"krate":0,"index":2401}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/view.rs","byte_start":460223,"byte_end":460224,"line_start":363,"line_end":363,"column_start":29,"column_end":30},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":2415},"to":{"krate":0,"index":2405}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed.rs","byte_start":465092,"byte_end":465098,"line_start":137,"line_end":137,"column_start":12,"column_end":18},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":2459},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/api.rs","byte_start":474083,"byte_end":474089,"line_start":20,"line_end":20,"column_start":12,"column_end":18},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":2459},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/ops.rs","byte_start":482247,"byte_end":482253,"line_start":29,"line_end":29,"column_start":33,"column_end":39},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":2459},"to":{"krate":2,"index":3112}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/ops.rs","byte_start":482530,"byte_end":482536,"line_start":45,"line_end":45,"column_start":39,"column_end":45},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":2459},"to":{"krate":2,"index":3139}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/ops.rs","byte_start":482769,"byte_end":482775,"line_start":58,"line_end":58,"column_start":32,"column_end":38},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":2459},"to":{"krate":2,"index":3117}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/ops.rs","byte_start":483049,"byte_end":483055,"line_start":74,"line_end":74,"column_start":38,"column_end":44},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":2459},"to":{"krate":2,"index":3143}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/ops.rs","byte_start":483287,"byte_end":483293,"line_start":87,"line_end":87,"column_start":33,"column_end":39},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":2459},"to":{"krate":2,"index":3122}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/ops.rs","byte_start":483570,"byte_end":483576,"line_start":103,"line_end":103,"column_start":39,"column_end":45},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":2459},"to":{"krate":2,"index":3147}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/ops.rs","byte_start":483799,"byte_end":483805,"line_start":116,"line_end":116,"column_start":22,"column_end":28},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":2459},"to":{"krate":2,"index":3200}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/ops.rs","byte_start":484017,"byte_end":484023,"line_start":130,"line_end":130,"column_start":25,"column_end":31},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":2459},"to":{"krate":2,"index":3213}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/ops.rs","byte_start":484184,"byte_end":484190,"line_start":141,"line_end":141,"column_start":21,"column_end":27},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":2459},"to":{"krate":2,"index":3224}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/ops.rs","byte_start":484455,"byte_end":484461,"line_start":154,"line_end":154,"column_start":32,"column_end":38},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":2459},"to":{"krate":2,"index":3285}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/ops.rs","byte_start":484753,"byte_end":484759,"line_start":169,"line_end":169,"column_start":35,"column_end":41},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":2459},"to":{"krate":2,"index":3289}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/ops.rs","byte_start":485003,"byte_end":485009,"line_start":182,"line_end":182,"column_start":20,"column_end":26},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":2459},"to":{"krate":2,"index":3108}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":485720,"byte_end":485726,"line_start":42,"line_end":42,"column_start":39,"column_end":45},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":2459},"to":{"krate":2,"index":2588}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":485926,"byte_end":485932,"line_start":54,"line_end":54,"column_start":42,"column_end":48},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":2459},"to":{"krate":2,"index":2591}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":486128,"byte_end":486134,"line_start":66,"line_end":66,"column_start":22,"column_end":28},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":2459},"to":{"krate":2,"index":2610}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":486286,"byte_end":486292,"line_start":77,"line_end":77,"column_start":19,"column_end":25},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":2459},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":486388,"byte_end":486394,"line_start":85,"line_end":85,"column_start":20,"column_end":26},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":2459},"to":{"krate":2,"index":2676}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":486630,"byte_end":486638,"line_start":97,"line_end":97,"column_start":52,"column_end":60},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":1263},"to":{"krate":2,"index":2640}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":487409,"byte_end":487415,"line_start":139,"line_end":139,"column_start":36,"column_end":42},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":2459},"to":{"krate":2,"index":2640}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":487655,"byte_end":487663,"line_start":152,"line_end":152,"column_start":41,"column_end":49},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":1263},"to":{"krate":2,"index":2687}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":487902,"byte_end":487908,"line_start":164,"line_end":164,"column_start":37,"column_end":43},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":2459},"to":{"krate":2,"index":2687}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":488182,"byte_end":488188,"line_start":177,"line_end":177,"column_start":38,"column_end":44},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":2459},"to":{"krate":2,"index":2886}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":488384,"byte_end":488390,"line_start":189,"line_end":189,"column_start":38,"column_end":44},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":2459},"to":{"krate":2,"index":2889}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":488605,"byte_end":488611,"line_start":201,"line_end":201,"column_start":45,"column_end":51},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":2459},"to":{"krate":2,"index":2895}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":488819,"byte_end":488825,"line_start":213,"line_end":213,"column_start":35,"column_end":41},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":2459},"to":{"krate":2,"index":2895}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":489018,"byte_end":489024,"line_start":225,"line_end":225,"column_start":31,"column_end":37},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":2459},"to":{"krate":2,"index":2892}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":489211,"byte_end":489217,"line_start":237,"line_end":237,"column_start":34,"column_end":40},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":2459},"to":{"krate":2,"index":2902}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":489461,"byte_end":489467,"line_start":251,"line_end":251,"column_start":24,"column_end":30},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":2459},"to":{"krate":2,"index":2967}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":489633,"byte_end":489639,"line_start":264,"line_end":264,"column_start":22,"column_end":28},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":2459},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":489992,"byte_end":489998,"line_start":285,"line_end":285,"column_start":24,"column_end":30},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":2459},"to":{"krate":2,"index":9300}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":490204,"byte_end":490210,"line_start":297,"line_end":297,"column_start":23,"column_end":29},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":2459},"to":{"krate":2,"index":9304}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":490417,"byte_end":490423,"line_start":309,"line_end":309,"column_start":25,"column_end":31},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":2459},"to":{"krate":2,"index":9306}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":490629,"byte_end":490635,"line_start":321,"line_end":321,"column_start":22,"column_end":28},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":2459},"to":{"krate":2,"index":9302}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":490840,"byte_end":490846,"line_start":333,"line_end":333,"column_start":24,"column_end":30},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":2459},"to":{"krate":2,"index":9310}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":491088,"byte_end":491094,"line_start":346,"line_end":346,"column_start":25,"column_end":31},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":2459},"to":{"krate":2,"index":9308}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":491299,"byte_end":491305,"line_start":358,"line_end":358,"column_start":21,"column_end":27},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":2459},"to":{"krate":2,"index":9499}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":491478,"byte_end":491484,"line_start":370,"line_end":370,"column_start":28,"column_end":34},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":2459},"to":{"krate":2,"index":2989}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":491557,"byte_end":491563,"line_start":377,"line_end":377,"column_start":28,"column_end":34},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":2459},"to":{"krate":2,"index":3001}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/boxed/traits.rs","byte_start":491630,"byte_end":491636,"line_start":384,"line_end":384,"column_start":22,"column_end":28},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":2459},"to":{"krate":2,"index":3030}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec.rs","byte_start":497196,"byte_end":497202,"line_start":142,"line_end":142,"column_start":12,"column_end":18},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":2895},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/api.rs","byte_start":512604,"byte_end":512610,"line_start":37,"line_end":37,"column_start":12,"column_end":18},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":2895},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":546885,"byte_end":546891,"line_start":37,"line_end":37,"column_start":29,"column_end":35},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":2895},"to":{"krate":2,"index":7388}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":547589,"byte_end":547595,"line_start":67,"line_end":67,"column_start":37,"column_end":43},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":2895},"to":{"krate":2,"index":7388}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":547807,"byte_end":547813,"line_start":79,"line_end":79,"column_start":35,"column_end":41},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":2895},"to":{"krate":2,"index":7375}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":548145,"byte_end":548151,"line_start":96,"line_end":96,"column_start":43,"column_end":49},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":2895},"to":{"krate":2,"index":7375}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":548365,"byte_end":548371,"line_start":108,"line_end":108,"column_start":29,"column_end":35},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":2895},"to":{"krate":2,"index":7379}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":550235,"byte_end":550243,"line_start":186,"line_end":186,"column_start":12,"column_end":20},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":5690},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":552269,"byte_end":552277,"line_start":260,"line_end":260,"column_start":25,"column_end":33},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":5690},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":552851,"byte_end":552859,"line_start":294,"line_end":294,"column_start":36,"column_end":44},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":5690},"to":{"krate":2,"index":7423}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":553187,"byte_end":553195,"line_start":311,"line_end":311,"column_start":34,"column_end":42},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":5690},"to":{"krate":2,"index":7448}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":553336,"byte_end":553344,"line_start":322,"line_end":322,"column_start":30,"column_end":38},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":5690},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":554085,"byte_end":554090,"line_start":354,"line_end":354,"column_start":16,"column_end":21},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":3161},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":558635,"byte_end":558640,"line_start":504,"line_end":504,"column_start":38,"column_end":43},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":3161},"to":{"krate":2,"index":2886}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":558828,"byte_end":558833,"line_start":516,"line_end":516,"column_start":26,"column_end":31},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":3161},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":559087,"byte_end":559092,"line_start":530,"line_end":530,"column_start":25,"column_end":30},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":3161},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":559673,"byte_end":559678,"line_start":564,"line_end":564,"column_start":36,"column_end":41},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":3161},"to":{"krate":2,"index":7423}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":560012,"byte_end":560017,"line_start":581,"line_end":581,"column_start":34,"column_end":39},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":3161},"to":{"krate":2,"index":7448}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":560163,"byte_end":560168,"line_start":592,"line_end":592,"column_start":30,"column_end":35},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":3161},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":560245,"byte_end":560250,"line_start":599,"line_end":599,"column_start":28,"column_end":33},"kind":{"Impl":{"id":231}},"from":{"krate":0,"index":3161},"to":{"krate":2,"index":2989}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":560327,"byte_end":560332,"line_start":606,"line_end":606,"column_start":28,"column_end":33},"kind":{"Impl":{"id":232}},"from":{"krate":0,"index":3161},"to":{"krate":2,"index":3001}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":560402,"byte_end":560407,"line_start":613,"line_end":613,"column_start":21,"column_end":26},"kind":{"Impl":{"id":233}},"from":{"krate":0,"index":3161},"to":{"krate":2,"index":3224}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":562119,"byte_end":562125,"line_start":680,"line_end":680,"column_start":19,"column_end":25},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":5725},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":562479,"byte_end":562485,"line_start":694,"line_end":694,"column_start":28,"column_end":34},"kind":{"Impl":{"id":235}},"from":{"krate":0,"index":5725},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":563791,"byte_end":563797,"line_start":741,"line_end":741,"column_start":39,"column_end":45},"kind":{"Impl":{"id":236}},"from":{"krate":0,"index":5725},"to":{"krate":2,"index":7423}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":564146,"byte_end":564152,"line_start":759,"line_end":759,"column_start":37,"column_end":43},"kind":{"Impl":{"id":237}},"from":{"krate":0,"index":5725},"to":{"krate":2,"index":7448}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":564331,"byte_end":564337,"line_start":771,"line_end":771,"column_start":33,"column_end":39},"kind":{"Impl":{"id":238}},"from":{"krate":0,"index":5725},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/iter.rs","byte_start":564440,"byte_end":564446,"line_start":779,"line_end":779,"column_start":24,"column_end":30},"kind":{"Impl":{"id":239}},"from":{"krate":0,"index":5725},"to":{"krate":2,"index":3224}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/ops.rs","byte_start":566417,"byte_end":566423,"line_start":29,"line_end":29,"column_start":33,"column_end":39},"kind":{"Impl":{"id":240}},"from":{"krate":0,"index":2895},"to":{"krate":2,"index":3112}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/ops.rs","byte_start":566700,"byte_end":566706,"line_start":45,"line_end":45,"column_start":39,"column_end":45},"kind":{"Impl":{"id":241}},"from":{"krate":0,"index":2895},"to":{"krate":2,"index":3139}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/ops.rs","byte_start":566939,"byte_end":566945,"line_start":58,"line_end":58,"column_start":32,"column_end":38},"kind":{"Impl":{"id":242}},"from":{"krate":0,"index":2895},"to":{"krate":2,"index":3117}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/ops.rs","byte_start":567219,"byte_end":567225,"line_start":74,"line_end":74,"column_start":38,"column_end":44},"kind":{"Impl":{"id":243}},"from":{"krate":0,"index":2895},"to":{"krate":2,"index":3143}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/ops.rs","byte_start":567457,"byte_end":567463,"line_start":87,"line_end":87,"column_start":33,"column_end":39},"kind":{"Impl":{"id":244}},"from":{"krate":0,"index":2895},"to":{"krate":2,"index":3122}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/ops.rs","byte_start":567740,"byte_end":567746,"line_start":103,"line_end":103,"column_start":39,"column_end":45},"kind":{"Impl":{"id":245}},"from":{"krate":0,"index":2895},"to":{"krate":2,"index":3147}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/ops.rs","byte_start":567969,"byte_end":567975,"line_start":116,"line_end":116,"column_start":22,"column_end":28},"kind":{"Impl":{"id":246}},"from":{"krate":0,"index":2895},"to":{"krate":2,"index":3200}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/ops.rs","byte_start":568187,"byte_end":568193,"line_start":130,"line_end":130,"column_start":25,"column_end":31},"kind":{"Impl":{"id":247}},"from":{"krate":0,"index":2895},"to":{"krate":2,"index":3213}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/ops.rs","byte_start":568354,"byte_end":568360,"line_start":141,"line_end":141,"column_start":21,"column_end":27},"kind":{"Impl":{"id":248}},"from":{"krate":0,"index":2895},"to":{"krate":2,"index":3224}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/ops.rs","byte_start":568688,"byte_end":568694,"line_start":156,"line_end":156,"column_start":32,"column_end":38},"kind":{"Impl":{"id":249}},"from":{"krate":0,"index":2895},"to":{"krate":2,"index":3285}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/ops.rs","byte_start":568986,"byte_end":568992,"line_start":171,"line_end":171,"column_start":35,"column_end":41},"kind":{"Impl":{"id":250}},"from":{"krate":0,"index":2895},"to":{"krate":2,"index":3289}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/ops.rs","byte_start":569414,"byte_end":569420,"line_start":188,"line_end":188,"column_start":20,"column_end":26},"kind":{"Impl":{"id":251}},"from":{"krate":0,"index":2895},"to":{"krate":2,"index":3108}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":570128,"byte_end":570134,"line_start":44,"line_end":44,"column_start":39,"column_end":45},"kind":{"Impl":{"id":252}},"from":{"krate":0,"index":2895},"to":{"krate":2,"index":2588}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":570334,"byte_end":570340,"line_start":56,"line_end":56,"column_start":42,"column_end":48},"kind":{"Impl":{"id":253}},"from":{"krate":0,"index":2895},"to":{"krate":2,"index":2591}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":570505,"byte_end":570511,"line_start":67,"line_end":67,"column_start":22,"column_end":28},"kind":{"Impl":{"id":254}},"from":{"krate":0,"index":2895},"to":{"krate":2,"index":2610}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":571050,"byte_end":571056,"line_start":95,"line_end":95,"column_start":19,"column_end":25},"kind":{"Impl":{"id":255}},"from":{"krate":0,"index":2895},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":571152,"byte_end":571158,"line_start":103,"line_end":103,"column_start":20,"column_end":26},"kind":{"Impl":{"id":256}},"from":{"krate":0,"index":2895},"to":{"krate":2,"index":2676}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":571394,"byte_end":571402,"line_start":115,"line_end":115,"column_start":52,"column_end":60},"kind":{"Impl":{"id":257}},"from":{"krate":0,"index":1263},"to":{"krate":2,"index":2640}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":572173,"byte_end":572179,"line_start":157,"line_end":157,"column_start":36,"column_end":42},"kind":{"Impl":{"id":258}},"from":{"krate":0,"index":2895},"to":{"krate":2,"index":2640}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":572419,"byte_end":572427,"line_start":170,"line_end":170,"column_start":41,"column_end":49},"kind":{"Impl":{"id":259}},"from":{"krate":0,"index":1263},"to":{"krate":2,"index":2687}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":572666,"byte_end":572672,"line_start":182,"line_end":182,"column_start":37,"column_end":43},"kind":{"Impl":{"id":260}},"from":{"krate":0,"index":2895},"to":{"krate":2,"index":2687}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":572946,"byte_end":572952,"line_start":195,"line_end":195,"column_start":38,"column_end":44},"kind":{"Impl":{"id":261}},"from":{"krate":0,"index":2895},"to":{"krate":2,"index":2886}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":573148,"byte_end":573154,"line_start":207,"line_end":207,"column_start":38,"column_end":44},"kind":{"Impl":{"id":262}},"from":{"krate":0,"index":2895},"to":{"krate":2,"index":2889}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":573369,"byte_end":573375,"line_start":219,"line_end":219,"column_start":45,"column_end":51},"kind":{"Impl":{"id":263}},"from":{"krate":0,"index":2895},"to":{"krate":2,"index":2895}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":573588,"byte_end":573594,"line_start":231,"line_end":231,"column_start":49,"column_end":55},"kind":{"Impl":{"id":264}},"from":{"krate":0,"index":2895},"to":{"krate":2,"index":2895}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":573797,"byte_end":573803,"line_start":243,"line_end":243,"column_start":35,"column_end":41},"kind":{"Impl":{"id":265}},"from":{"krate":0,"index":2895},"to":{"krate":2,"index":2895}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":573992,"byte_end":573998,"line_start":255,"line_end":255,"column_start":29,"column_end":35},"kind":{"Impl":{"id":266}},"from":{"krate":0,"index":2895},"to":{"krate":2,"index":2892}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":574173,"byte_end":574179,"line_start":267,"line_end":267,"column_start":32,"column_end":38},"kind":{"Impl":{"id":267}},"from":{"krate":0,"index":2895},"to":{"krate":2,"index":2902}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":574407,"byte_end":574413,"line_start":281,"line_end":281,"column_start":24,"column_end":30},"kind":{"Impl":{"id":268}},"from":{"krate":0,"index":2895},"to":{"krate":2,"index":2967}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":574540,"byte_end":574546,"line_start":292,"line_end":292,"column_start":22,"column_end":28},"kind":{"Impl":{"id":269}},"from":{"krate":0,"index":2895},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":574833,"byte_end":574839,"line_start":308,"line_end":308,"column_start":24,"column_end":30},"kind":{"Impl":{"id":270}},"from":{"krate":0,"index":2895},"to":{"krate":2,"index":9300}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":575045,"byte_end":575051,"line_start":320,"line_end":320,"column_start":23,"column_end":29},"kind":{"Impl":{"id":271}},"from":{"krate":0,"index":2895},"to":{"krate":2,"index":9304}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":575258,"byte_end":575264,"line_start":332,"line_end":332,"column_start":25,"column_end":31},"kind":{"Impl":{"id":272}},"from":{"krate":0,"index":2895},"to":{"krate":2,"index":9306}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":575470,"byte_end":575476,"line_start":344,"line_end":344,"column_start":22,"column_end":28},"kind":{"Impl":{"id":273}},"from":{"krate":0,"index":2895},"to":{"krate":2,"index":9302}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":575650,"byte_end":575656,"line_start":355,"line_end":355,"column_start":24,"column_end":30},"kind":{"Impl":{"id":274}},"from":{"krate":0,"index":2895},"to":{"krate":2,"index":9310}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":575955,"byte_end":575961,"line_start":371,"line_end":371,"column_start":25,"column_end":31},"kind":{"Impl":{"id":275}},"from":{"krate":0,"index":2895},"to":{"krate":2,"index":9308}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":576166,"byte_end":576172,"line_start":383,"line_end":383,"column_start":21,"column_end":27},"kind":{"Impl":{"id":276}},"from":{"krate":0,"index":2895},"to":{"krate":2,"index":9499}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":576345,"byte_end":576351,"line_start":395,"line_end":395,"column_start":28,"column_end":34},"kind":{"Impl":{"id":277}},"from":{"krate":0,"index":2895},"to":{"krate":2,"index":2989}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":576424,"byte_end":576430,"line_start":402,"line_end":402,"column_start":28,"column_end":34},"kind":{"Impl":{"id":278}},"from":{"krate":0,"index":2895},"to":{"krate":2,"index":3001}},{"span":{"file_name":"/home/nom/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.6/src/vec/traits.rs","byte_start":576497,"byte_end":576503,"line_start":409,"line_end":409,"column_start":22,"column_end":28},"kind":{"Impl":{"id":279}},"from":{"krate":0,"index":2895},"to":{"krate":2,"index":3030}}]}